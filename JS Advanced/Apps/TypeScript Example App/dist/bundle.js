!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){var r,i,o;i=[n(1)],void 0===(o="function"==typeof(r=function(e){var t,n=/:([\w\d]+)/g,r=/\?([^#]*)?$/,i=function(e){return Array.prototype.slice.call(e)},o=function(e){return"[object Function]"===Object.prototype.toString.call(e)},a=function(e){return"[object Array]"===Object.prototype.toString.call(e)},s=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},u=function(e){return decodeURIComponent((e||"").replace(/\+/g," "))},c=encodeURIComponent,l=function(e){return String(e).replace(/&(?!\w+;)/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")},f=function(e){return function(){return this.route.apply(this,[e].concat(Array.prototype.slice.call(arguments)))}},p={},h=!(!window.history||!history.pushState),d=[];return(t=function(){var n,r,a=i(arguments);return t.apps=t.apps||{},0===a.length||a[0]&&o(a[0])?t.apply(t,["body"].concat(a)):"string"==typeof(r=a.shift())?((n=t.apps[r]||new t.Application).element_selector=r,a.length>0&&e.each(a,(function(e,t){n.use(t)})),n.element_selector!=r&&delete t.apps[r],t.apps[n.element_selector]=n,n):void 0}).VERSION="0.7.6",t.addLogger=function(e){d.push(e)},t.log=function(){var n=i(arguments);n.unshift("["+Date()+"]"),e.each(d,(function(e,r){r.apply(t,n)}))},void 0!==window.console?"function"==typeof window.console.log&&o(window.console.log.apply)?t.addLogger((function(){window.console.log.apply(window.console,arguments)})):t.addLogger((function(){window.console.log(arguments)})):"undefined"!=typeof console&&t.addLogger((function(){console.log.apply(console,arguments)})),e.extend(t,{makeArray:i,isFunction:o,isArray:a}),t.Object=function(t){return e.extend(this,t||{})},e.extend(t.Object.prototype,{escapeHTML:l,h:l,toHash:function(){var t={};return e.each(this,(function(e,n){o(n)||(t[e]=n)})),t},toHTML:function(){var t="";return e.each(this,(function(e,n){o(n)||(t+="<strong>"+e+"</strong> "+n+"<br />")})),t},keys:function(e){var t=[];for(var n in this)o(this[n])&&e||t.push(n);return t},has:function(t){return this[t]&&""!==e.trim(this[t].toString())},join:function(){var e=i(arguments),t=e.shift();return e.join(t)},log:function(){t.log.apply(t,arguments)},toString:function(t){var n=[];return e.each(this,(function(e,r){o(r)&&!t||n.push('"'+e+'": '+r.toString())})),"Sammy.Object: {"+n.join(",")+"}"}}),t.targetIsThisWindow=function(t,n){var r=e(t.target).closest(n);if(0===r.length)return!0;var i=r.attr("target");return!i||i===window.name||"_self"===i||"_blank"!==i&&"top"===i&&window===window.top},t.DefaultLocationProxy=function(e,t){this.app=e,this.is_native=!1,this.has_history=h,this._startPolling(t)},t.DefaultLocationProxy.fullPath=function(e){var t=e.toString().match(/^[^#]*(#.+)$/),n=t?t[1]:"";return[e.pathname,e.search,n].join("")},e.extend(t.DefaultLocationProxy.prototype,{bind:function(){var n=this,r=this.app,i=t.DefaultLocationProxy;e(window).bind("hashchange."+this.app.eventNamespace(),(function(e,t){!1!==n.is_native||t||(n.is_native=!0,window.clearInterval(i._interval),i._interval=null),r.trigger("location-changed")})),h&&!r.disable_push_state&&(e(window).bind("popstate."+this.app.eventNamespace(),(function(e){r.trigger("location-changed")})),e(document).delegate("a","click.history-"+this.app.eventNamespace(),(function(e){if(!(e.isDefaultPrevented()||e.metaKey||e.ctrlKey)){var o,a,s=i.fullPath(this);return(this.hostname?this.hostname:(o=this,(a=document.createElement("a")).href=o.href,a.hostname))==window.location.hostname&&r.lookupRoute("get",s)&&t.targetIsThisWindow(e,"a")?(e.preventDefault(),n.setLocation(s),!1):void 0}}))),i._bindings||(i._bindings=0),i._bindings++},unbind:function(){e(window).unbind("hashchange."+this.app.eventNamespace()),e(window).unbind("popstate."+this.app.eventNamespace()),e(document).undelegate("a","click.history-"+this.app.eventNamespace()),t.DefaultLocationProxy._bindings--,t.DefaultLocationProxy._bindings<=0&&(window.clearInterval(t.DefaultLocationProxy._interval),t.DefaultLocationProxy._interval=null)},getLocation:function(){return t.DefaultLocationProxy.fullPath(window.location)},setLocation:function(e){if(/^([^#\/]|$)/.test(e)&&(e=h&&!this.app.disable_push_state?"/"+e:"#!/"+e),e!=this.getLocation()){if(!h||this.app.disable_push_state||!/^\//.test(e))return window.location=e;history.pushState({path:e},window.title,e),this.app.trigger("location-changed")}},_startPolling:function(n){var r=this;if(!t.DefaultLocationProxy._interval){n||(n=10);var i=function(){var n=r.getLocation();void 0!==t.DefaultLocationProxy._last_location&&n==t.DefaultLocationProxy._last_location||window.setTimeout((function(){e(window).trigger("hashchange",[!0])}),0),t.DefaultLocationProxy._last_location=n};i(),t.DefaultLocationProxy._interval=window.setInterval(i,n)}}}),t.Application=function(e){var n=this;this.routes={},this.listeners=new t.Object({}),this.arounds=[],this.befores=[],this.namespace=(new Date).getTime()+"-"+parseInt(1e3*Math.random(),10),this.context_prototype=function(){t.EventContext.apply(this,arguments)},this.context_prototype.prototype=new t.EventContext,o(e)&&e.apply(this,[this]),this._location_proxy||this.setLocationProxy(new t.DefaultLocationProxy(this,this.run_interval_every)),this.debug&&this.bindToAllEvents((function(e,t){n.log(n.toString(),e.cleaned_type,t||{})}))},t.Application.prototype=e.extend({},t.Object.prototype,{ROUTE_VERBS:["get","post","put","delete"],APP_EVENTS:["run","unload","lookup-route","run-route","route-found","event-context-before","event-context-after","changed","error","check-form-submission","redirect","location-changed"],_last_route:null,_location_proxy:null,_running:!1,element_selector:"body",debug:!1,raise_errors:!1,run_interval_every:50,disable_push_state:!1,template_engine:null,toString:function(){return"Sammy.Application:"+this.element_selector},$element:function(t){return t?e(this.element_selector).find(t):e(this.element_selector)},use:function(){var e=i(arguments),n=e.shift(),r=n||"";try{e.unshift(this),"string"==typeof n&&(r="Sammy."+n,n=t[n]),n.apply(this,e)}catch(e){void 0===n?this.error("Plugin Error: called use() but plugin ("+r.toString()+") is not defined",e):o(n)?this.error("Plugin Error",e):this.error("Plugin Error: called use() but '"+r.toString()+"' is not a function",e)}return this},setLocationProxy:function(e){var t=this._location_proxy;this._location_proxy=e,this.isRunning()&&(t&&t.unbind(),this._location_proxy.bind())},log:function(){t.log.apply(t,Array.prototype.concat.apply([this.element_selector],arguments))},route:function(t,r){var i,a,s=this,u=[],c=Array.prototype.slice.call(arguments,2);if(0===c.length&&o(r)&&(c=[r],r=t,t="any"),t=t.toLowerCase(),r.constructor==String){for(n.lastIndex=0;null!==(a=n.exec(r));)u.push(a[1]);r=new RegExp(r.replace(n,"([^/]+)")+"$")}return e.each(c,(function(e,t){"string"==typeof t&&(c[e]=s[t])})),i=function(e){var t={verb:e,path:r,callback:c,param_names:u};s.routes[e]=s.routes[e]||[],s.routes[e].push(t)},"any"===t?e.each(this.ROUTE_VERBS,(function(e,t){i(t)})):i(t),this},get:f("get"),post:f("post"),put:f("put"),del:f("delete"),any:f("any"),mapRoutes:function(t){var n=this;return e.each(t,(function(e,t){n.route.apply(n,t)})),this},eventNamespace:function(){return["sammy-app",this.namespace].join("-")},bind:function(e,t,n){var r=this;void 0===n&&(n=t);var i=function(){var e,t,i;e=arguments[0],(i=arguments[1])&&i.context?(t=i.context,delete i.context):t=new r.context_prototype(r,"bind",e.type,i,e.target),e.cleaned_type=e.type.replace(r.eventNamespace(),""),n.apply(t,[e,i])};return this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(i),this.isRunning()&&this._listen(e,i),this},trigger:function(e,t){return this.$element().trigger([e,this.eventNamespace()].join("."),[t]),this},refresh:function(){return this.last_location=null,this.trigger("location-changed"),this},before:function(e,t){return o(e)&&(t=e,e={}),this.befores.push([e,t]),this},after:function(e){return this.bind("event-context-after",e)},around:function(e){return this.arounds.push(e),this},onComplete:function(e){return this._onComplete=e,this},isRunning:function(){return this._running},helpers:function(t){return e.extend(this.context_prototype.prototype,t),this},helper:function(e,t){return this.context_prototype.prototype[e]=t,this},run:function(n){if(this.isRunning())return!1;var r=this;return e.each(this.listeners.toHash(),(function(t,n){e.each(n,(function(e,n){r._listen(t,n)}))})),this.trigger("run",{start_url:n}),this._running=!0,this.last_location=null,/\#(.+)/.test(this.getLocation())||void 0===n||this.setLocation(n),this._checkLocation(),this._location_proxy.bind(),this.bind("location-changed",(function(){r._checkLocation()})),this.bind("submit",(function(n){return!t.targetIsThisWindow(n,"form")||!1===r._checkFormSubmission(e(n.target).closest("form"))&&n.preventDefault()})),e(window).bind("unload",(function(){r.unload()})),this.trigger("changed")},unload:function(){if(!this.isRunning())return!1;var t=this;return this.trigger("unload"),this._location_proxy.unbind(),this.$element().unbind("submit").removeClass(t.eventNamespace()),e.each(this.listeners.toHash(),(function(n,r){e.each(r,(function(e,r){t._unlisten(n,r)}))})),this._running=!1,this},destroy:function(){return this.unload(),delete t.apps[this.element_selector],this},bindToAllEvents:function(t){var n=this;return e.each(this.APP_EVENTS,(function(e,r){n.bind(r,t)})),e.each(this.listeners.keys(!0),(function(r,i){-1==e.inArray(i,n.APP_EVENTS)&&n.bind(i,t)})),this},routablePath:function(e){return e.replace(r,"")},lookupRoute:function(e,t){var n,r,i=!1,o=0;if(void 0!==this.routes[e])for(n=this.routes[e].length;o<n;o++)if(r=this.routes[e][o],this.routablePath(t).match(r.path)){i=r;break}return i},runRoute:function(t,n,r,i){var o,a,s,c,l,f,p,h,d=this,g=this.lookupRoute(t,n);if(this.debug&&this.log("runRoute",[t,n].join(" ")),this.trigger("run-route",{verb:t,path:n,params:r}),void 0===r&&(r={}),e.extend(r,this._parseQueryString(n)),g){this.trigger("route-found",{route:g}),null!==(p=g.path.exec(this.routablePath(n)))&&(p.shift(),e.each(p,(function(e,t){g.param_names[e]?r[g.param_names[e]]=u(t):(r.splat||(r.splat=[]),r.splat.push(u(t)))}))),o=new this.context_prototype(this,t,n,r,i),s=this.arounds.slice(0),c=this.befores.slice(0),f=[o],r.splat&&(f=f.concat(r.splat)),a=function(){for(var e,t,n;c.length>0;)if(l=c.shift(),d.contextMatchesOptions(o,l[0])&&!1===(e=l[1].apply(o,[o])))return!1;return d.last_route=g,o.trigger("event-context-before",{context:o}),"function"==typeof g.callback&&(g.callback=[g.callback]),g.callback&&g.callback.length&&(t=-1,n=function(){t++,g.callback[t]?e=g.callback[t].apply(o,f):d._onComplete&&(d._onComplete,1)&&d._onComplete(o)},f.push(n),n()),o.trigger("event-context-after",{context:o}),e},e.each(s.reverse(),(function(e,t){var n=a;a=function(){return t.apply(o,[n])}}));try{h=a()}catch(e){this.error(["500 Error",t,n].join(" "),e)}return h}return this.notFound(t,n)},contextMatchesOptions:function(t,n,r){var i=n;if(("string"==typeof i||s(i))&&(i={path:i}),void 0===r&&(r=!0),e.isEmptyObject(i))return!0;if(a(i.path)){var o,u,c,l;for(o=[],u=0,l=i.path.length;u<l;u+=1)c=e.extend({},i,{path:i.path[u]}),o.push(this.contextMatchesOptions(t,c));var f=e.inArray(!0,o)>-1;return r?f:!f}if(i.only)return this.contextMatchesOptions(t,i.only,!0);if(i.except)return this.contextMatchesOptions(t,i.except,!1);var p=!0,h=!0;return i.path&&(s(i.path)||(i.path=new RegExp(i.path.toString()+"$")),p=i.path.test(t.path)),i.verb&&(h="string"==typeof i.verb?i.verb===t.verb:i.verb.indexOf(t.verb)>-1),r?h&&p:!(h&&p)},getLocation:function(){return this._location_proxy.getLocation()},setLocation:function(e){return this._location_proxy.setLocation(e)},swap:function(e,t){var n=this.$element().html(e);return o(t)&&t(e),n},templateCache:function(e,t){return void 0!==t?p[e]=t:p[e]},clearTemplateCache:function(){return p={}},notFound:function(e,t){var n=this.error(["404 Not Found",e,t].join(" "));return"get"!==e||n},error:function(e,t){if(t||(t=new Error),t.message=[e,t.message].join(" "),this.trigger("error",{message:t.message,error:t}),this.raise_errors)throw t;this.log(t.message,t)},_checkLocation:function(){var e,t;return e=this.getLocation(),this.last_location&&"get"==this.last_location[0]&&this.last_location[1]==e||(this.last_location=["get",e],t=this.runRoute("get",e)),t},_getFormVerb:function(t){var n,r,i=e(t);return(r=i.find('input[name="_method"]')).length>0&&(n=r.val()),n||(n=i[0].getAttribute("method")),n&&""!==n||(n="get"),e.trim(n.toString().toLowerCase())},_checkFormSubmission:function(t){var n,r,i,o,a;return this.trigger("check-form-submission",{form:t}),r=(n=e(t)).attr("action")||"",i=this._getFormVerb(n),this.debug&&this.log("_checkFormSubmission",n,r,i),"get"===i?(""!==(o=this._serializeFormParams(n))&&(r+="?"+o),this.setLocation(r),a=!1):(o=e.extend({},this._parseFormParams(n)),a=this.runRoute(i,r,o,t.get(0))),void 0!==a&&a},_serializeFormParams:function(e){var t,n="",r=e.serializeArray();if(r.length>0)for(n=this._encodeFormPair(r[0].name,r[0].value),t=1;t<r.length;t++)n=n+"&"+this._encodeFormPair(r[t].name,r[t].value);return n},_encodeFormPair:function(e,t){return c(e)+"="+c(t)},_parseFormParams:function(e){var t,n={},r=e.serializeArray();for(t=0;t<r.length;t++)n=this._parseParamPair(n,r[t].name,r[t].value);return n},_parseQueryString:function(e){var t,n,i,o,a={};if((t=e.match(r))&&t[1])for(n=t[1].split("&"),o=0;o<n.length;o++)i=n[o].split("="),a=this._parseParamPair(a,u(i[0]),u(i[1]||""));return a},_parseParamPair:function(e,t,n){return void 0!==e[t]?a(e[t])?e[t].push(n):e[t]=[e[t],n]:e[t]=n,e},_listen:function(e,t){return this.$element().bind([e,this.eventNamespace()].join("."),t)},_unlisten:function(e,t){return this.$element().unbind([e,this.eventNamespace()].join("."),t)}}),t.RenderContext=function(e){this.event_context=e,this.callbacks=[],this.previous_content=null,this.content=null,this.next_engine=!1,this.waiting=!1},t.RenderContext.prototype=e.extend({},t.Object.prototype,{then:function(e){if(!o(e)){if("string"!=typeof e||!(e in this.event_context))return this;var t=this.event_context[e];e=function(e){return t.apply(this.event_context,[e])}}var n=this;return this.waiting?this.callbacks.push(e):(this.wait(),window.setTimeout((function(){var t=e.apply(n,[n.content,n.previous_content]);!1!==t&&n.next(t)}),0)),this},wait:function(){this.waiting=!0},next:function(e){this.waiting=!1,void 0!==e&&(this.previous_content=this.content,this.content=e),this.callbacks.length>0&&this.then(this.callbacks.shift())},load:function(t,n,r){var i=this;return this.then((function(){var a,s,u;return o(n)?(r=n,n={}):n=e.extend({},n),r&&this.then(r),"string"==typeof t?(u=t.match(/\.json(\?|$)/)||n.json,a=u?!0===n.cache:!1!==n.cache,i.next_engine=i.event_context.engineFor(t),delete n.cache,delete n.json,n.engine&&(i.next_engine=n.engine,delete n.engine),a&&(s=this.event_context.app.templateCache(t))?s:(this.wait(),e.ajax(e.extend({url:t,data:{},dataType:u?"json":"text",type:"get",success:function(e){a&&i.event_context.app.templateCache(t,e),i.next(e)}},n)),!1)):t.nodeType?t.innerHTML:t.selector?(i.next_engine=t.attr("data-engine"),!1===n.clone?t.remove()[0].innerHTML.toString():t[0].innerHTML.toString()):void 0}))},loadPartials:function(e){var t;if(e)for(t in this.partials=this.partials||{},e)!function(t,n){t.load(e[n]).then((function(e){this.partials[n]=e}))}(this,t);return this},render:function(e,t,n,r){return o(e)&&!t?this.then(e):(o(t)?(r=n,n=t,t=null):n&&!o(n)&&(r=n,n=null),this.loadPartials(r).load(e).interpolate(t,e).then(n))},partial:function(e,t,n,r){return o(n)?this.render(e,t,r).swap(n):o(t)?this.render(e,{},n).swap(t):this.render(e,t,n).swap()},send:function(){var e=this,t=i(arguments),n=t.shift();return a(t[0])&&(t=t[0]),this.then((function(r){return t.push((function(t){e.next(t)})),e.wait(),n.apply(n,t),!1}))},collect:function(t,n,r){var i=this,a=function(){o(t)&&(n=t,t=this.content);var r=[],a=!1;return e.each(t,(function(e,t){var o=n.apply(i,[e,t]);return o.jquery&&1==o.length&&(o=o[0],a=!0),r.push(o),o})),a?r:r.join("")};return r?a():this.then(a)},renderEach:function(t,n,r,i){return a(n)&&(i=r,r=n,n=null),this.load(t).then((function(o){var s=this;if(r||(r=a(this.previous_content)?this.previous_content:[]),!i)return this.collect(r,(function(e,r){var i={},a=this.next_engine||t;return n?i[n]=r:i=r,this.event_context.interpolate(o,i,a)}),!0);e.each(r,(function(e,r){var a={},u=this.next_engine||t;n?a[n]=r:a=r,i(r,s.event_context.interpolate(o,a,u))}))}))},interpolate:function(e,t,n){var r=this;return this.then((function(i,o){!e&&o&&(e=o),this.next_engine&&(t=this.next_engine,this.next_engine=!1);var a=r.event_context.interpolate(i,e,t,this.partials);return n?o+a:a}))},swap:function(e){return this.then((function(t){return this.event_context.swap(t,e),t})).trigger("changed",{})},appendTo:function(t){return this.then((function(n){e(t).append(n)})).trigger("changed",{})},prependTo:function(t){return this.then((function(n){e(t).prepend(n)})).trigger("changed",{})},replace:function(t){return this.then((function(n){e(t).html(n)})).trigger("changed",{})},trigger:function(e,t){return this.then((function(n){return void 0===t&&(t={content:n}),this.event_context.trigger(e,t),n}))}}),t.EventContext=function(e,n,r,i,o){this.app=e,this.verb=n,this.path=r,this.params=new t.Object(i),this.target=o},t.EventContext.prototype=e.extend({},t.Object.prototype,{$element:function(){return this.app.$element(i(arguments).shift())},engineFor:function(e){var t;return o(e)?e:((t=(e=(e||this.app.template_engine).toString()).match(/\.([^\.\?\#]+)(\?|$)/))&&(e=t[1]),e&&o(this[e])?this[e]:this.app.template_engine?this.engineFor(this.app.template_engine):function(e,t){return e})},interpolate:function(e,t,n,r){return this.engineFor(n).apply(this,[e,t,r])},render:function(e,n,r,i){return new t.RenderContext(this).render(e,n,r,i)},renderEach:function(e,n,r,i){return new t.RenderContext(this).renderEach(e,n,r,i)},load:function(e,n,r){return new t.RenderContext(this).load(e,n,r)},loadPartials:function(e){return new t.RenderContext(this).loadPartials(e)},partial:function(e,n,r,i){return new t.RenderContext(this).partial(e,n,r,i)},send:function(){var e=new t.RenderContext(this);return e.send.apply(e,arguments)},redirect:function(){var t,n=i(arguments),r=this.app.getLocation(),o=n.length;if(o>1){for(var a=0,s=[],u=[],c={},l=!1;a<o;a++)"string"==typeof n[a]?s.push(n[a]):(e.extend(c,n[a]),l=!0);if(t=s.join("/"),l){for(var f in c)u.push(this.app._encodeFormPair(f,c[f]));t+="?"+u.join("&")}}else t=n[0];this.trigger("redirect",{to:t}),this.app.last_location=[this.verb,this.path],this.app.setLocation(t),new RegExp(t).test(r)&&this.app.trigger("location-changed")},trigger:function(e,t){return void 0===t&&(t={}),t.context||(t.context=this),this.app.trigger(e,t)},eventNamespace:function(){return this.app.eventNamespace()},swap:function(e,t){return this.app.swap(e,t)},notFound:function(){return this.app.notFound(this.verb,this.path)},json:function(t){return e.parseJSON(t)},toString:function(){return"Sammy.EventContext: "+[this.verb,this.path,this.params].join(" ")}}),t})?r.apply(t,i):r)||(e.exports=o)},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,i){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,u=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},c=o.push,l=o.indexOf,f={},p=f.toString,h=f.hasOwnProperty,d=h.toString,g=d.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},m=function(e){return null!=e&&e===e.window},x=n.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var r,i,o=(n=n||x).createElement("script");if(o.text=e,t)for(r in b)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[p.call(e)]||"object":typeof e}var C=function(e,t){return new C.fn.init(e,t)};function S(e){var t=!!e&&"length"in e&&e.length,n=T(e);return!y(e)&&!m(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}C.fn=C.prototype={jquery:"3.5.1",constructor:C,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return C.each(this,e)},map:function(e){return this.pushStack(C.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(C.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},C.extend=C.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||y(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(c&&r&&(C.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||C.isPlainObject(n)?n:{},i=!1,a[t]=C.extend(c,o,r)):void 0!==r&&(a[t]=r));return a},C.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e))&&(!(t=a(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&d.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(S(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?C.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:l.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(S(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return u(a)},guid:1,support:v}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=o[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){f["[object "+t+"]"]=t.toLowerCase()}));var E=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,n,r,i,o,a,s,u,c,l,f,p,h,d,g,v,y,m,x,b="sizzle"+1*new Date,w=e.document,T=0,C=0,S=ue(),E=ue(),_=ue(),k=ue(),j=function(e,t){return e===t&&(f=!0),0},A={}.hasOwnProperty,N=[],D=N.pop,L=N.push,P=N.push,q=N.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",H="[\\x20\\t\\r\\n\\f]",M="(?:\\\\[\\da-fA-F]{1,6}"+H+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\["+H+"*("+M+")(?:"+H+"*([*^$|!~]?=)"+H+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+H+"*\\]",I=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",$=new RegExp(H+"+","g"),W=new RegExp("^"+H+"+|((?:^|[^\\\\])(?:\\\\.)*)"+H+"+$","g"),B=new RegExp("^"+H+"*,"+H+"*"),z=new RegExp("^"+H+"*([>+~]|"+H+")"+H+"*"),U=new RegExp(H+"|>"),V=new RegExp(I),X=new RegExp("^"+M+"$"),G={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+I),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+H+"*(even|odd|(([+-]|)(\\d*)n|)"+H+"*(?:([+-]|)"+H+"*(\\d+)|))"+H+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+H+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+H+"*((?:-\\d)?\\d*)"+H+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,Y=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+H+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){p()},ae=be((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{P.apply(N=q.call(w.childNodes),w.childNodes),N[w.childNodes.length].nodeType}catch(e){P={apply:N.length?function(e,t){L.apply(e,q.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,i){var o,s,c,l,f,d,y,m=t&&t.ownerDocument,w=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return r;if(!i&&(p(t),t=t||h,g)){if(11!==w&&(f=Z.exec(e)))if(o=f[1]){if(9===w){if(!(c=t.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(m&&(c=m.getElementById(o))&&x(t,c)&&c.id===o)return r.push(c),r}else{if(f[2])return P.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return P.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!k[e+" "]&&(!v||!v.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(y=e,m=t,1===w&&(U.test(e)||z.test(e))){for((m=ee.test(e)&&ye(t.parentNode)||t)===t&&n.scope||((l=t.getAttribute("id"))?l=l.replace(re,ie):t.setAttribute("id",l=b)),s=(d=a(e)).length;s--;)d[s]=(l?"#"+l:":scope")+" "+xe(d[s]);y=d.join(",")}try{return P.apply(r,m.querySelectorAll(y)),r}catch(t){k(e,!0)}finally{l===b&&t.removeAttribute("id")}}}return u(e.replace(W,"$1"),t,r,i)}function ue(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ce(e){return e[b]=!0,e}function le(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ve(e){return ce((function(t){return t=+t,ce((function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Q.test(t||n&&n.nodeName||"HTML")},p=se.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;return a!=h&&9===a.nodeType&&a.documentElement?(d=(h=a).documentElement,g=!o(h),w!=h&&(i=h.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.scope=le((function(e){return d.appendChild(e).appendChild(h.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=le((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=le((function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=K.test(h.getElementsByClassName),n.getById=le((function(e){return d.appendChild(e).id=b,!h.getElementsByName||!h.getElementsByName(b).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],v=[],(n.qsa=K.test(h.querySelectorAll))&&(le((function(e){var t;d.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+H+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+H+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+b+"-]").length||v.push("~="),(t=h.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+H+"*name"+H+"*="+H+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")})),le((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+H+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),d.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")}))),(n.matchesSelector=K.test(m=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&le((function(e){n.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),y.push("!=",I)})),v=v.length&&new RegExp(v.join("|")),y=y.length&&new RegExp(y.join("|")),t=K.test(d.compareDocumentPosition),x=t||K.test(d.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==h||e.ownerDocument==w&&x(w,e)?-1:t==h||t.ownerDocument==w&&x(w,t)?1:l?O(l,e)-O(l,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==h?-1:t==h?1:i?-1:o?1:l?O(l,e)-O(l,t):0;if(i===o)return pe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?pe(a[r],s[r]):a[r]==w?-1:s[r]==w?1:0},h):h},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(p(e),n.matchesSelector&&g&&!k[t+" "]&&(!y||!y.test(t))&&(!v||!v.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){k(t,!0)}return se(t,h,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=h&&p(e),x(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=h&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&A.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(j),f){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return l=null,e},i=se.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=se.selectors={cacheLength:50,createPseudo:ce,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=S[e+" "];return t||(t=new RegExp("(^|"+H+")"+e+"("+H+"|$)"))&&S(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=se.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace($," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,p,h,d,g=o!==a?"nextSibling":"previousSibling",v=t.parentNode,y=s&&t.nodeName.toLowerCase(),m=!u&&!s,x=!1;if(v){if(o){for(;g;){for(p=t;p=p[g];)if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;d=g="only"===e&&!d&&"nextSibling"}return!0}if(d=[a?v.firstChild:v.lastChild],a&&m){for(x=(h=(c=(l=(f=(p=v)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&c[1])&&c[2],p=h&&v.childNodes[h];p=++h&&p&&p[g]||(x=h=0)||d.pop();)if(1===p.nodeType&&++x&&p===t){l[e]=[T,h,x];break}}else if(m&&(x=h=(c=(l=(f=(p=t)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&c[1]),!1===x)for(;(p=++h&&p&&p[g]||(x=h=0)||d.pop())&&((s?p.nodeName.toLowerCase()!==y:1!==p.nodeType)||!++x||(m&&((l=(f=p[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[T,x]),p!==t)););return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=O(e,o[a])]=!(n[r]=o[a])})):function(e){return i(e,0,n)}):i}},pseudos:{not:ce((function(e){var t=[],n=[],r=s(e.replace(W,"$1"));return r[b]?ce((function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))})):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return se(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:ce((function(e){return X.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===d},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve((function(){return[0]})),last:ve((function(e,t){return[t-1]})),eq:ve((function(e,t,n){return[n<0?n+t:n]})),even:ve((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ve((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ve((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:ve((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=de(t);function me(){}function xe(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=C++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var c,l,f,p=[T,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(l=(f=t[b]||(t[b]={}))[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=l[o])&&c[0]===T&&c[1]===s)return p[2]=c[2];if(l[o]=p,p[2]=e(t,n,u))return!0}return!1}}function we(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function Te(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,c=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),c&&t.push(s)));return a}function Ce(e,t,n,r,i,o){return r&&!r[b]&&(r=Ce(r)),i&&!i[b]&&(i=Ce(i,o)),ce((function(o,a,s,u){var c,l,f,p=[],h=[],d=a.length,g=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),v=!e||!o&&t?g:Te(g,p,e,s,u),y=n?i||(o?e:d||r)?[]:a:v;if(n&&n(v,y,s,u),r)for(c=Te(y,h),r(c,[],s,u),l=c.length;l--;)(f=c[l])&&(y[h[l]]=!(v[h[l]]=f));if(o){if(i||e){if(i){for(c=[],l=y.length;l--;)(f=y[l])&&c.push(v[l]=f);i(null,y=[],c,u)}for(l=y.length;l--;)(f=y[l])&&(c=i?O(o,f):p[l])>-1&&(o[c]=!(a[c]=f))}}else y=Te(y===a?y.splice(d,y.length):y),i?i(null,a,y,u):P.apply(a,y)}))}function Se(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,l=be((function(e){return e===t}),s,!0),f=be((function(e){return O(t,e)>-1}),s,!0),p=[function(e,n,r){var i=!a&&(r||n!==c)||((t=n).nodeType?l(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])p=[be(we(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[b]){for(i=++u;i<o&&!r.relative[e[i].type];i++);return Ce(u>1&&we(p),u>1&&xe(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(W,"$1"),n,u<i&&Se(e.slice(u,i)),i<o&&Se(e=e.slice(i)),i<o&&xe(e))}p.push(n)}return we(p)}return me.prototype=r.filters=r.pseudos,r.setFilters=new me,a=se.tokenize=function(e,t){var n,i,o,a,s,u,c,l=E[e+" "];if(l)return t?0:l.slice(0);for(s=e,u=[],c=r.preFilter;s;){for(a in n&&!(i=B.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=z.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(W," ")}),s=s.slice(n.length)),r.filter)!(i=G[a].exec(s))||c[a]&&!(i=c[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):E(e,u).slice(0)},s=se.compile=function(e,t){var n,i=[],o=[],s=_[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Se(t[n]))[b]?i.push(s):o.push(s);(s=_(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,l){var f,d,v,y=0,m="0",x=o&&[],b=[],w=c,C=o||i&&r.find.TAG("*",l),S=T+=null==w?1:Math.random()||.1,E=C.length;for(l&&(c=a==h||a||l);m!==E&&null!=(f=C[m]);m++){if(i&&f){for(d=0,a||f.ownerDocument==h||(p(f),s=!g);v=e[d++];)if(v(f,a||h,s)){u.push(f);break}l&&(T=S)}n&&((f=!v&&f)&&y--,o&&x.push(f))}if(y+=m,n&&m!==y){for(d=0;v=t[d++];)v(x,b,a,s);if(o){if(y>0)for(;m--;)x[m]||b[m]||(b[m]=D.call(u));b=Te(b)}P.apply(u,b),l&&!o&&b.length>0&&y+t.length>1&&se.uniqueSort(u)}return l&&(T=S,c=w),x};return n?ce(o):o}(o,i))).selector=e}return s},u=se.select=function(e,t,n,i){var o,u,c,l,f,p="function"==typeof e&&e,h=!i&&a(e=p.selector||e);if(n=n||[],1===h.length){if((u=h[0]=h[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===t.nodeType&&g&&r.relative[u[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=G.needsContext.test(e)?0:u.length;o--&&(c=u[o],!r.relative[l=c.type]);)if((f=r.find[l])&&(i=f(c.matches[0].replace(te,ne),ee.test(u[0].type)&&ye(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&xe(u)))return P.apply(n,i),n;break}}return(p||s(e,h))(i,t,!g,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},n.sortStable=b.split("").sort(j).join("")===b,n.detectDuplicates=!!f,p(),n.sortDetached=le((function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))})),le((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||fe("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&le((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||fe("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),le((function(e){return null==e.getAttribute("disabled")}))||fe(R,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(n);C.find=E,C.expr=E.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=E.uniqueSort,C.text=E.getText,C.isXMLDoc=E.isXML,C.contains=E.contains,C.escapeSelector=E.escape;var _=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&C(e).is(n))break;r.push(e)}return r},k=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},j=C.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(e,t,n){return y(t)?C.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?C.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?C.grep(e,(function(e){return l.call(t,e)>-1!==n})):C.filter(t,e,n)}C.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?C.find.matchesSelector(r,e)?[r]:[]:C.find.matches(e,C.grep(t,(function(e){return 1===e.nodeType})))},C.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(C(e).filter((function(){for(t=0;t<r;t++)if(C.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)C.find(e,i[t],n);return r>1?C.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,"string"==typeof e&&j.test(e)?C(e):e||[],!1).length}});var L,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||L,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:P.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:x,!0)),N.test(r[1])&&C.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=x.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this)}).prototype=C.fn,L=C(x);var q=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function R(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&C(e);if(!j.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&C.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?C.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?l.call(C(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return _(e,"parentNode")},parentsUntil:function(e,t,n){return _(e,"parentNode",n)},next:function(e){return R(e,"nextSibling")},prev:function(e){return R(e,"previousSibling")},nextAll:function(e){return _(e,"nextSibling")},prevAll:function(e){return _(e,"previousSibling")},nextUntil:function(e,t,n){return _(e,"nextSibling",n)},prevUntil:function(e,t,n){return _(e,"previousSibling",n)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},(function(e,t){C.fn[e]=function(n,r){var i=C.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=C.filter(r,i)),this.length>1&&(O[e]||C.uniqueSort(i),q.test(e)&&i.reverse()),this.pushStack(i)}}));var H=/[^\x20\t\r\n\f]+/g;function M(e){return e}function F(e){throw e}function I(e,t,n,r){var i;try{e&&y(i=e.promise)?i.call(e).done(t).fail(n):e&&y(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return C.each(e.match(H)||[],(function(e,n){t[n]=!0})),t}(e):C.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){C.each(n,(function(n,r){y(r)?e.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==T(r)&&t(r)}))}(arguments),n&&!t&&u()),this},remove:function(){return C.each(arguments,(function(e,t){for(var n;(n=C.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(e){return e?C.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},C.extend({Deferred:function(e){var t=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return C.Deferred((function(n){C.each(t,(function(t,r){var i=y(e[r[4]])&&e[r[4]];o[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,r,i){var o=0;function a(e,t,r,i){return function(){var s=this,u=arguments,c=function(){var n,c;if(!(e<o)){if((n=r.apply(s,u))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(c)?i?c.call(n,a(o,t,M,i),a(o,t,F,i)):(o++,c.call(n,a(o,t,M,i),a(o,t,F,i),a(o,t,M,t.notifyWith))):(r!==M&&(s=void 0,u=[n]),(i||t.resolveWith)(s,u))}},l=i?c:function(){try{c()}catch(n){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(n,l.stackTrace),e+1>=o&&(r!==F&&(s=void 0,u=[n]),t.rejectWith(s,u))}};e?l():(C.Deferred.getStackHook&&(l.stackTrace=C.Deferred.getStackHook()),n.setTimeout(l))}}return C.Deferred((function(n){t[0][3].add(a(0,n,y(i)?i:M,n.notifyWith)),t[1][3].add(a(0,n,y(e)?e:M)),t[2][3].add(a(0,n,y(r)?r:F))})).promise()},promise:function(e){return null!=e?C.extend(e,i):i}},o={};return C.each(t,(function(e,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add((function(){r=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=s.call(arguments),o=C.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(I(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||y(i[n]&&i[n].then)))return o.then();for(;n--;)I(i[n],a(n),o.reject);return o.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&$.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){n.setTimeout((function(){throw e}))};var W=C.Deferred();function B(){x.removeEventListener("DOMContentLoaded",B),n.removeEventListener("load",B),C.ready()}C.fn.ready=function(e){return W.then(e).catch((function(e){C.readyException(e)})),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0,!0!==e&&--C.readyWait>0||W.resolveWith(x,[C]))}}),C.ready.then=W.then,"complete"===x.readyState||"loading"!==x.readyState&&!x.documentElement.doScroll?n.setTimeout(C.ready):(x.addEventListener("DOMContentLoaded",B),n.addEventListener("load",B));var z=function(e,t,n,r,i,o,a){var s=0,u=e.length,c=null==n;if("object"===T(n))for(s in i=!0,n)z(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,y(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(C(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:c?t.call(e):u?t(e[0],n):o},U=/^-ms-/,V=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function G(e){return e.replace(U,"ms-").replace(V,X)}var Q=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=C.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Q(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[G(t)]=n;else for(r in t)i[G(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(H)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||C.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var J=new Y,K=new Y,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),C.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=G(r.slice(5)),te(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){K.set(this,e)})):z(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=K.get(o,e))||void 0!==(n=te(o,e))?n:void 0;this.each((function(){K.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){K.remove(this,e)}))}}),C.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,C.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),r=n.length,i=n.shift(),o=C._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,(function(){C.dequeue(e,t)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:C.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),C.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?C.queue(this[0],e):void 0===t?this:this.each((function(){var n=C.queue(this,e,t);C._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&C.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){C.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=C.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],oe=x.documentElement,ae=function(e){return C.contains(e.ownerDocument,e)},se={composed:!0};oe.getRootNode&&(ae=function(e){return C.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var ue=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===C.css(e,"display")};function ce(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return C.css(e,t,"")},u=s(),c=n&&n[3]||(C.cssNumber[t]?"":"px"),l=e.nodeType&&(C.cssNumber[t]||"px"!==c&&+u)&&re.exec(C.css(e,t));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;a--;)C.style(e,t,l+c),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),l/=o;l*=2,C.style(e,t,l+c),n=n||[]}return n&&(l=+l||+u||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}var le={};function fe(e){var t,n=e.ownerDocument,r=e.nodeName,i=le[r];return i||(t=n.body.appendChild(n.createElement(r)),i=C.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),le[r]=i,i)}function pe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ue(r)&&(i[o]=fe(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}C.fn.extend({show:function(){return pe(this,!0)},hide:function(){return pe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ue(this)?C(this).show():C(this).hide()}))}});var he,de,ge=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;he=x.createDocumentFragment().appendChild(x.createElement("div")),(de=x.createElement("input")).setAttribute("type","radio"),de.setAttribute("checked","checked"),de.setAttribute("name","t"),he.appendChild(de),v.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",v.option=!!he.lastChild;var me={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function xe(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?C.merge([e],n):n}function be(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td,v.option||(me.optgroup=me.option=[1,"<select multiple='multiple'>","</select>"]);var we=/<|&#?\w+;/;function Te(e,t,n,r,i){for(var o,a,s,u,c,l,f=t.createDocumentFragment(),p=[],h=0,d=e.length;h<d;h++)if((o=e[h])||0===o)if("object"===T(o))C.merge(p,o.nodeType?[o]:o);else if(we.test(o)){for(a=a||f.appendChild(t.createElement("div")),s=(ve.exec(o)||["",""])[1].toLowerCase(),u=me[s]||me._default,a.innerHTML=u[1]+C.htmlPrefilter(o)+u[2],l=u[0];l--;)a=a.lastChild;C.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));for(f.textContent="",h=0;o=p[h++];)if(r&&C.inArray(o,r)>-1)i&&i.push(o);else if(c=ae(o),a=xe(f.appendChild(o),"script"),c&&be(a),n)for(l=0;o=a[l++];)ye.test(o.type||"")&&n.push(o);return f}var Ce=/^key/,Se=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function _e(){return!0}function ke(){return!1}function je(e,t){return e===function(){try{return x.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ae(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=ke;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return C().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=C.guid++)),e.each((function(){C.event.add(this,t,i,r,n)}))}function Ne(e,t,n){n?(J.set(e,t,!1),C.event.add(e,t,{namespace:!1,handler:function(e){var r,i,o=J.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(C.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),J.set(this,t,o),r=n(this,t),this[t](),o!==(i=J.get(this,t))||r?J.set(this,t,!1):i={},o!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else o.length&&(J.set(this,t,{value:C.event.trigger(C.extend(o[0],C.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&C.event.add(e,t,_e)}C.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,c,l,f,p,h,d,g,v=J.get(e);if(Q(e))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&C.find.matchesSelector(oe,i),n.guid||(n.guid=C.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(t){return void 0!==C&&C.event.triggered!==t.type?C.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(H)||[""]).length;c--;)h=g=(s=Ee.exec(t[c])||[])[1],d=(s[2]||"").split(".").sort(),h&&(f=C.event.special[h]||{},h=(i?f.delegateType:f.bindType)||h,f=C.event.special[h]||{},l=C.extend({type:h,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&C.expr.match.needsContext.test(i),namespace:d.join(".")},o),(p=u[h])||((p=u[h]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,d,a)||e.addEventListener&&e.addEventListener(h,a)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,l):p.push(l),C.event.global[h]=!0)},remove:function(e,t,n,r,i){var o,a,s,u,c,l,f,p,h,d,g,v=J.hasData(e)&&J.get(e);if(v&&(u=v.events)){for(c=(t=(t||"").match(H)||[""]).length;c--;)if(h=g=(s=Ee.exec(t[c])||[])[1],d=(s[2]||"").split(".").sort(),h){for(f=C.event.special[h]||{},p=u[h=(r?f.delegateType:f.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)l=p[o],!i&&g!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(p.splice(o,1),l.selector&&p.delegateCount--,f.remove&&f.remove.call(e,l));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,d,v.handle)||C.removeEvent(e,h,v.handle),delete u[h])}else for(h in u)C.event.remove(e,h+t[c],n,r,!0);C.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=C.event.fix(e),c=(J.get(this,"events")||Object.create(null))[u.type]||[],l=C.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,u)){for(a=C.event.handlers.call(this,u,c),t=0;(i=a[t++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((C.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?C(i,this).index(c)>-1:C.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&s.push({elem:c,handlers:o})}return c=this,u<t.length&&s.push({elem:c,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(C.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ge.test(t.type)&&t.click&&A(t,"input")&&Ne(t,"click",_e),!1},trigger:function(e){var t=this||e;return ge.test(t.type)&&t.click&&A(t,"input")&&Ne(t,"click"),!0},_default:function(e){var t=e.target;return ge.test(t.type)&&t.click&&A(t,"input")&&J.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?_e:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=_e,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=_e,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=_e,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ce.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Se.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},(function(e,t){C.event.special[e]={setup:function(){return Ne(this,e,je),!1},trigger:function(){return Ne(this,e),!0},delegateType:t}})),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){C.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||C.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),C.fn.extend({on:function(e,t,n,r){return Ae(this,e,t,n,r)},one:function(e,t,n,r){return Ae(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,C(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each((function(){C.event.remove(this,e,n,t)}))}});var De=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function qe(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function Oe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(J.hasData(e)&&(s=J.get(e).events))for(i in J.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)C.event.add(t,i,s[i][n]);K.hasData(e)&&(o=K.access(e),a=C.extend({},o),K.set(t,a))}}function Me(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ge.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Fe(e,t,n,r){t=u(t);var i,o,a,s,c,l,f=0,p=e.length,h=p-1,d=t[0],g=y(d);if(g||p>1&&"string"==typeof d&&!v.checkClone&&Le.test(d))return e.each((function(i){var o=e.eq(i);g&&(t[0]=d.call(this,i,o.html())),Fe(o,t,n,r)}));if(p&&(o=(i=Te(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=C.map(xe(i,"script"),Oe)).length;f<p;f++)c=i,f!==h&&(c=C.clone(c,!0,!0),s&&C.merge(a,xe(c,"script"))),n.call(e[f],c,f);if(s)for(l=a[a.length-1].ownerDocument,C.map(a,Re),f=0;f<s;f++)c=a[f],ye.test(c.type||"")&&!J.access(c,"globalEval")&&C.contains(l,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?C._evalUrl&&!c.noModule&&C._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},l):w(c.textContent.replace(Pe,""),c,l))}return e}function Ie(e,t,n){for(var r,i=t?C.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||C.cleanData(xe(r)),r.parentNode&&(n&&ae(r)&&be(xe(r,"script")),r.parentNode.removeChild(r));return e}C.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=ae(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(a=xe(s),r=0,i=(o=xe(e)).length;r<i;r++)Me(o[r],a[r]);if(t)if(n)for(o=o||xe(e),a=a||xe(s),r=0,i=o.length;r<i;r++)He(o[r],a[r]);else He(e,s);return(a=xe(s,"script")).length>0&&be(a,!u&&xe(e,"script")),s},cleanData:function(e){for(var t,n,r,i=C.event.special,o=0;void 0!==(n=e[o]);o++)if(Q(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?C.event.remove(n,r):C.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),C.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return z(this,(function(e){return void 0===e?C.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Fe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||qe(this,e).appendChild(e)}))},prepend:function(){return Fe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=qe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(xe(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return C.clone(this,e,t)}))},html:function(e){return z(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!De.test(e)&&!me[(ve.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(xe(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,(function(t){var n=this.parentNode;C.inArray(this,e)<0&&(C.cleanData(xe(this)),n&&n.replaceChild(t,this))}),e)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){C.fn[e]=function(e){for(var n,r=[],i=C(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),C(i[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var $e=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Be=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},ze=new RegExp(ie.join("|"),"i");function Ue(e,t,n){var r,i,o,a,s=e.style;return(n=n||We(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||ae(e)||(a=C.style(e,t)),!v.pixelBoxStyles()&&$e.test(a)&&ze.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function Ve(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(c).appendChild(l);var e=n.getComputedStyle(l);r="1%"!==e.top,u=12===t(e.marginLeft),l.style.right="60%",a=36===t(e.right),i=36===t(e.width),l.style.position="absolute",o=12===t(l.offsetWidth/3),oe.removeChild(c),l=null}}function t(e){return Math.round(parseFloat(e))}var r,i,o,a,s,u,c=x.createElement("div"),l=x.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===l.style.backgroundClip,C.extend(v,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,r,i;return null==s&&(e=x.createElement("table"),t=x.createElement("tr"),r=x.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",r.style.height="9px",oe.appendChild(e).appendChild(t).appendChild(r),i=n.getComputedStyle(t),s=parseInt(i.height)>3,oe.removeChild(e)),s}}))}();var Xe=["Webkit","Moz","ms"],Ge=x.createElement("div").style,Qe={};function Ye(e){var t=C.cssProps[e]||Qe[e];return t||(e in Ge?e:Qe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Xe.length;n--;)if((e=Xe[n]+t)in Ge)return e}(e)||e)}var Je=/^(none|table(?!-c[ea]).+)/,Ke=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var r=re.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function nt(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=C.css(e,n+ie[a],!0,i)),r?("content"===n&&(u-=C.css(e,"padding"+ie[a],!0,i)),"margin"!==n&&(u-=C.css(e,"border"+ie[a]+"Width",!0,i))):(u+=C.css(e,"padding"+ie[a],!0,i),"padding"!==n?u+=C.css(e,"border"+ie[a]+"Width",!0,i):s+=C.css(e,"border"+ie[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function rt(e,t,n){var r=We(e),i=(!v.boxSizingReliable()||n)&&"border-box"===C.css(e,"boxSizing",!1,r),o=i,a=Ue(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if($e.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&i||!v.reliableTrDimensions()&&A(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===C.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===C.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+nt(e,t,n||(i?"border":"content"),o,r,a)+"px"}function it(e,t,n,r,i){return new it.prototype.init(e,t,n,r,i)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ue(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=G(t),u=Ke.test(t),c=e.style;if(u||(t=Ye(s)),a=C.cssHooks[t]||C.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:c[t];"string"===(o=typeof n)&&(i=re.exec(n))&&i[1]&&(n=ce(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(C.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var i,o,a,s=G(t);return Ke.test(t)||(t=Ye(s)),(a=C.cssHooks[t]||C.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Ue(e,t,r)),"normal"===i&&t in et&&(i=et[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),C.each(["height","width"],(function(e,t){C.cssHooks[t]={get:function(e,n,r){if(n)return!Je.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?rt(e,t,r):Be(e,Ze,(function(){return rt(e,t,r)}))},set:function(e,n,r){var i,o=We(e),a=!v.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===C.css(e,"boxSizing",!1,o),u=r?nt(e,t,r,s,o):0;return s&&a&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-nt(e,t,"border",!1,o)-.5)),u&&(i=re.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=C.css(e,t)),tt(0,n,u)}}})),C.cssHooks.marginLeft=Ve(v.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ue(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),C.each({margin:"",padding:"",border:"Width"},(function(e,t){C.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+ie[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(C.cssHooks[e+t].set=tt)})),C.fn.extend({css:function(e,t){return z(this,(function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=We(e),i=t.length;a<i;a++)o[t[a]]=C.css(e,t[a],!1,r);return o}return void 0!==n?C.style(e,t,n):C.css(e,t)}),e,t,arguments.length>1)}}),C.Tween=it,it.prototype={constructor:it,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(C.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||!C.cssHooks[e.prop]&&null==e.elem.style[Ye(e.prop)]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=it.prototype.init,C.fx.step={};var ot,at,st=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function ct(){at&&(!1===x.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ct):n.setTimeout(ct,C.fx.interval),C.fx.tick())}function lt(){return n.setTimeout((function(){ot=void 0})),ot=Date.now()}function ft(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=ie[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function pt(e,t,n){for(var r,i=(ht.tweeners[t]||[]).concat(ht.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function ht(e,t,n){var r,i,o=0,a=ht.prefilters.length,s=C.Deferred().always((function(){delete u.elem})),u=function(){if(i)return!1;for(var t=ot||lt(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:C.extend({},t),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=C.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),l=c.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=G(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=C.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(l,c.opts.specialEasing);o<a;o++)if(r=ht.prefilters[o].call(c,e,l,c.opts))return y(r.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return C.map(l,pt,c),y(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(ht,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(H);for(var n,r=0,i=e.length;r<i;r++)n=e[r],ht.tweeners[n]=ht.tweeners[n]||[],ht.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,c,l,f="width"in t||"height"in t,p=this,h={},d=e.style,g=e.nodeType&&ue(e),v=J.get(e,"fxshow");for(r in n.queue||(null==(a=C._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always((function(){p.always((function(){a.unqueued--,C.queue(e,"fx").length||a.empty.fire()}))}))),t)if(i=t[r],st.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}h[r]=v&&v[r]||C.style(e,r)}if((u=!C.isEmptyObject(t))||!C.isEmptyObject(h))for(r in f&&1===e.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(c=v&&v.display)&&(c=J.get(e,"display")),"none"===(l=C.css(e,"display"))&&(c?l=c:(pe([e],!0),c=e.style.display||c,l=C.css(e,"display"),pe([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===C.css(e,"float")&&(u||(p.done((function(){d.display=c})),null==c&&(l=d.display,c="none"===l?"":l)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",p.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),u=!1,h)u||(v?"hidden"in v&&(g=v.hidden):v=J.access(e,"fxshow",{display:c}),o&&(v.hidden=!g),g&&pe([e],!0),p.done((function(){for(r in g||pe([e]),J.remove(e,"fxshow"),h)C.style(e,r,h[r])}))),u=pt(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?ht.prefilters.unshift(e):ht.prefilters.push(e)}}),C.speed=function(e,t,n){var r=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return C.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in C.fx.speeds?r.duration=C.fx.speeds[r.duration]:r.duration=C.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&C.dequeue(this,r.queue)},r},C.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ue).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=C.isEmptyObject(e),o=C.speed(t,n,r),a=function(){var t=ht(this,C.extend({},e),o);(i||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",o=C.timers,a=J.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ut.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||C.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=C.timers,a=r?r.length:0;for(n.finish=!0,C.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),C.each(["toggle","show","hide"],(function(e,t){var n=C.fn[t];C.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ft(t,!0),e,r,i)}})),C.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){C.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),ot=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){at||(at=!0,ct())},C.fx.stop=function(){at=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(e,t){return e=C.fx&&C.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}}))},function(){var e=x.createElement("input"),t=x.createElement("select").appendChild(x.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=x.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var dt,gt=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return z(this,C.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){C.removeAttr(this,e)}))}}),C.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?C.prop(e,t,n):(1===o&&C.isXMLDoc(e)||(i=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=C.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(H);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=gt[t]||C.find.attr;gt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=gt[a],gt[a]=i,i=null!=n(e,t,r)?a:null,gt[a]=o),i}}));var vt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function mt(e){return(e.match(H)||[]).join(" ")}function xt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(H)||[]}C.fn.extend({prop:function(e,t){return z(this,C.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[C.propFix[e]||e]}))}}),C.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&C.isXMLDoc(e)||(t=C.propFix[t]||t,i=C.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){C.propFix[this.toLowerCase()]=this})),C.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(y(e))return this.each((function(t){C(this).addClass(e.call(this,t,xt(this)))}));if((t=bt(e)).length)for(;n=this[u++];)if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(y(e))return this.each((function(t){C(this).removeClass(e.call(this,t,xt(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[u++];)if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):y(e)?this.each((function(n){C(this).toggleClass(e.call(this,n,xt(this),t),t)})):this.each((function(){var t,i,o,a;if(r)for(i=0,o=C(this),a=bt(e);t=a[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=xt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+mt(xt(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;C.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=y(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,C(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=C.map(i,(function(e){return null==e?"":e+""}))),(t=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=C.valHooks[i.type]||C.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(wt,""):null==n?"":n:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:mt(C.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=C(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=C.makeArray(t),a=i.length;a--;)((r=i[a]).selected=C.inArray(C.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),C.each(["radio","checkbox"],(function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=C.inArray(C(e).val(),t)>-1}},v.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),v.focusin="onfocusin"in n;var Tt=/^(?:focusinfocus|focusoutblur)$/,Ct=function(e){e.stopPropagation()};C.extend(C.event,{trigger:function(e,t,r,i){var o,a,s,u,c,l,f,p,d=[r||x],g=h.call(e,"type")?e.type:e,v=h.call(e,"namespace")?e.namespace.split("."):[];if(a=p=s=r=r||x,3!==r.nodeType&&8!==r.nodeType&&!Tt.test(g+C.event.triggered)&&(g.indexOf(".")>-1&&(v=g.split("."),g=v.shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[C.expando]?e:new C.Event(g,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:C.makeArray(t,[e]),f=C.event.special[g]||{},i||!f.trigger||!1!==f.trigger.apply(r,t))){if(!i&&!f.noBubble&&!m(r)){for(u=f.delegateType||g,Tt.test(u+g)||(a=a.parentNode);a;a=a.parentNode)d.push(a),s=a;s===(r.ownerDocument||x)&&d.push(s.defaultView||s.parentWindow||n)}for(o=0;(a=d[o++])&&!e.isPropagationStopped();)p=a,e.type=o>1?u:f.bindType||g,(l=(J.get(a,"events")||Object.create(null))[e.type]&&J.get(a,"handle"))&&l.apply(a,t),(l=c&&a[c])&&l.apply&&Q(a)&&(e.result=l.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,i||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(d.pop(),t)||!Q(r)||c&&y(r[g])&&!m(r)&&((s=r[c])&&(r[c]=null),C.event.triggered=g,e.isPropagationStopped()&&p.addEventListener(g,Ct),r[g](),e.isPropagationStopped()&&p.removeEventListener(g,Ct),C.event.triggered=void 0,s&&(r[c]=s)),e.result}},simulate:function(e,t,n){var r=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(r,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each((function(){C.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),v.focusin||C.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){C.event.simulate(t,e.target,C.event.fix(e))};C.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}}));var St=n.location,Et={guid:Date.now()},_t=/\?/;C.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+e),t};var kt=/\[\]$/,jt=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,n,r){var i;if(Array.isArray(t))C.each(t,(function(t,i){n||kt.test(e)?r(e,i):Dt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==T(t))r(e,t);else for(i in t)Dt(e+"["+i+"]",t[i],n,r)}C.param=function(e,t){var n,r=[],i=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,(function(){i(this.name,this.value)}));else for(n in e)Dt(n,e[n],t,i);return r.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&Nt.test(this.nodeName)&&!At.test(e)&&(this.checked||!ge.test(e))})).map((function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,(function(e){return{name:t.name,value:e.replace(jt,"\r\n")}})):{name:t.name,value:n.replace(jt,"\r\n")}})).get()}});var Lt=/%20/g,Pt=/#.*$/,qt=/([?&])_=[^&]*/,Ot=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:GET|HEAD)$/,Ht=/^\/\//,Mt={},Ft={},It="*/".concat("*"),$t=x.createElement("a");function Wt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(H)||[];if(y(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Bt(e,t,n,r){var i={},o=e===Ft;function a(s){var u;return i[s]=!0,C.each(e[s]||[],(function(e,s){var c=s(t,n,r);return"string"!=typeof c||o||i[c]?o?!(u=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function zt(e,t){var n,r,i=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&C.extend(!0,e,r),e}$t.href=St.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":It,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,C.ajaxSettings),t):zt(C.ajaxSettings,e)},ajaxPrefilter:Wt(Mt),ajaxTransport:Wt(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,a,s,u,c,l,f,p,h=C.ajaxSetup({},t),d=h.context||h,g=h.context&&(d.nodeType||d.jquery)?C(d):C.event,v=C.Deferred(),y=C.Callbacks("once memory"),m=h.statusCode||{},b={},w={},T="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Ot.exec(o);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)S.always(e[S.status]);else for(t in e)m[t]=[m[t],e[t]];return this},abort:function(e){var t=e||T;return r&&r.abort(t),E(0,t),this}};if(v.promise(S),h.url=((e||h.url||St.href)+"").replace(Ht,St.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(H)||[""],null==h.crossDomain){u=x.createElement("a");try{u.href=h.url,u.href=u.href,h.crossDomain=$t.protocol+"//"+$t.host!=u.protocol+"//"+u.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=C.param(h.data,h.traditional)),Bt(Mt,h,t,S),c)return S;for(f in(l=C.event&&h.global)&&0==C.active++&&C.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Rt.test(h.type),i=h.url.replace(Pt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Lt,"+")):(p=h.url.slice(i.length),h.data&&(h.processData||"string"==typeof h.data)&&(i+=(_t.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(qt,"$1"),p=(_t.test(i)?"&":"?")+"_="+Et.guid+++p),h.url=i+p),h.ifModified&&(C.lastModified[i]&&S.setRequestHeader("If-Modified-Since",C.lastModified[i]),C.etag[i]&&S.setRequestHeader("If-None-Match",C.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&S.setRequestHeader("Content-Type",h.contentType),S.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+It+"; q=0.01":""):h.accepts["*"]),h.headers)S.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(d,S,h)||c))return S.abort();if(T="abort",y.add(h.complete),S.done(h.success),S.fail(h.error),r=Bt(Ft,h,t,S)){if(S.readyState=1,l&&g.trigger("ajaxSend",[S,h]),c)return S;h.async&&h.timeout>0&&(s=n.setTimeout((function(){S.abort("timeout")}),h.timeout));try{c=!1,r.send(b,E)}catch(e){if(c)throw e;E(-1,e)}}else E(-1,"No Transport");function E(e,t,a,u){var f,p,x,b,w,T=t;c||(c=!0,s&&n.clearTimeout(s),r=void 0,o=u||"",S.readyState=e>0?4:0,f=e>=200&&e<300||304===e,a&&(b=function(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(h,S,a)),!f&&C.inArray("script",h.dataTypes)>-1&&(h.converters["text script"]=function(){}),b=function(e,t,n,r){var i,o,a,s,u,c={},l=e.dataTypes.slice();if(l[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=c[u+" "+o]||c["* "+o]))for(i in c)if((s=i.split(" "))[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[i]:!0!==c[i]&&(o=s[0],l.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(h,b,S,f),f?(h.ifModified&&((w=S.getResponseHeader("Last-Modified"))&&(C.lastModified[i]=w),(w=S.getResponseHeader("etag"))&&(C.etag[i]=w)),204===e||"HEAD"===h.type?T="nocontent":304===e?T="notmodified":(T=b.state,p=b.data,f=!(x=b.error))):(x=T,!e&&T||(T="error",e<0&&(e=0))),S.status=e,S.statusText=(t||T)+"",f?v.resolveWith(d,[p,T,S]):v.rejectWith(d,[S,T,x]),S.statusCode(m),m=void 0,l&&g.trigger(f?"ajaxSuccess":"ajaxError",[S,h,f?p:x]),y.fireWith(d,[S,T]),l&&(g.trigger("ajaxComplete",[S,h]),--C.active||C.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],(function(e,t){C[t]=function(e,n,r,i){return y(n)&&(i=i||r,r=n,n=void 0),C.ajax(C.extend({url:e,type:t,dataType:i,data:n,success:r},C.isPlainObject(e)&&e))}})),C.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),C._evalUrl=function(e,t,n){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){C.globalEval(e,t,n)}})},C.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){C(this).wrapInner(e.call(this,t))})):this.each((function(){var t=C(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){C(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){C(this).replaceWith(this.childNodes)})),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Vt=C.ajaxSettings.xhr();v.cors=!!Vt&&"withCredentials"in Vt,v.ajax=Vt=!!Vt,C.ajaxTransport((function(e){var t,r;if(v.cors||Vt&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ut[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&r()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),C.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),C.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=C("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),x.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Xt,Gt=[],Qt=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||C.expando+"_"+Et.guid++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",(function(e,t,r){var i,o,a,s=!1!==e.jsonp&&(Qt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Qt,"$1"+i):!1!==e.jsonp&&(e.url+=(_t.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||C.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always((function(){void 0===o?C(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(i)),a&&y(o)&&o(a[0]),a=o=void 0})),"script"})),v.createHTMLDocument=((Xt=x.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xt.childNodes.length),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=x.implementation.createHTMLDocument("")).createElement("base")).href=x.location.href,t.head.appendChild(r)):t=x),o=!n&&[],(i=N.exec(e))?[t.createElement(i[1])]:(i=Te([e],t,o),o&&o.length&&C(o).remove(),C.merge([],i.childNodes)));var r,i,o},C.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=mt(e.slice(s)),e=e.slice(0,s)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&C.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){o=arguments,a.html(r?C("<div>").append(C.parseHTML(e)).find(r):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},C.expr.pseudos.animated=function(e){return C.grep(C.timers,(function(t){return e===t.elem})).length},C.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,c=C.css(e,"position"),l=C(e),f={};"static"===c&&(e.style.position="relative"),s=l.offset(),o=C.css(e,"top"),u=C.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(a=(r=l.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),y(t)&&(t=t.call(e,n,C.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):("number"==typeof f.top&&(f.top+="px"),"number"==typeof f.left&&(f.left+="px"),l.css(f))}},C.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){C.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===C.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),i.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-C.css(r,"marginTop",!0),left:t.left-i.left-C.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||oe}))}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;C.fn[e]=function(r){return z(this,(function(e,r,i){var o;if(m(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i}),e,r,arguments.length)}})),C.each(["top","left"],(function(e,t){C.cssHooks[t]=Ve(v.pixelPosition,(function(e,n){if(n)return n=Ue(e,t),$e.test(n)?C(e).position()[t]+"px":n}))})),C.each({Height:"height",Width:"width"},(function(e,t){C.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){C.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return z(this,(function(t,n,i){var o;return m(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?C.css(t,n,s):C.style(t,n,i,s)}),t,a?i:void 0,a)}}))})),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){C.fn[t]=function(e){return this.on(t,e)}})),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){C.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Yt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;C.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||C.guid++,i},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=A,C.isFunction=y,C.isWindow=m,C.camelCase=G,C.type=T,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},C.trim=function(e){return null==e?"":(e+"").replace(Yt,"")},void 0===(r=function(){return C}.apply(t,[]))||(e.exports=r);var Jt=n.jQuery,Kt=n.$;return C.noConflict=function(e){return n.$===C&&(n.$=Kt),e&&n.jQuery===C&&(n.jQuery=Jt),C},void 0===i&&(n.jQuery=n.$=C),C}))},function(e,t,n){"use strict";n.r(t);var r=n(0);function i(e){e.swap("<h1>HOME PAGE</h1>",(function(){}))}var o=n.n(r)()("#main");o.get("#/",i),o.get("#/home",i),o.get("/",i),o.run("#/")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NhbW15L2xpYi9zYW1teS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8uL3NyYy9jb250cm9sbGVycy9ob21lLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHAudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCIkIiwiU2FtbXkiLCJQQVRIX05BTUVfTUFUQ0hFUiIsIlFVRVJZX1NUUklOR19NQVRDSEVSIiwiX21ha2VBcnJheSIsIm5vbmFycmF5IiwiQXJyYXkiLCJzbGljZSIsIl9pc0Z1bmN0aW9uIiwib2JqIiwidG9TdHJpbmciLCJfaXNBcnJheSIsIl9pc1JlZ0V4cCIsIl9kZWNvZGUiLCJzdHIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlIiwiX2VuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIl9lc2NhcGVIVE1MIiwiU3RyaW5nIiwiX3JvdXRlV3JhcHBlciIsInZlcmIiLCJ0aGlzIiwicm91dGUiLCJhcHBseSIsImNvbmNhdCIsImFyZ3VtZW50cyIsIl90ZW1wbGF0ZV9jYWNoZSIsIl9oYXNfaGlzdG9yeSIsIndpbmRvdyIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJsb2dnZXJzIiwiYXBwIiwic2VsZWN0b3IiLCJhcmdzIiwiYXBwcyIsImxlbmd0aCIsInNoaWZ0IiwiQXBwbGljYXRpb24iLCJlbGVtZW50X3NlbGVjdG9yIiwiZWFjaCIsInBsdWdpbiIsInVzZSIsIlZFUlNJT04iLCJhZGRMb2dnZXIiLCJsb2dnZXIiLCJwdXNoIiwibG9nIiwidW5zaGlmdCIsIkRhdGUiLCJjb25zb2xlIiwiZXh0ZW5kIiwibWFrZUFycmF5IiwiaXNGdW5jdGlvbiIsImlzQXJyYXkiLCJlc2NhcGVIVE1MIiwiaCIsInRvSGFzaCIsImpzb24iLCJrIiwidiIsInRvSFRNTCIsImRpc3BsYXkiLCJrZXlzIiwiYXR0cmlidXRlc19vbmx5IiwiaGFzIiwidHJpbSIsImpvaW4iLCJkZWxpbWl0ZXIiLCJpbmNsdWRlX2Z1bmN0aW9ucyIsInRhcmdldElzVGhpc1dpbmRvdyIsImV2ZW50IiwidGFnTmFtZSIsInRhcmdldEVsZW1lbnQiLCJ0YXJnZXQiLCJjbG9zZXN0IiwidGFyZ2V0V2luZG93IiwiYXR0ciIsInRvcCIsIkRlZmF1bHRMb2NhdGlvblByb3h5IiwicnVuX2ludGVydmFsX2V2ZXJ5IiwiaXNfbmF0aXZlIiwiaGFzX2hpc3RvcnkiLCJfc3RhcnRQb2xsaW5nIiwiZnVsbFBhdGgiLCJsb2NhdGlvbl9vYmoiLCJtYXRjaGVzIiwibWF0Y2giLCJoYXNoIiwicGF0aG5hbWUiLCJzZWFyY2giLCJwcm94eSIsImxwIiwiZXZlbnROYW1lc3BhY2UiLCJlIiwibm9uX25hdGl2ZSIsImNsZWFySW50ZXJ2YWwiLCJfaW50ZXJ2YWwiLCJ0cmlnZ2VyIiwiZGlzYWJsZV9wdXNoX3N0YXRlIiwiZG9jdW1lbnQiLCJkZWxlZ2F0ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsIm1ldGFLZXkiLCJjdHJsS2V5IiwiYSIsImZ1bGxfcGF0aCIsImhvc3RuYW1lIiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJsb2NhdGlvbiIsImxvb2t1cFJvdXRlIiwicHJldmVudERlZmF1bHQiLCJzZXRMb2NhdGlvbiIsIl9iaW5kaW5ncyIsInVuYmluZCIsInVuZGVsZWdhdGUiLCJnZXRMb2NhdGlvbiIsIm5ld19sb2NhdGlvbiIsInRlc3QiLCJwYXRoIiwidGl0bGUiLCJldmVyeSIsImhhc2hDaGVjayIsImN1cnJlbnRfbG9jYXRpb24iLCJfbGFzdF9sb2NhdGlvbiIsInNldFRpbWVvdXQiLCJzZXRJbnRlcnZhbCIsImFwcF9mdW5jdGlvbiIsInJvdXRlcyIsImxpc3RlbmVycyIsImFyb3VuZHMiLCJiZWZvcmVzIiwibmFtZXNwYWNlIiwiZ2V0VGltZSIsInBhcnNlSW50IiwiTWF0aCIsInJhbmRvbSIsImNvbnRleHRfcHJvdG90eXBlIiwiRXZlbnRDb250ZXh0IiwiX2xvY2F0aW9uX3Byb3h5Iiwic2V0TG9jYXRpb25Qcm94eSIsImRlYnVnIiwiYmluZFRvQWxsRXZlbnRzIiwiZGF0YSIsImNsZWFuZWRfdHlwZSIsIlJPVVRFX1ZFUkJTIiwiQVBQX0VWRU5UUyIsIl9sYXN0X3JvdXRlIiwiX3J1bm5pbmciLCJyYWlzZV9lcnJvcnMiLCJ0ZW1wbGF0ZV9lbmdpbmUiLCIkZWxlbWVudCIsImZpbmQiLCJwbHVnaW5fbmFtZSIsImVycm9yIiwibmV3X3Byb3h5Iiwib3JpZ2luYWxfcHJveHkiLCJpc1J1bm5pbmciLCJhZGRfcm91dGUiLCJwYXRoX21hdGNoIiwicGFyYW1fbmFtZXMiLCJjYWxsYmFjayIsInRvTG93ZXJDYXNlIiwiY29uc3RydWN0b3IiLCJsYXN0SW5kZXgiLCJleGVjIiwiUmVnRXhwIiwiY2IiLCJ3aXRoX3ZlcmIiLCJwb3N0IiwicHV0IiwiZGVsIiwiYW55IiwibWFwUm91dGVzIiwicm91dGVfYXJyYXkiLCJyb3V0ZV9hcmdzIiwibGlzdGVuZXJfY2FsbGJhY2siLCJjb250ZXh0IiwidHlwZSIsIl9saXN0ZW4iLCJyZWZyZXNoIiwibGFzdF9sb2NhdGlvbiIsImJlZm9yZSIsIm9wdGlvbnMiLCJhZnRlciIsImFyb3VuZCIsIm9uQ29tcGxldGUiLCJfb25Db21wbGV0ZSIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiaGVscGVyIiwibWV0aG9kIiwicnVuIiwic3RhcnRfdXJsIiwiY2FsbGJhY2tzIiwiX2NoZWNrTG9jYXRpb24iLCJfY2hlY2tGb3JtU3VibWlzc2lvbiIsInVubG9hZCIsInJlbW92ZUNsYXNzIiwiX3VubGlzdGVuIiwiZGVzdHJveSIsImluQXJyYXkiLCJyb3V0YWJsZVBhdGgiLCJyb3V0ZWQiLCJydW5Sb3V0ZSIsInBhcmFtcyIsIndyYXBwZWRfcm91dGUiLCJjYWxsYmFja19hcmdzIiwicGF0aF9wYXJhbXMiLCJmaW5hbF9yZXR1cm5lZCIsIl9wYXJzZVF1ZXJ5U3RyaW5nIiwicGFyYW0iLCJzcGxhdCIsInJldHVybmVkIiwibmV4dFJvdXRlIiwiY29udGV4dE1hdGNoZXNPcHRpb25zIiwibGFzdF9yb3V0ZSIsInJldmVyc2UiLCJsYXN0X3dyYXBwZWRfcm91dGUiLCJub3RGb3VuZCIsIm1hdGNoX29wdGlvbnMiLCJwb3NpdGl2ZSIsImlzRW1wdHlPYmplY3QiLCJyZXN1bHRzIiwibnVtb3B0Iiwib3B0cyIsImxlbiIsIm1hdGNoZWQiLCJvbmx5IiwiZXhjZXB0IiwicGF0aF9tYXRjaGVkIiwidmVyYl9tYXRjaGVkIiwiaW5kZXhPZiIsInN3YXAiLCJjb250ZW50IiwiJGVsIiwiaHRtbCIsInRlbXBsYXRlQ2FjaGUiLCJjbGVhclRlbXBsYXRlQ2FjaGUiLCJyZXQiLCJtZXNzYWdlIiwib3JpZ2luYWxfZXJyb3IiLCJFcnJvciIsIl9nZXRGb3JtVmVyYiIsImZvcm0iLCIkX21ldGhvZCIsIiRmb3JtIiwidmFsIiwiZ2V0QXR0cmlidXRlIiwiX3NlcmlhbGl6ZUZvcm1QYXJhbXMiLCJfcGFyc2VGb3JtUGFyYW1zIiwicXVlcnlTdHJpbmciLCJmaWVsZHMiLCJzZXJpYWxpemVBcnJheSIsIl9lbmNvZGVGb3JtUGFpciIsImZvcm1fZmllbGRzIiwiX3BhcnNlUGFyYW1QYWlyIiwicGFydHMiLCJwYWlycyIsInBhaXIiLCJzcGxpdCIsIlJlbmRlckNvbnRleHQiLCJldmVudF9jb250ZXh0IiwicHJldmlvdXNfY29udGVudCIsIm5leHRfZW5naW5lIiwid2FpdGluZyIsInRoZW4iLCJ3YWl0IiwibmV4dCIsImxvYWQiLCJzaG91bGRfY2FjaGUiLCJjYWNoZWQiLCJpc19qc29uIiwiY2FjaGUiLCJlbmdpbmVGb3IiLCJlbmdpbmUiLCJhamF4IiwidXJsIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwibm9kZVR5cGUiLCJpbm5lckhUTUwiLCJjbG9uZSIsInJlbW92ZSIsImxvYWRQYXJ0aWFscyIsInBhcnRpYWxzIiwidGVtcGxhdGUiLCJyZW5kZXIiLCJpbnRlcnBvbGF0ZSIsInBhcnRpYWwiLCJzZW5kIiwiZnVuIiwicmVzcG9uc2UiLCJjb2xsZWN0IiwiYXJyYXkiLCJub3ciLCJjb2xsIiwiY29udGVudHMiLCJkb21zIiwiaXRlbSIsImpxdWVyeSIsInJlbmRlckVhY2giLCJyY3R4IiwiaWRhdGEiLCJyZXRhaW4iLCJwcmV2IiwicmVuZGVyZWQiLCJhcHBlbmRUbyIsImFwcGVuZCIsInByZXBlbmRUbyIsInByZXBlbmQiLCJlbmdpbmVfbWF0Y2giLCJyZWRpcmVjdCIsInRvIiwicGF0aHMiLCJoYXNfcGFyYW1zIiwic3RyaW5nIiwicGFyc2VKU09OIiwiZ2xvYmFsIiwiZmFjdG9yeSIsInciLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJmbGF0IiwiY2xhc3MydHlwZSIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJub2RlIiwiZG9jIiwic2NyaXB0IiwidGV4dCIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsImpRdWVyeSIsImZuIiwiaW5pdCIsImlzQXJyYXlMaWtlIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwibWFwIiwiZWxlbSIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZXZlbiIsImdyZXAiLCJfZWxlbSIsIm9kZCIsImoiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiY29weSIsImNvcHlJc0FycmF5IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJwcm90byIsIkN0b3IiLCJnbG9iYWxFdmFsIiwic2Vjb25kIiwiaW52ZXJ0IiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJndWlkIiwiaXRlcmF0b3IiLCJfaSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwibm9ubmF0aXZlU2VsZWN0b3JDYWNoZSIsInNvcnRPcmRlciIsImIiLCJwb3AiLCJwdXNoTmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwicnRyaW0iLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyZGVzY2VuZCIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsInJodG1sIiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlIiwibm9uSGV4IiwiaGlnaCIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiYWRkQ29tYmluYXRvciIsImRpc2FibGVkIiwibm9kZU5hbWUiLCJkaXIiLCJjaGlsZE5vZGVzIiwiZWxzIiwic2VlZCIsIm5pZCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsInRtcCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJleHByIiwiZWxlbWVudHMiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImxhbmciLCJlbGVtTGFuZyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsInRhYkluZGV4IiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsIl9tYXRjaEluZGV4ZXMiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsIl9uYW1lIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJub3QiLCJzZWxmIiwicm9vdGpRdWVyeSIsInJvb3QiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsInNpYmxpbmciLCJ0YXJnZXRzIiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50Iiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwicHJvbWlzZSIsImZhaWwiLCJDYWxsYmFja3MiLCJfIiwiZmxhZyIsImNyZWF0ZU9wdGlvbnMiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwiZW1wdHkiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIndhcm4iLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXRjaCIsInJlYWR5V2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsIl9rZXkiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJjb25maWd1cmFibGUiLCJzZXQiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5IiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImhpZGUiLCJ0b2dnbGUiLCJkaXYiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwib3B0aW9uIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwib3B0Z3JvdXAiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsImV4cGVjdFN5bmMiLCJlcnIiLCJzYWZlQWN0aXZlRWxlbWVudCIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJvZmYiLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJidXR0b24iLCJhZGRQcm9wIiwiaG9vayIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJmb2N1cyIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImluc2VydEJlZm9yZSIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybnVtbm9ucHgiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwib2xkIiwicmJveFN0eWxlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJwb3NpdGlvbiIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zIiwidGFibGUiLCJ0ckNoaWxkIiwidHJTdHlsZSIsImhlaWdodCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImZpbmFsIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwcm9wSG9va3MiLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJib29sIiwiYXR0ck5hbWVzIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwidmFsdWVPckZ1bmN0aW9uIiwic2VyaWFsaXplIiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImhvbGRSZWFkeSIsImhvbGQiLCJpc051bWVyaWMiLCJpc05hTiIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJob21lIiwiaGJzIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxHLGtCQ2xGckQsVUFTSSxFQUFPLENBQUMsV0FBa0IsMEJBQVAsRUFLcEIsU0FBU0MsR0FFVixJQUFJQyxFQUVBQyxFQUFvQixjQUNwQkMsRUFBdUIsY0FFdkJDLEVBQWEsU0FBU0MsR0FBWSxPQUFPQyxNQUFNVixVQUFVVyxNQUFNcEMsS0FBS2tDLElBRXBFRyxFQUFjLFNBQVVDLEdBQVEsTUFBK0Msc0JBQXhDL0IsT0FBT2tCLFVBQVVjLFNBQVN2QyxLQUFLc0MsSUFDdEVFLEVBQVcsU0FBVUYsR0FBUSxNQUErQyxtQkFBeEMvQixPQUFPa0IsVUFBVWMsU0FBU3ZDLEtBQUtzQyxJQUNuRUcsRUFBWSxTQUFVSCxHQUFRLE1BQStDLG9CQUF4Qy9CLE9BQU9rQixVQUFVYyxTQUFTdkMsS0FBS3NDLElBQ3BFSSxFQUFVLFNBQVVDLEdBQVEsT0FBT0Msb0JBQW9CRCxHQUFPLElBQUlFLFFBQVEsTUFBTyxPQUNqRkMsRUFBVUMsbUJBQ1ZDLEVBQWMsU0FBU3BCLEdBQ3JCLE9BQU9xQixPQUFPckIsR0FBR2lCLFFBQVEsYUFBYyxTQUFTQSxRQUFRLEtBQU0sUUFBUUEsUUFBUSxLQUFNLFFBQVFBLFFBQVEsS0FBTSxXQUU1R0ssRUFBZ0IsU0FBU0MsR0FDdkIsT0FBTyxXQUNMLE9BQU9DLEtBQUtDLE1BQU1DLE1BQU1GLEtBQU0sQ0FBQ0QsR0FBTUksT0FBT3BCLE1BQU1WLFVBQVVXLE1BQU1wQyxLQUFLd0QsZUFHM0VDLEVBQWtCLEdBQ2xCQyxLQUFrQkMsT0FBT0MsVUFBV0EsUUFBUUMsV0FDNUNDLEVBQVUsR0Fva0VkLE9BemlFQWhDLEVBQVEsV0FDTixJQUNJaUMsRUFBS0MsRUFETEMsRUFBT2hDLEVBQVd1QixXQUd0QixPQURBMUIsRUFBTW9DLEtBQU9wQyxFQUFNb0MsTUFBUSxHQUNQLElBQWhCRCxFQUFLRSxRQUFnQkYsRUFBSyxJQUFNNUIsRUFBWTRCLEVBQUssSUFDNUNuQyxFQUFNd0IsTUFBTXhCLEVBQU8sQ0FBQyxRQUFReUIsT0FBT1UsSUFDRyxpQkFBNUJELEVBQVdDLEVBQUtHLFdBQ2pDTCxFQUFNakMsRUFBTW9DLEtBQUtGLElBQWEsSUFBSWxDLEVBQU11QyxhQUNwQ0MsaUJBQW1CTixFQUNuQkMsRUFBS0UsT0FBUyxHQUNoQnRDLEVBQUUwQyxLQUFLTixHQUFNLFNBQVNwRSxFQUFHMkUsR0FDdkJULEVBQUlVLElBQUlELE1BSVJULEVBQUlPLGtCQUFvQk4sVUFDbkJsQyxFQUFNb0MsS0FBS0YsR0FFcEJsQyxFQUFNb0MsS0FBS0gsRUFBSU8sa0JBQW9CUCxFQUM1QkEsUUFiRixJQWlCSFcsUUFBVSxRQUtoQjVDLEVBQU02QyxVQUFZLFNBQVNDLEdBQ3pCZCxFQUFRZSxLQUFLRCxJQU1mOUMsRUFBTWdELElBQU0sV0FDVixJQUFJYixFQUFPaEMsRUFBV3VCLFdBQ3RCUyxFQUFLYyxRQUFRLElBQU1DLE9BQVMsS0FDNUJuRCxFQUFFMEMsS0FBS1QsR0FBUyxTQUFTakUsRUFBRytFLEdBQzFCQSxFQUFPdEIsTUFBTXhCLEVBQU9tQyxZQUlLLElBQWxCTixPQUFPc0IsUUFDa0IsbUJBQXZCdEIsT0FBT3NCLFFBQVFILEtBQXNCekMsRUFBWXNCLE9BQU9zQixRQUFRSCxJQUFJeEIsT0FDN0V4QixFQUFNNkMsV0FBVSxXQUNkaEIsT0FBT3NCLFFBQVFILElBQUl4QixNQUFNSyxPQUFPc0IsUUFBU3pCLGNBRzNDMUIsRUFBTTZDLFdBQVUsV0FDZGhCLE9BQU9zQixRQUFRSCxJQUFJdEIsY0FHSSxvQkFBWHlCLFNBQ2hCbkQsRUFBTTZDLFdBQVUsV0FDZE0sUUFBUUgsSUFBSXhCLE1BQU0yQixRQUFTekIsY0FJL0IzQixFQUFFcUQsT0FBT3BELEVBQU8sQ0FDZHFELFVBQVdsRCxFQUNYbUQsV0FBWS9DLEVBQ1pnRCxRQUFTN0MsSUFLWFYsRUFBTXZCLE9BQVMsU0FBUytCLEdBQ3RCLE9BQU9ULEVBQUVxRCxPQUFPOUIsS0FBTWQsR0FBTyxLQUcvQlQsRUFBRXFELE9BQU9wRCxFQUFNdkIsT0FBT2tCLFVBQVcsQ0FJL0I2RCxXQUFZdEMsRUFDWnVDLEVBQUd2QyxFQUdId0MsT0FBUSxXQUNOLElBQUlDLEVBQU8sR0FNWCxPQUxBNUQsRUFBRTBDLEtBQUtuQixNQUFNLFNBQVNzQyxFQUFFQyxHQUNqQnRELEVBQVlzRCxLQUNmRixFQUFLQyxHQUFLQyxNQUdQRixHQVdURyxPQUFRLFdBQ04sSUFBSUMsRUFBVSxHQU1kLE9BTEFoRSxFQUFFMEMsS0FBS25CLE1BQU0sU0FBU3NDLEVBQUdDLEdBQ2xCdEQsRUFBWXNELEtBQ2ZFLEdBQVcsV0FBYUgsRUFBSSxhQUFlQyxFQUFJLGFBRzVDRSxHQUtUQyxLQUFNLFNBQVNDLEdBQ2IsSUFBSUQsRUFBTyxHQUNYLElBQUssSUFBSXRFLEtBQVk0QixLQUNkZixFQUFZZSxLQUFLNUIsS0FBZXVFLEdBQ25DRCxFQUFLakIsS0FBS3JELEdBR2QsT0FBT3NFLEdBSVRFLElBQUssU0FBUzVFLEdBQ1osT0FBT2dDLEtBQUtoQyxJQUF5QyxLQUFqQ1MsRUFBRW9FLEtBQUs3QyxLQUFLaEMsR0FBS21CLGFBS3ZDMkQsS0FBTSxXQUNKLElBQUlqQyxFQUFPaEMsRUFBV3VCLFdBQ2xCMkMsRUFBWWxDLEVBQUtHLFFBQ3JCLE9BQU9ILEVBQUtpQyxLQUFLQyxJQUluQnJCLElBQUssV0FDSGhELEVBQU1nRCxJQUFJeEIsTUFBTXhCLEVBQU8wQixZQU16QmpCLFNBQVUsU0FBUzZELEdBQ2pCLElBQUl4RSxFQUFJLEdBTVIsT0FMQUMsRUFBRTBDLEtBQUtuQixNQUFNLFNBQVNzQyxFQUFHQyxHQUNsQnRELEVBQVlzRCxLQUFNUyxHQUNyQnhFLEVBQUVpRCxLQUFLLElBQU1hLEVBQUksTUFBUUMsRUFBRXBELGVBR3hCLGtCQUFvQlgsRUFBRXNFLEtBQUssS0FBTyxPQU03Q3BFLEVBQU11RSxtQkFBcUIsU0FBNEJDLEVBQU9DLEdBQzVELElBQUlDLEVBQWdCM0UsRUFBRXlFLEVBQU1HLFFBQVFDLFFBQVFILEdBQzVDLEdBQTZCLElBQXpCQyxFQUFjckMsT0FBZ0IsT0FBTyxFQUV6QyxJQUFJd0MsRUFBZUgsRUFBY0ksS0FBSyxVQUN0QyxPQUFLRCxHQUFnQkEsSUFBaUJoRCxPQUFPdkQsTUFBeUIsVUFBakJ1RyxHQUNoQyxXQUFqQkEsR0FDaUIsUUFBakJBLEdBQTBCaEQsU0FBV0EsT0FBT2tELEtBNkJsRC9FLEVBQU1nRixxQkFBdUIsU0FBUy9DLEVBQUtnRCxHQUN6QzNELEtBQUtXLElBQU1BLEVBRVhYLEtBQUs0RCxXQUFZLEVBQ2pCNUQsS0FBSzZELFlBQWN2RCxFQUNuQk4sS0FBSzhELGNBQWNILElBR3JCakYsRUFBTWdGLHFCQUFxQkssU0FBVyxTQUFTQyxHQUk3QyxJQUFJQyxFQUFVRCxFQUFhN0UsV0FBVytFLE1BQU0sZ0JBQ3hDQyxFQUFPRixFQUFVQSxFQUFRLEdBQUssR0FDbEMsTUFBTyxDQUFDRCxFQUFhSSxTQUFVSixFQUFhSyxPQUFRRixHQUFNckIsS0FBSyxLQUVuRXJFLEVBQUVxRCxPQUFPcEQsRUFBTWdGLHFCQUFxQnJGLFVBQVksQ0FFNUNKLEtBQU0sV0FDSixJQUFJcUcsRUFBUXRFLEtBQU1XLEVBQU1YLEtBQUtXLElBQUs0RCxFQUFLN0YsRUFBTWdGLHFCQUM3Q2pGLEVBQUU4QixRQUFRdEMsS0FBSyxjQUFnQitCLEtBQUtXLElBQUk2RCxrQkFBa0IsU0FBU0MsRUFBR0MsSUFHNUMsSUFBcEJKLEVBQU1WLFdBQXdCYyxJQUNoQ0osRUFBTVYsV0FBWSxFQUNsQnJELE9BQU9vRSxjQUFjSixFQUFHSyxXQUN4QkwsRUFBR0ssVUFBWSxNQUVqQmpFLEVBQUlrRSxRQUFRLHVCQUVWdkUsSUFBaUJLLEVBQUltRSxxQkFFdkJyRyxFQUFFOEIsUUFBUXRDLEtBQUssWUFBYytCLEtBQUtXLElBQUk2RCxrQkFBa0IsU0FBU0MsR0FDL0Q5RCxFQUFJa0UsUUFBUSx1QkFHZHBHLEVBQUVzRyxVQUFVQyxTQUFTLElBQUssaUJBQW1CaEYsS0FBS1csSUFBSTZELGtCQUFrQixTQUFVQyxHQUNoRixLQUFJQSxFQUFFUSxzQkFBd0JSLEVBQUVTLFNBQVdULEVBQUVVLFNBQTdDLENBR0EsSUFNdURDLEVBQy9DMUksRUFQSjJJLEVBQVlkLEVBQUdSLFNBQVMvRCxNQVk1QixPQU5hQSxLQUFLc0YsU0FBV3RGLEtBQUtzRixVQUFxQkYsRUFJbkRwRixNQUhJdEQsRUFBSXFJLFNBQVNRLGNBQWMsTUFDN0JDLEtBQU9KLEVBQUVJLEtBQ0o5SSxFQUFFNEksWUFHRy9FLE9BQU9rRixTQUFTSCxVQUM1QjNFLEVBQUkrRSxZQUFZLE1BQU9MLElBQ3ZCM0csRUFBTXVFLG1CQUFtQndCLEVBQUcsTUFDOUJBLEVBQUVrQixpQkFDRnJCLEVBQU1zQixZQUFZUCxJQUNYLFFBTFQsT0FTQ2QsRUFBR3NCLFlBQ050QixFQUFHc0IsVUFBWSxHQUVqQnRCLEVBQUdzQixhQUlMQyxPQUFRLFdBQ05ySCxFQUFFOEIsUUFBUXVGLE9BQU8sY0FBZ0I5RixLQUFLVyxJQUFJNkQsa0JBQzFDL0YsRUFBRThCLFFBQVF1RixPQUFPLFlBQWM5RixLQUFLVyxJQUFJNkQsa0JBQ3hDL0YsRUFBRXNHLFVBQVVnQixXQUFXLElBQUssaUJBQW1CL0YsS0FBS1csSUFBSTZELGtCQUN4RDlGLEVBQU1nRixxQkFBcUJtQyxZQUN2Qm5ILEVBQU1nRixxQkFBcUJtQyxXQUFhLElBQzFDdEYsT0FBT29FLGNBQWNqRyxFQUFNZ0YscUJBQXFCa0IsV0FDaERsRyxFQUFNZ0YscUJBQXFCa0IsVUFBWSxPQUszQ29CLFlBQWEsV0FDWCxPQUFPdEgsRUFBTWdGLHFCQUFxQkssU0FBU3hELE9BQU9rRixXQUlwREcsWUFBYSxTQUFTSyxHQVFwQixHQVBJLGNBQWNDLEtBQUtELEtBRW5CQSxFQURFM0YsSUFBaUJOLEtBQUtXLElBQUltRSxtQkFDYixJQUFNbUIsRUFFTixNQUFRQSxHQUd2QkEsR0FBZ0JqRyxLQUFLZ0csY0FBZSxDQUV0QyxJQUFJMUYsR0FBaUJOLEtBQUtXLElBQUltRSxxQkFBc0IsTUFBTW9CLEtBQUtELEdBSTdELE9BQVExRixPQUFPa0YsU0FBV1EsRUFIMUJ6RixRQUFRQyxVQUFVLENBQUUwRixLQUFNRixHQUFnQjFGLE9BQU82RixNQUFPSCxHQUN4RGpHLEtBQUtXLElBQUlrRSxRQUFRLHNCQU92QmYsY0FBZSxTQUFTdUMsR0FFdEIsSUFBSS9CLEVBQVF0RSxLQUNaLElBQUt0QixFQUFNZ0YscUJBQXFCa0IsVUFBVyxDQUNwQ3lCLElBQVNBLEVBQVEsSUFDdEIsSUFBSUMsRUFBWSxXQUNkLElBQUlDLEVBQW1CakMsRUFBTTBCLG1CQUMyQixJQUE3Q3RILEVBQU1nRixxQkFBcUI4QyxnQkFDcENELEdBQW9CN0gsRUFBTWdGLHFCQUFxQjhDLGdCQUMvQ2pHLE9BQU9rRyxZQUFXLFdBQ2hCaEksRUFBRThCLFFBQVFzRSxRQUFRLGFBQWMsRUFBQyxNQUNoQyxHQUVMbkcsRUFBTWdGLHFCQUFxQjhDLGVBQWlCRCxHQUU5Q0QsSUFDQTVILEVBQU1nRixxQkFBcUJrQixVQUFZckUsT0FBT21HLFlBQVlKLEVBQVdELE9BVTNFM0gsRUFBTXVDLFlBQWMsU0FBUzBGLEdBQzNCLElBQUloRyxFQUFNWCxLQUNWQSxLQUFLNEcsT0FBb0IsR0FDekI1RyxLQUFLNkcsVUFBb0IsSUFBSW5JLEVBQU12QixPQUFPLElBQzFDNkMsS0FBSzhHLFFBQW9CLEdBQ3pCOUcsS0FBSytHLFFBQW9CLEdBRXpCL0csS0FBS2dILFdBQW9CLElBQUtwRixNQUFRcUYsVUFBWSxJQUFNQyxTQUF5QixJQUFoQkMsS0FBS0MsU0FBaUIsSUFDdkZwSCxLQUFLcUgsa0JBQW9CLFdBQWEzSSxFQUFNNEksYUFBYXBILE1BQU1GLEtBQU1JLFlBQ3JFSixLQUFLcUgsa0JBQWtCaEosVUFBWSxJQUFJSyxFQUFNNEksYUFFekNySSxFQUFZMEgsSUFDZEEsRUFBYXpHLE1BQU1GLEtBQU0sQ0FBQ0EsT0FHdkJBLEtBQUt1SCxpQkFDUnZILEtBQUt3SCxpQkFBaUIsSUFBSTlJLEVBQU1nRixxQkFBcUIxRCxLQUFNQSxLQUFLMkQscUJBRTlEM0QsS0FBS3lILE9BQ1B6SCxLQUFLMEgsaUJBQWdCLFNBQVNqRCxFQUFHa0QsR0FDL0JoSCxFQUFJZSxJQUFJZixFQUFJeEIsV0FBWXNGLEVBQUVtRCxhQUFjRCxHQUFRLFFBS3REakosRUFBTXVDLFlBQVk1QyxVQUFZSSxFQUFFcUQsT0FBTyxHQUFJcEQsRUFBTXZCLE9BQU9rQixVQUFXLENBR2pFd0osWUFBYSxDQUFDLE1BQU0sT0FBTyxNQUFNLFVBSWpDQyxXQUFZLENBQUMsTUFBTyxTQUFVLGVBQWdCLFlBQWEsY0FBZSx1QkFBd0Isc0JBQXVCLFVBQVcsUUFBUyx3QkFBeUIsV0FBWSxvQkFFbExDLFlBQWEsS0FDYlIsZ0JBQWlCLEtBQ2pCUyxVQUFVLEVBSVY5RyxpQkFBa0IsT0FHbEJ1RyxPQUFPLEVBSVBRLGNBQWMsRUFHZHRFLG1CQUFvQixHQUlwQm1CLG9CQUFvQixFQVNwQm9ELGdCQUFpQixLQUdqQi9JLFNBQVUsV0FDUixNQUFPLHFCQUF1QmEsS0FBS2tCLGtCQUlyQ2lILFNBQVUsU0FBU3ZILEdBQ2pCLE9BQU9BLEVBQVduQyxFQUFFdUIsS0FBS2tCLGtCQUFrQmtILEtBQUt4SCxHQUFZbkMsRUFBRXVCLEtBQUtrQixtQkErQ3JFRyxJQUFLLFdBRUgsSUFBSVIsRUFBT2hDLEVBQVd1QixXQUNsQmdCLEVBQVNQLEVBQUtHLFFBQ2RxSCxFQUFjakgsR0FBVSxHQUM1QixJQUNFUCxFQUFLYyxRQUFRM0IsTUFDUSxpQkFBVm9CLElBQ1RpSCxFQUFjLFNBQVdqSCxFQUN6QkEsRUFBUzFDLEVBQU0wQyxJQUVqQkEsRUFBT2xCLE1BQU1GLEtBQU1hLEdBQ25CLE1BQU00RCxRQUNnQixJQUFYckQsRUFDVHBCLEtBQUtzSSxNQUFNLDBDQUE0Q0QsRUFBWWxKLFdBQWEsbUJBQW9Cc0YsR0FDMUZ4RixFQUFZbUMsR0FHdEJwQixLQUFLc0ksTUFBTSxlQUFnQjdELEdBRjNCekUsS0FBS3NJLE1BQU0sbUNBQXFDRCxFQUFZbEosV0FBYSxzQkFBdUJzRixHQUtwRyxPQUFPekUsTUFrQlR3SCxpQkFBa0IsU0FBU2UsR0FDekIsSUFBSUMsRUFBaUJ4SSxLQUFLdUgsZ0JBQzFCdkgsS0FBS3VILGdCQUFrQmdCLEVBQ25CdkksS0FBS3lJLGNBQ0hELEdBRUZBLEVBQWUxQyxTQUVqQjlGLEtBQUt1SCxnQkFBZ0J0SixTQUt6QnlELElBQUssV0FDSGhELEVBQU1nRCxJQUFJeEIsTUFBTXhCLEVBQU9LLE1BQU1WLFVBQVU4QixPQUFPRCxNQUFNLENBQUNGLEtBQUtrQixrQkFBa0JkLGFBcUI5RUgsTUFBTyxTQUFTRixFQUFNb0csR0FDcEIsSUFBa0N1QyxFQUFXQyxFQUF6Q2hJLEVBQU1YLEtBQU00SSxFQUFjLEdBQTJCQyxFQUFXOUosTUFBTVYsVUFBVVcsTUFBTXBDLEtBQUt3RCxVQUFVLEdBYXpHLEdBVHdCLElBQXBCeUksRUFBUzlILFFBQWdCOUIsRUFBWWtILEtBQ3ZDMEMsRUFBVyxDQUFDMUMsR0FDWkEsRUFBT3BHLEVBQ1BBLEVBQU8sT0FHVEEsRUFBT0EsRUFBSytJLGNBR1IzQyxFQUFLNEMsYUFBZWxKLE9BQVEsQ0FROUIsSUFIQWxCLEVBQWtCcUssVUFBWSxFQUd5QixRQUEvQ0wsRUFBYWhLLEVBQWtCc0ssS0FBSzlDLEtBQzFDeUMsRUFBWW5ILEtBQUtrSCxFQUFXLElBRzlCeEMsRUFBTyxJQUFJK0MsT0FBTy9DLEVBQUsxRyxRQUFRZCxFQTFrQmpCLFdBMGtCcUQsS0F3QnJFLE9BckJBRixFQUFFMEMsS0FBSzBILEdBQVMsU0FBU3BNLEVBQUUwTSxHQUNOLGlCQUFULElBQ1JOLEVBQVNwTSxHQUFLa0UsRUFBSXdJLE9BSXRCVCxFQUFZLFNBQVNVLEdBQ25CLElBQUk3TCxFQUFJLENBQUN3QyxLQUFNcUosRUFBV2pELEtBQU1BLEVBQU0wQyxTQUFVQSxFQUFVRCxZQUFhQSxHQUV2RWpJLEVBQUlpRyxPQUFPd0MsR0FBYXpJLEVBQUlpRyxPQUFPd0MsSUFBYyxHQUVqRHpJLEVBQUlpRyxPQUFPd0MsR0FBVzNILEtBQUtsRSxJQUdoQixRQUFUd0MsRUFDRnRCLEVBQUUwQyxLQUFLbkIsS0FBSzZILGFBQWEsU0FBU3BMLEVBQUc4RixHQUFLbUcsRUFBVW5HLE1BRXBEbUcsRUFBVTNJLEdBSUxDLE1BSVQxQyxJQUFLd0MsRUFBYyxPQUduQnVKLEtBQU12SixFQUFjLFFBR3BCd0osSUFBS3hKLEVBQWMsT0FHbkJ5SixJQUFLekosRUFBYyxVQUduQjBKLElBQUsxSixFQUFjLE9BbUJuQjJKLFVBQVcsU0FBU0MsR0FDbEIsSUFBSS9JLEVBQU1YLEtBSVYsT0FIQXZCLEVBQUUwQyxLQUFLdUksR0FBYSxTQUFTak4sRUFBR2tOLEdBQzlCaEosRUFBSVYsTUFBTUMsTUFBTVMsRUFBS2dKLE1BRWhCM0osTUFLVHdFLGVBQWdCLFdBQ2QsTUFBTyxDQUFDLFlBQWF4RSxLQUFLZ0gsV0FBV2xFLEtBQUssTUFVNUM3RSxLQUFNLFNBQVNqQixFQUFNMkssRUFBTWtCLEdBQ3pCLElBQUlsSSxFQUFNWCxVQUdhLElBQVo2SSxJQUEyQkEsRUFBV2xCLEdBQ2pELElBQUlpQyxFQUFxQixXQUV2QixJQUFJbkYsRUFBR29GLEVBQVNsQyxFQUNoQmxELEVBQVVyRSxVQUFVLElBQ3BCdUgsRUFBVXZILFVBQVUsS0FDUnVILEVBQUtrQyxTQUNmQSxFQUFVbEMsRUFBS2tDLGVBQ1JsQyxFQUFLa0MsU0FFWkEsRUFBVSxJQUFJbEosRUFBSTBHLGtCQUFrQjFHLEVBQUssT0FBUThELEVBQUVxRixLQUFNbkMsRUFBTWxELEVBQUVwQixRQUVuRW9CLEVBQUVtRCxhQUFlbkQsRUFBRXFGLEtBQUtySyxRQUFRa0IsRUFBSTZELGlCQUFrQixJQUN0RHFFLEVBQVMzSSxNQUFNMkosRUFBUyxDQUFDcEYsRUFBR2tELEtBYTlCLE9BUEszSCxLQUFLNkcsVUFBVTdKLEtBQVNnRCxLQUFLNkcsVUFBVTdKLEdBQVEsSUFDcERnRCxLQUFLNkcsVUFBVTdKLEdBQU15RSxLQUFLbUksR0FDdEI1SixLQUFLeUksYUFHUHpJLEtBQUsrSixRQUFRL00sRUFBTTRNLEdBRWQ1SixNQVlUNkUsUUFBUyxTQUFTN0gsRUFBTTJLLEdBRXRCLE9BREEzSCxLQUFLbUksV0FBV3RELFFBQVEsQ0FBQzdILEVBQU1nRCxLQUFLd0Usa0JBQWtCMUIsS0FBSyxLQUFNLENBQUM2RSxJQUMzRDNILE1BSVRnSyxRQUFTLFdBR1AsT0FGQWhLLEtBQUtpSyxjQUFnQixLQUNyQmpLLEtBQUs2RSxRQUFRLG9CQUNON0UsTUFtQ1RrSyxPQUFRLFNBQVNDLEVBQVN0QixHQU14QixPQUxJNUosRUFBWWtMLEtBQ2R0QixFQUFXc0IsRUFDWEEsRUFBVSxJQUVabkssS0FBSytHLFFBQVF0RixLQUFLLENBQUMwSSxFQUFTdEIsSUFDckI3SSxNQUtUb0ssTUFBTyxTQUFTdkIsR0FDZCxPQUFPN0ksS0FBSy9CLEtBQUssc0JBQXVCNEssSUE4QzFDd0IsT0FBUSxTQUFTeEIsR0FFZixPQURBN0ksS0FBSzhHLFFBQVFyRixLQUFLb0gsR0FDWDdJLE1Bd0RUc0ssV0FBWSxTQUFTekIsR0FFbkIsT0FEQTdJLEtBQUt1SyxZQUFjMUIsRUFDWjdJLE1BSVR5SSxVQUFXLFdBQ1QsT0FBT3pJLEtBQUtnSSxVQTZCZHdDLFFBQVMsU0FBU0MsR0FFaEIsT0FEQWhNLEVBQUVxRCxPQUFPOUIsS0FBS3FILGtCQUFrQmhKLFVBQVdvTSxHQUNwQ3pLLE1BNEJUMEssT0FBUSxTQUFTMU4sRUFBTTJOLEdBRXJCLE9BREEzSyxLQUFLcUgsa0JBQWtCaEosVUFBVXJCLEdBQVEyTixFQUNsQzNLLE1BaUJUNEssSUFBSyxTQUFTQyxHQUNaLEdBQUk3SyxLQUFLeUksWUFBZSxPQUFPLEVBQy9CLElBQUk5SCxFQUFNWCxLQW9DVixPQWpDQXZCLEVBQUUwQyxLQUFLbkIsS0FBSzZHLFVBQVV6RSxVQUFVLFNBQVNwRixFQUFNOE4sR0FDN0NyTSxFQUFFMEMsS0FBSzJKLEdBQVcsU0FBU3JPLEVBQUdtTixHQUM1QmpKLEVBQUlvSixRQUFRL00sRUFBTTRNLFNBSXRCNUosS0FBSzZFLFFBQVEsTUFBTyxDQUFDZ0csVUFBV0EsSUFDaEM3SyxLQUFLZ0ksVUFBVyxFQUVoQmhJLEtBQUtpSyxjQUFnQixLQUNmLFNBQVMvRCxLQUFLbEcsS0FBS2dHLHFCQUF1QyxJQUFiNkUsR0FDakQ3SyxLQUFLNEYsWUFBWWlGLEdBR25CN0ssS0FBSytLLGlCQUNML0ssS0FBS3VILGdCQUFnQnRKLE9BQ3JCK0IsS0FBSy9CLEtBQUssb0JBQW9CLFdBQzVCMEMsRUFBSW9LLG9CQUlOL0ssS0FBSy9CLEtBQUssVUFBVSxTQUFTd0csR0FDM0IsT0FBTS9GLEVBQU11RSxtQkFBbUJ3QixFQUFHLFVBRWIsSUFETjlELEVBQUlxSyxxQkFBcUJ2TSxFQUFFZ0csRUFBRXBCLFFBQVFDLFFBQVEsVUFDOUJtQixFQUFFa0Isb0JBSWxDbEgsRUFBRThCLFFBQVF0QyxLQUFLLFVBQVUsV0FDdkIwQyxFQUFJc0ssWUFJQ2pMLEtBQUs2RSxRQUFRLFlBTXRCb0csT0FBUSxXQUNOLElBQUtqTCxLQUFLeUksWUFBZSxPQUFPLEVBQ2hDLElBQUk5SCxFQUFNWCxLQWFWLE9BWkFBLEtBQUs2RSxRQUFRLFVBRWI3RSxLQUFLdUgsZ0JBQWdCekIsU0FFckI5RixLQUFLbUksV0FBV3JDLE9BQU8sVUFBVW9GLFlBQVl2SyxFQUFJNkQsa0JBRWpEL0YsRUFBRTBDLEtBQUtuQixLQUFLNkcsVUFBVXpFLFVBQVcsU0FBU3BGLEVBQU02SixHQUM5Q3BJLEVBQUUwQyxLQUFLMEYsR0FBVyxTQUFTcEssRUFBR21OLEdBQzVCakosRUFBSXdLLFVBQVVuTyxFQUFNNE0sU0FHeEI1SixLQUFLZ0ksVUFBVyxFQUNUaEksTUFJVG9MLFFBQVMsV0FHUCxPQUZBcEwsS0FBS2lMLGdCQUNFdk0sRUFBTW9DLEtBQUtkLEtBQUtrQixrQkFDaEJsQixNQVFUMEgsZ0JBQWlCLFNBQVNtQixHQUN4QixJQUFJbEksRUFBTVgsS0FXVixPQVRBdkIsRUFBRTBDLEtBQUtuQixLQUFLOEgsWUFBWSxTQUFTckwsRUFBR2dJLEdBQ2xDOUQsRUFBSTFDLEtBQUt3RyxFQUFHb0UsTUFHZHBLLEVBQUUwQyxLQUFLbkIsS0FBSzZHLFVBQVVuRSxNQUFLLElBQU8sU0FBU2pHLEVBQUdPLElBQ0osR0FBcEN5QixFQUFFNE0sUUFBUXJPLEVBQU0yRCxFQUFJbUgsYUFDdEJuSCxFQUFJMUMsS0FBS2pCLEVBQU02TCxNQUdaN0ksTUFLVHNMLGFBQWMsU0FBU25GLEdBQ3JCLE9BQU9BLEVBQUsxRyxRQUFRYixFQUFzQixLQUs1QzhHLFlBQWEsU0FBUzNGLEVBQU1vRyxHQUMxQixJQUF1Q3pKLEVBQUd1RCxFQUExQnNMLEdBQVMsRUFBTzlPLEVBQUksRUFDcEMsUUFBZ0MsSUFBckJ1RCxLQUFLNEcsT0FBTzdHLEdBRXJCLElBREFyRCxFQUFJc0QsS0FBSzRHLE9BQU83RyxHQUFNZ0IsT0FDZnRFLEVBQUlDLEVBQUdELElBRVosR0FEQXdELEVBQVFELEtBQUs0RyxPQUFPN0csR0FBTXRELEdBSnBCdUQsS0FLRXNMLGFBQWFuRixHQUFNakMsTUFBTWpFLEVBQU1rRyxNQUFPLENBQzVDb0YsRUFBU3RMLEVBQ1QsTUFJTixPQUFPc0wsR0FzQlRDLFNBQVUsU0FBU3pMLEVBQU1vRyxFQUFNc0YsRUFBUXBJLEdBQ3JDLElBRUl3RyxFQUNBNkIsRUFDQTVFLEVBRUFDLEVBQ0FtRCxFQUNBeUIsRUFDQUMsRUFDQUMsRUFWQWxMLEVBQU1YLEtBQ05DLEVBQVFELEtBQUswRixZQUFZM0YsRUFBTW9HLEdBb0JuQyxHQVRJbkcsS0FBS3lILE9BQ1B6SCxLQUFLMEIsSUFBSSxXQUFZLENBQUMzQixFQUFNb0csR0FBTXJELEtBQUssTUFHekM5QyxLQUFLNkUsUUFBUSxZQUFhLENBQUM5RSxLQUFNQSxFQUFNb0csS0FBTUEsRUFBTXNGLE9BQVFBLFNBQ3RDLElBQVZBLElBQXlCQSxFQUFTLElBRTdDaE4sRUFBRXFELE9BQU8ySixFQUFRekwsS0FBSzhMLGtCQUFrQjNGLElBRXBDbEcsRUFBTyxDQUNURCxLQUFLNkUsUUFBUSxjQUFlLENBQUM1RSxNQUFPQSxJQUU2QixRQUE1RDJMLEVBQWMzTCxFQUFNa0csS0FBSzhDLEtBQUtqSixLQUFLc0wsYUFBYW5GLE9BRW5EeUYsRUFBWTVLLFFBRVp2QyxFQUFFMEMsS0FBS3lLLEdBQWEsU0FBU25QLEVBQUdzUCxHQUUxQjlMLEVBQU0ySSxZQUFZbk0sR0FFcEJnUCxFQUFPeEwsRUFBTTJJLFlBQVluTSxJQUFNNkMsRUFBUXlNLElBR2xDTixFQUFPTyxRQUFTUCxFQUFPTyxNQUFRLElBQ3BDUCxFQUFPTyxNQUFNdkssS0FBS25DLEVBQVF5TSxTQU1oQ2xDLEVBQVcsSUFBSTdKLEtBQUtxSCxrQkFBa0JySCxLQUFNRCxFQUFNb0csRUFBTXNGLEVBQVFwSSxHQUVoRXlELEVBQVU5RyxLQUFLOEcsUUFBUTlILE1BQU0sR0FDN0IrSCxFQUFVL0csS0FBSytHLFFBQVEvSCxNQUFNLEdBRTdCMk0sRUFBZ0IsQ0FBQzlCLEdBQ2I0QixFQUFPTyxRQUNUTCxFQUFnQkEsRUFBY3hMLE9BQU9zTCxFQUFPTyxRQUc5Q04sRUFBZ0IsV0FFZCxJQURBLElBQUlPLEVBQVV4UCxFQUFHeVAsRUFDVm5GLEVBQVFoRyxPQUFTLEdBR3RCLEdBRkFtSixFQUFTbkQsRUFBUS9GLFFBRWJMLEVBQUl3TCxzQkFBc0J0QyxFQUFTSyxFQUFPLE1BRTNCLEtBRGpCK0IsRUFBVy9CLEVBQU8sR0FBR2hLLE1BQU0ySixFQUFTLENBQUNBLEtBQ1gsT0FBTyxFQXVCckMsT0FwQkFsSixFQUFJeUwsV0FBYW5NLEVBQ2pCNEosRUFBUWhGLFFBQVEsdUJBQXdCLENBQUNnRixRQUFTQSxJQUVuQixtQkFBcEI1SixFQUFjLFdBQ3ZCQSxFQUFNNEksU0FBVyxDQUFDNUksRUFBTTRJLFdBRXRCNUksRUFBTTRJLFVBQVk1SSxFQUFNNEksU0FBUzlILFNBQ25DdEUsR0FBSyxFQUNMeVAsRUFBWSxXQUNWelAsSUFDSXdELEVBQU00SSxTQUFTcE0sR0FDakJ3UCxFQUFXaE0sRUFBTTRJLFNBQVNwTSxHQUFHeUQsTUFBTTJKLEVBQVE4QixHQUNsQ2hMLEVBQUk0SixjQUFzQjVKLEVBQUk0SixZQUFYLElBQzVCNUosRUFBSTRKLFlBQVlWLElBR3BCOEIsRUFBY2xLLEtBQUt5SyxHQUNuQkEsS0FFRnJDLEVBQVFoRixRQUFRLHNCQUF1QixDQUFDZ0YsUUFBU0EsSUFDMUNvQyxHQUVUeE4sRUFBRTBDLEtBQUsyRixFQUFRdUYsV0FBVyxTQUFTNVAsRUFBRzROLEdBQ3BDLElBQUlpQyxFQUFxQlosRUFDekJBLEVBQWdCLFdBQWEsT0FBT3JCLEVBQU9uSyxNQUFNMkosRUFBUyxDQUFDeUMsUUFFN0QsSUFDRVQsRUFBaUJILElBQ2pCLE1BQU1qSCxHQUNOekUsS0FBS3NJLE1BQU0sQ0FBQyxZQUFhdkksRUFBTW9HLEdBQU1yRCxLQUFLLEtBQU0yQixHQUVsRCxPQUFPb0gsRUFFUCxPQUFPN0wsS0FBS3VNLFNBQVN4TSxFQUFNb0csSUFrRC9CZ0csc0JBQXVCLFNBQVN0QyxFQUFTMkMsRUFBZUMsR0FDdEQsSUFBSXRDLEVBQVVxQyxFQVNkLElBUHVCLGlCQUFackMsR0FBd0I5SyxFQUFVOEssTUFDM0NBLEVBQVUsQ0FBQ2hFLEtBQU1nRSxTQUVLLElBQWJzQyxJQUNUQSxHQUFXLEdBR1RoTyxFQUFFaU8sY0FBY3ZDLEdBQ2xCLE9BQU8sRUFHVCxHQUFJL0ssRUFBUytLLEVBQVFoRSxNQUFNLENBQ3pCLElBQUl3RyxFQUFTQyxFQUFRQyxFQUFNQyxFQUUzQixJQURBSCxFQUFVLEdBQ0xDLEVBQVMsRUFBR0UsRUFBTTNDLEVBQVFoRSxLQUFLcEYsT0FBUTZMLEVBQVNFLEVBQUtGLEdBQVUsRUFDbEVDLEVBQU9wTyxFQUFFcUQsT0FBTyxHQUFJcUksRUFBUyxDQUFDaEUsS0FBTWdFLEVBQVFoRSxLQUFLeUcsS0FDakRELEVBQVFsTCxLQUFLekIsS0FBS21NLHNCQUFzQnRDLEVBQVNnRCxJQUVuRCxJQUFJRSxFQUFVdE8sRUFBRTRNLFNBQVEsRUFBTXNCLElBQVksRUFDMUMsT0FBT0YsRUFBV00sR0FBV0EsRUFFL0IsR0FBSTVDLEVBQVE2QyxLQUNWLE9BQU9oTixLQUFLbU0sc0JBQXNCdEMsRUFBU00sRUFBUTZDLE1BQU0sR0FDcEQsR0FBSTdDLEVBQVE4QyxPQUNqQixPQUFPak4sS0FBS21NLHNCQUFzQnRDLEVBQVNNLEVBQVE4QyxRQUFRLEdBRTdELElBQUlDLEdBQWUsRUFBTUMsR0FBZSxFQWN4QyxPQWJJaEQsRUFBUWhFLE9BQ0w5RyxFQUFVOEssRUFBUWhFLFFBQ3JCZ0UsRUFBUWhFLEtBQU8sSUFBSStDLE9BQU9pQixFQUFRaEUsS0FBS2hILFdBQWEsTUFFdEQrTixFQUFlL0MsRUFBUWhFLEtBQUtELEtBQUsyRCxFQUFRMUQsT0FFdkNnRSxFQUFRcEssT0FFUm9OLEVBRHlCLGlCQUFqQmhELEVBQVFwSyxLQUNEb0ssRUFBUXBLLE9BQVM4SixFQUFROUosS0FFekJvSyxFQUFRcEssS0FBS3FOLFFBQVF2RCxFQUFROUosT0FBUyxHQUdsRDBNLEVBQVlVLEdBQWdCRCxJQUFrQkMsR0FBZ0JELElBTXZFbEgsWUFBYSxXQUNYLE9BQU9oRyxLQUFLdUgsZ0JBQWdCdkIsZUFVOUJKLFlBQWEsU0FBU0ssR0FDcEIsT0FBT2pHLEtBQUt1SCxnQkFBZ0IzQixZQUFZSyxJQTBCMUNvSCxLQUFNLFNBQVNDLEVBQVN6RSxHQUN0QixJQUFJMEUsRUFBTXZOLEtBQUttSSxXQUFXcUYsS0FBS0YsR0FFL0IsT0FESXJPLEVBQVk0SixJQUFhQSxFQUFTeUUsR0FDL0JDLEdBTVRFLGNBQWUsU0FBU3pQLEVBQUtOLEdBQzNCLFlBQW9CLElBQVRBLEVBQ0YyQyxFQUFnQnJDLEdBQU9OLEVBRXZCMkMsRUFBZ0JyQyxJQUszQjBQLG1CQUFvQixXQUNsQixPQUFRck4sRUFBa0IsSUFNNUJrTSxTQUFVLFNBQVN4TSxFQUFNb0csR0FDdkIsSUFBSXdILEVBQU0zTixLQUFLc0ksTUFBTSxDQUFDLGdCQUFpQnZJLEVBQU1vRyxHQUFNckQsS0FBSyxNQUN4RCxNQUFpQixRQUFUL0MsR0FBa0I0TixHQVM1QnJGLE1BQU8sU0FBU3NGLEVBQVNDLEdBSXZCLEdBSEtBLElBQWtCQSxFQUFpQixJQUFJQyxPQUM1Q0QsRUFBZUQsUUFBVSxDQUFDQSxFQUFTQyxFQUFlRCxTQUFTOUssS0FBSyxLQUNoRTlDLEtBQUs2RSxRQUFRLFFBQVMsQ0FBQytJLFFBQVNDLEVBQWVELFFBQVN0RixNQUFPdUYsSUFDM0Q3TixLQUFLaUksYUFDUCxNQUFLLEVBRUxqSSxLQUFLMEIsSUFBSW1NLEVBQWVELFFBQVNDLElBSXJDOUMsZUFBZ0IsV0FDZCxJQUFJdEYsRUFBVXdHLEVBVWQsT0FSQXhHLEVBQVd6RixLQUFLZ0csY0FFWGhHLEtBQUtpSyxlQUEwQyxPQUF6QmpLLEtBQUtpSyxjQUFjLElBQWVqSyxLQUFLaUssY0FBYyxJQUFNeEUsSUFFcEZ6RixLQUFLaUssY0FBZ0IsQ0FBQyxNQUFPeEUsR0FFN0J3RyxFQUFXak0sS0FBS3dMLFNBQVMsTUFBTy9GLElBRTNCd0csR0FHVDhCLGFBQWMsU0FBU0MsR0FDckIsSUFBcUJqTyxFQUFNa08sRUFBdkJDLEVBQVF6UCxFQUFFdVAsR0FLZCxPQUpBQyxFQUFXQyxFQUFNOUYsS0FBSywwQkFDVHJILE9BQVMsSUFBS2hCLEVBQU9rTyxFQUFTRSxPQUN0Q3BPLElBQVFBLEVBQU9tTyxFQUFNLEdBQUdFLGFBQWEsV0FDckNyTyxHQUFpQixLQUFUQSxJQUFlQSxFQUFPLE9BQzVCdEIsRUFBRW9FLEtBQUs5QyxFQUFLWixXQUFXMkosZ0JBR2hDa0MscUJBQXNCLFNBQVNnRCxHQUM3QixJQUFJRSxFQUFPL0gsRUFBTXBHLEVBQU0wTCxFQUFRUSxFQW1CL0IsT0FsQkFqTSxLQUFLNkUsUUFBUSx3QkFBeUIsQ0FBQ21KLEtBQU1BLElBRTdDN0gsR0FEQStILEVBQVF6UCxFQUFFdVAsSUFDSXhLLEtBQUssV0FBYSxHQUNoQ3pELEVBQVFDLEtBQUsrTixhQUFhRyxHQUV0QmxPLEtBQUt5SCxPQUNQekgsS0FBSzBCLElBQUksdUJBQXdCd00sRUFBTy9ILEVBQU1wRyxHQUduQyxRQUFUQSxHQUVhLE1BRGYwTCxFQUFTekwsS0FBS3FPLHFCQUFxQkgsTUFDZC9ILEdBQVEsSUFBTXNGLEdBQ25DekwsS0FBSzRGLFlBQVlPLEdBQ2pCOEYsR0FBVyxJQUVYUixFQUFTaE4sRUFBRXFELE9BQU8sR0FBSTlCLEtBQUtzTyxpQkFBaUJKLElBQzVDakMsRUFBV2pNLEtBQUt3TCxTQUFTekwsRUFBTW9HLEVBQU1zRixFQUFRdUMsRUFBSzFRLElBQUksVUFFN0IsSUFBWjJPLEdBQW1DQSxHQUdwRG9DLHFCQUFzQixTQUFTSCxHQUM1QixJQUVFelIsRUFGRThSLEVBQWMsR0FDaEJDLEVBQVNOLEVBQU1PLGlCQUVqQixHQUFJRCxFQUFPek4sT0FBUyxFQUVsQixJQURBd04sRUFBY3ZPLEtBQUswTyxnQkFBZ0JGLEVBQU8sR0FBR3hSLEtBQU13UixFQUFPLEdBQUc5USxPQUN4RGpCLEVBQUksRUFBR0EsRUFBSStSLEVBQU96TixPQUFRdEUsSUFDN0I4UixFQUFjQSxFQUFjLElBQU12TyxLQUFLME8sZ0JBQWdCRixFQUFPL1IsR0FBR08sS0FBTXdSLEVBQU8vUixHQUFHaUIsT0FHckYsT0FBTzZRLEdBR1ZHLGdCQUFpQixTQUFTMVIsRUFBTVUsR0FDOUIsT0FBT2dDLEVBQVExQyxHQUFRLElBQU0wQyxFQUFRaEMsSUFHdkM0USxpQkFBa0IsU0FBU0osR0FDekIsSUFFSXpSLEVBRkFnUCxFQUFTLEdBQ1RrRCxFQUFjVCxFQUFNTyxpQkFFeEIsSUFBS2hTLEVBQUksRUFBR0EsRUFBSWtTLEVBQVk1TixPQUFRdEUsSUFDbENnUCxFQUFTekwsS0FBSzRPLGdCQUFnQm5ELEVBQVFrRCxFQUFZbFMsR0FBR08sS0FBTTJSLEVBQVlsUyxHQUFHaUIsT0FFNUUsT0FBTytOLEdBR1RLLGtCQUFtQixTQUFTM0YsR0FDMUIsSUFBaUIwSSxFQUFPQyxFQUFPQyxFQUFNdFMsRUFBakNnUCxFQUFTLEdBR2IsSUFEQW9ELEVBQVExSSxFQUFLakMsTUFBTXRGLEtBQ05pUSxFQUFNLEdBRWpCLElBREFDLEVBQVFELEVBQU0sR0FBR0csTUFBTSxLQUNsQnZTLEVBQUksRUFBR0EsRUFBSXFTLEVBQU0vTixPQUFRdEUsSUFDNUJzUyxFQUFPRCxFQUFNclMsR0FBR3VTLE1BQU0sS0FDdEJ2RCxFQUFTekwsS0FBSzRPLGdCQUFnQm5ELEVBQVFuTSxFQUFReVAsRUFBSyxJQUFLelAsRUFBUXlQLEVBQUssSUFBTSxLQUcvRSxPQUFPdEQsR0FHVG1ELGdCQUFpQixTQUFTbkQsRUFBUXpOLEVBQUtOLEdBVXJDLFlBVDJCLElBQWhCK04sRUFBT3pOLEdBQ1pvQixFQUFTcU0sRUFBT3pOLElBQ2xCeU4sRUFBT3pOLEdBQUt5RCxLQUFLL0QsR0FFakIrTixFQUFPek4sR0FBTyxDQUFDeU4sRUFBT3pOLEdBQU1OLEdBRzlCK04sRUFBT3pOLEdBQU9OLEVBRVQrTixHQUdUMUIsUUFBUyxTQUFTL00sRUFBTTZMLEdBQ3RCLE9BQU83SSxLQUFLbUksV0FBV2xLLEtBQUssQ0FBQ2pCLEVBQU1nRCxLQUFLd0Usa0JBQWtCMUIsS0FBSyxLQUFNK0YsSUFHdkVzQyxVQUFXLFNBQVNuTyxFQUFNNkwsR0FDeEIsT0FBTzdJLEtBQUttSSxXQUFXckMsT0FBTyxDQUFDOUksRUFBTWdELEtBQUt3RSxrQkFBa0IxQixLQUFLLEtBQU0rRixNQXNCM0VuSyxFQUFNdVEsY0FBZ0IsU0FBU0MsR0FDN0JsUCxLQUFLa1AsY0FBbUJBLEVBQ3hCbFAsS0FBSzhLLFVBQW1CLEdBQ3hCOUssS0FBS21QLGlCQUFtQixLQUN4Qm5QLEtBQUtzTixRQUFtQixLQUN4QnROLEtBQUtvUCxhQUFtQixFQUN4QnBQLEtBQUtxUCxTQUFtQixHQUcxQjNRLEVBQU11USxjQUFjNVEsVUFBWUksRUFBRXFELE9BQU8sR0FBSXBELEVBQU12QixPQUFPa0IsVUFBVyxDQStCbkVpUixLQUFNLFNBQVN6RyxHQUNiLElBQUs1SixFQUFZNEosR0FBVyxDQUcxQixHQUF3QixpQkFBYkEsS0FBeUJBLEtBQVk3SSxLQUFLa1AsZUFNbkQsT0FBT2xQLEtBTFAsSUFBSTBLLEVBQVMxSyxLQUFLa1AsY0FBY3JHLEdBQ2hDQSxFQUFXLFNBQVN5RSxHQUNsQixPQUFPNUMsRUFBT3hLLE1BQU1GLEtBQUtrUCxjQUFlLENBQUM1QixLQU0vQyxJQUFJekQsRUFBVTdKLEtBWWQsT0FYSUEsS0FBS3FQLFFBQ1ByUCxLQUFLOEssVUFBVXJKLEtBQUtvSCxJQUVwQjdJLEtBQUt1UCxPQUNMaFAsT0FBT2tHLFlBQVcsV0FDaEIsSUFBSXdGLEVBQVdwRCxFQUFTM0ksTUFBTTJKLEVBQVMsQ0FBQ0EsRUFBUXlELFFBQVN6RCxFQUFRc0Ysb0JBQ2hELElBQWJsRCxHQUNGcEMsRUFBUTJGLEtBQUt2RCxLQUVkLElBRUVqTSxNQXlCVHVQLEtBQU0sV0FDSnZQLEtBQUtxUCxTQUFVLEdBS2pCRyxLQUFNLFNBQVNsQyxHQUNidE4sS0FBS3FQLFNBQVUsT0FDUSxJQUFaL0IsSUFDVHROLEtBQUttUCxpQkFBbUJuUCxLQUFLc04sUUFDN0J0TixLQUFLc04sUUFBVUEsR0FFYnROLEtBQUs4SyxVQUFVL0osT0FBUyxHQUMxQmYsS0FBS3NQLEtBQUt0UCxLQUFLOEssVUFBVTlKLFVBeUI3QnlPLEtBQU0sU0FBU2hLLEVBQVUwRSxFQUFTdEIsR0FDaEMsSUFBSWdCLEVBQVU3SixLQUNkLE9BQU9BLEtBQUtzUCxNQUFLLFdBQ2YsSUFBSUksRUFBY0MsRUFBUUMsRUFRMUIsT0FQSTNRLEVBQVlrTCxJQUNkdEIsRUFBV3NCLEVBQ1hBLEVBQVUsSUFFVkEsRUFBVTFMLEVBQUVxRCxPQUFPLEdBQUlxSSxHQUVyQnRCLEdBQVk3SSxLQUFLc1AsS0FBS3pHLEdBQ0YsaUJBQWJwRCxHQUVUbUssRUFBZ0JuSyxFQUFTdkIsTUFBTSxpQkFBbUJpRyxFQUFROUgsS0FDMURxTixFQUFlRSxHQUE0QixJQUFsQnpGLEVBQVEwRixPQUFtQyxJQUFsQjFGLEVBQVEwRixNQUMxRGhHLEVBQVF1RixZQUFjdkYsRUFBUXFGLGNBQWNZLFVBQVVySyxVQUMvQzBFLEVBQVEwRixhQUNSMUYsRUFBUTlILEtBQ1g4SCxFQUFRNEYsU0FDVmxHLEVBQVF1RixZQUFjakYsRUFBUTRGLGNBQ3ZCNUYsRUFBUTRGLFFBRWJMLElBQWlCQyxFQUFTM1AsS0FBS2tQLGNBQWN2TyxJQUFJOE0sY0FBY2hJLElBQzFEa0ssR0FFVDNQLEtBQUt1UCxPQUNMOVEsRUFBRXVSLEtBQUt2UixFQUFFcUQsT0FBTyxDQUNkbU8sSUFBS3hLLEVBQ0xrQyxLQUFNLEdBQ051SSxTQUFVTixFQUFVLE9BQVMsT0FDN0I5RixLQUFNLE1BQ05xRyxRQUFTLFNBQVN4SSxHQUNaK0gsR0FDRjdGLEVBQVFxRixjQUFjdk8sSUFBSThNLGNBQWNoSSxFQUFVa0MsR0FFcERrQyxFQUFRMkYsS0FBSzdILEtBRWR3QyxLQUNJLElBR0gxRSxFQUFTMkssU0FDSjNLLEVBQVM0SyxVQUVkNUssRUFBUzdFLFVBRVhpSixFQUFRdUYsWUFBYzNKLEVBQVNqQyxLQUFLLGdCQUNkLElBQWxCMkcsRUFBUW1HLE1BQ0g3SyxFQUFTOEssU0FBUyxHQUFHRixVQUFVbFIsV0FFL0JzRyxFQUFTLEdBQUc0SyxVQUFVbFIsaUJBTmpDLE1BbUJOcVIsYUFBYyxTQUFTQyxHQUNyQixJQUFJelQsRUFDSixHQUFHeVQsRUFFRCxJQUFJelQsS0FESmdELEtBQUt5USxTQUFXelEsS0FBS3lRLFVBQVksR0FDckJBLEdBQ1YsU0FBVTVHLEVBQVM3TSxHQUNqQjZNLEVBQVE0RixLQUFLZ0IsRUFBU3pULElBQ2RzUyxNQUFLLFNBQVNvQixHQUNiMVEsS0FBS3lRLFNBQVN6VCxHQUFRMFQsS0FIakMsQ0FLRzFRLEtBQU1oRCxHQUdiLE9BQU9nRCxNQXNCVDJRLE9BQVEsU0FBU2xMLEVBQVVrQyxFQUFNa0IsRUFBVTRILEdBQ3pDLE9BQUl4UixFQUFZd0csS0FBY2tDLEVBRXJCM0gsS0FBS3NQLEtBQUs3SixJQUVkeEcsRUFBWTBJLElBRWI4SSxFQUFXNUgsRUFDWEEsRUFBV2xCLEVBQ1hBLEVBQU8sTUFDQ2tCLElBQWE1SixFQUFZNEosS0FFakM0SCxFQUFXNUgsRUFDWEEsRUFBVyxNQUdON0ksS0FBS3dRLGFBQWFDLEdBQ2JoQixLQUFLaEssR0FDTG1MLFlBQVlqSixFQUFNbEMsR0FDbEI2SixLQUFLekcsS0FNckJnSSxRQUFTLFNBQVNwTCxFQUFVa0MsRUFBTWtCLEVBQVU0SCxHQUMxQyxPQUFJeFIsRUFBWTRKLEdBRVA3SSxLQUFLMlEsT0FBT2xMLEVBQVVrQyxFQUFNOEksR0FBVXBELEtBQUt4RSxHQUN6QzVKLEVBQVkwSSxHQUVkM0gsS0FBSzJRLE9BQU9sTCxFQUFVLEdBQUlvRCxHQUFVd0UsS0FBSzFGLEdBR3pDM0gsS0FBSzJRLE9BQU9sTCxFQUFVa0MsRUFBTWtCLEdBQVV3RSxRQWtCakR5RCxLQUFNLFdBQ0osSUFBSWpILEVBQVU3SixLQUNWYSxFQUFPaEMsRUFBV3VCLFdBQ2xCMlEsRUFBT2xRLEVBQUtHLFFBSWhCLE9BRkk1QixFQUFTeUIsRUFBSyxNQUFPQSxFQUFPQSxFQUFLLElBRTlCYixLQUFLc1AsTUFBSyxTQUFTaEMsR0FJeEIsT0FIQXpNLEVBQUtZLE1BQUssU0FBU3VQLEdBQVluSCxFQUFRMkYsS0FBS3dCLE1BQzVDbkgsRUFBUTBGLE9BQ1J3QixFQUFJN1EsTUFBTTZRLEVBQUtsUSxJQUNSLE1BUVhvUSxRQUFTLFNBQVNDLEVBQU9ySSxFQUFVc0ksR0FDakMsSUFBSXRILEVBQVU3SixLQUNWb1IsRUFBTyxXQUNMblMsRUFBWWlTLEtBQ2RySSxFQUFXcUksRUFDWEEsRUFBUWxSLEtBQUtzTixTQUVmLElBQUkrRCxFQUFXLEdBQUlDLEdBQU8sRUFVMUIsT0FUQTdTLEVBQUUwQyxLQUFLK1AsR0FBTyxTQUFTelUsRUFBRzhVLEdBQ3hCLElBQUl0RixFQUFXcEQsRUFBUzNJLE1BQU0ySixFQUFTLENBQUNwTixFQUFHOFUsSUFNM0MsT0FMSXRGLEVBQVN1RixRQUE2QixHQUFuQnZGLEVBQVNsTCxTQUM5QmtMLEVBQVdBLEVBQVMsR0FDcEJxRixHQUFPLEdBRVRELEVBQVM1UCxLQUFLd0ssR0FDUEEsS0FFRnFGLEVBQU9ELEVBQVdBLEVBQVN2TyxLQUFLLEtBRXpDLE9BQU9xTyxFQUFNQyxJQUFTcFIsS0FBS3NQLEtBQUs4QixJQU1sQ0ssV0FBWSxTQUFTaE0sRUFBVXpJLEVBQU0ySyxFQUFNa0IsR0FNekMsT0FMSXpKLEVBQVNwQyxLQUNYNkwsRUFBV2xCLEVBQ1hBLEVBQU8zSyxFQUNQQSxFQUFPLE1BRUZnRCxLQUFLeVAsS0FBS2hLLEdBQVU2SixNQUFLLFNBQVNoQyxHQUNyQyxJQUFJb0UsRUFBTzFSLEtBSVgsR0FISzJILElBQ0hBLEVBQU92SSxFQUFTWSxLQUFLbVAsa0JBQW9CblAsS0FBS21QLGlCQUFtQixLQUUvRHRHLEVBV0YsT0FBTzdJLEtBQUtpUixRQUFRdEosR0FBTSxTQUFTbEwsRUFBR2lCLEdBQ3BDLElBQUlpVSxFQUFRLEdBQUk1QixFQUFTL1AsS0FBS29QLGFBQWUzSixFQU03QyxPQUxJekksRUFDRjJVLEVBQU0zVSxHQUFRVSxFQUVkaVUsRUFBUWpVLEVBRUhzQyxLQUFLa1AsY0FBYzBCLFlBQVl0RCxFQUFTcUUsRUFBTzVCLE1BQ3JELEdBbEJIdFIsRUFBRTBDLEtBQUt3RyxHQUFNLFNBQVNsTCxFQUFHaUIsR0FDdkIsSUFBSWlVLEVBQVEsR0FBSTVCLEVBQVMvUCxLQUFLb1AsYUFBZTNKLEVBQ3pDekksRUFDRjJVLEVBQU0zVSxHQUFRVSxFQUVkaVUsRUFBUWpVLEVBRVZtTCxFQUFTbkwsRUFBT2dVLEVBQUt4QyxjQUFjMEIsWUFBWXRELEVBQVNxRSxFQUFPNUIsV0FxQnpFYSxZQUFhLFNBQVNqSixFQUFNb0ksRUFBUTZCLEdBQ2xDLElBQUkvSCxFQUFVN0osS0FDZCxPQUFPQSxLQUFLc1AsTUFBSyxTQUFTaEMsRUFBU3VFLElBQzVCbEssR0FBUWtLLElBQVFsSyxFQUFPa0ssR0FDeEI3UixLQUFLb1AsY0FDUFcsRUFBUy9QLEtBQUtvUCxZQUNkcFAsS0FBS29QLGFBQWMsR0FFckIsSUFBSTBDLEVBQVdqSSxFQUFRcUYsY0FBYzBCLFlBQVl0RCxFQUFTM0YsRUFBTW9JLEVBQVEvUCxLQUFLeVEsVUFDN0UsT0FBT21CLEVBQVNDLEVBQU9DLEVBQVdBLE1BS3RDekUsS0FBTSxTQUFTeEUsR0FDYixPQUFPN0ksS0FBS3NQLE1BQUssU0FBU2hDLEdBRXhCLE9BREF0TixLQUFLa1AsY0FBYzdCLEtBQUtDLEVBQVN6RSxHQUMxQnlFLEtBQ056SSxRQUFRLFVBQVcsS0FJeEJrTixTQUFVLFNBQVNuUixHQUNqQixPQUFPWixLQUFLc1AsTUFBSyxTQUFTaEMsR0FDeEI3TyxFQUFFbUMsR0FBVW9SLE9BQU8xRSxNQUNsQnpJLFFBQVEsVUFBVyxLQUl4Qm9OLFVBQVcsU0FBU3JSLEdBQ2xCLE9BQU9aLEtBQUtzUCxNQUFLLFNBQVNoQyxHQUN4QjdPLEVBQUVtQyxHQUFVc1IsUUFBUTVFLE1BQ25CekksUUFBUSxVQUFXLEtBS3hCcEYsUUFBUyxTQUFTbUIsR0FDaEIsT0FBT1osS0FBS3NQLE1BQUssU0FBU2hDLEdBQ3hCN08sRUFBRW1DLEdBQVU0TSxLQUFLRixNQUNoQnpJLFFBQVEsVUFBVyxLQU14QkEsUUFBUyxTQUFTN0gsRUFBTTJLLEdBQ3RCLE9BQU8zSCxLQUFLc1AsTUFBSyxTQUFTaEMsR0FHeEIsWUFGbUIsSUFBUjNGLElBQXVCQSxFQUFPLENBQUMyRixRQUFTQSxJQUNuRHROLEtBQUtrUCxjQUFjckssUUFBUTdILEVBQU0ySyxHQUMxQjJGLFFBcUNiNU8sRUFBTTRJLGFBQWUsU0FBUzNHLEVBQUtaLEVBQU1vRyxFQUFNc0YsRUFBUXBJLEdBQ3JEckQsS0FBS1csSUFBU0EsRUFDZFgsS0FBS0QsS0FBU0EsRUFDZEMsS0FBS21HLEtBQVNBLEVBQ2RuRyxLQUFLeUwsT0FBUyxJQUFJL00sRUFBTXZCLE9BQU9zTyxHQUMvQnpMLEtBQUtxRCxPQUFTQSxHQUdoQjNFLEVBQU00SSxhQUFhakosVUFBWUksRUFBRXFELE9BQU8sR0FBSXBELEVBQU12QixPQUFPa0IsVUFBVyxDQUdsRThKLFNBQVUsV0FDUixPQUFPbkksS0FBS1csSUFBSXdILFNBQVN0SixFQUFXdUIsV0FBV1ksVUFhakQ4TyxVQUFXLFNBQVNDLEdBQ2xCLElBQW9Cb0MsRUFFcEIsT0FBSWxULEVBQVk4USxHQUFrQkEsSUFHN0JvQyxHQURMcEMsR0FBVUEsR0FKSS9QLEtBSWNXLElBQUl1SCxpQkFBaUIvSSxZQUN0QitFLE1BQU0sMkJBQy9CNkwsRUFBU29DLEVBQWEsSUFHcEJwQyxHQUFVOVEsRUFUQWUsS0FTb0IrUCxJQVRwQi9QLEtBVUcrUCxHQVZIL1AsS0FhRlcsSUFBSXVILGdCQUNQbEksS0FBSzhQLFVBZEE5UCxLQWNrQlcsSUFBSXVILGlCQUU3QixTQUFTb0YsRUFBUzNGLEdBQVEsT0FBTzJGLEtBSzFDc0QsWUFBYSxTQUFTdEQsRUFBUzNGLEVBQU1vSSxFQUFRVSxHQUMzQyxPQUFPelEsS0FBSzhQLFVBQVVDLEdBQVE3UCxNQUFNRixLQUFNLENBQUNzTixFQUFTM0YsRUFBTThJLEtBZ0I1REUsT0FBUSxTQUFTbEwsRUFBVWtDLEVBQU1rQixFQUFVNEgsR0FDekMsT0FBTyxJQUFJL1IsRUFBTXVRLGNBQWNqUCxNQUFNMlEsT0FBT2xMLEVBQVVrQyxFQUFNa0IsRUFBVTRILElBMEJ4RWdCLFdBQVksU0FBU2hNLEVBQVV6SSxFQUFNMkssRUFBTWtCLEdBQ3pDLE9BQU8sSUFBSW5LLEVBQU11USxjQUFjalAsTUFBTXlSLFdBQVdoTSxFQUFVekksRUFBTTJLLEVBQU1rQixJQU14RTRHLEtBQU0sU0FBU2hLLEVBQVUwRSxFQUFTdEIsR0FDaEMsT0FBTyxJQUFJbkssRUFBTXVRLGNBQWNqUCxNQUFNeVAsS0FBS2hLLEVBQVUwRSxFQUFTdEIsSUFJL0QySCxhQUFjLFNBQVNDLEdBQ3JCLE9BQU8sSUFBSS9SLEVBQU11USxjQUFjalAsTUFBTXdRLGFBQWFDLElBS3BESSxRQUFTLFNBQVNwTCxFQUFVa0MsRUFBTWtCLEVBQVU0SCxHQUMxQyxPQUFPLElBQUkvUixFQUFNdVEsY0FBY2pQLE1BQU02USxRQUFRcEwsRUFBVWtDLEVBQU1rQixFQUFVNEgsSUFLekVLLEtBQU0sV0FDSixJQUFJWSxFQUFPLElBQUloVCxFQUFNdVEsY0FBY2pQLE1BQ25DLE9BQU8wUixFQUFLWixLQUFLNVEsTUFBTXdSLEVBQU10UixZQWEvQmdTLFNBQVUsV0FDUixJQUFJQyxFQUFJeFIsRUFBT2hDLEVBQVd1QixXQUN0Qm1HLEVBQW1CdkcsS0FBS1csSUFBSXFGLGNBQzVCdEosRUFBSW1FLEVBQUtFLE9BQ2IsR0FBSXJFLEVBQUksRUFBRyxDQUVULElBREEsSUFBSUQsRUFBSSxFQUFHNlYsRUFBUSxHQUFJeEQsRUFBUSxHQUFJckQsRUFBUyxHQUFJOEcsR0FBYSxFQUN0RDlWLEVBQUlDLEVBQUdELElBQ1UsaUJBQVhvRSxFQUFLcEUsR0FDZDZWLEVBQU03USxLQUFLWixFQUFLcEUsS0FFaEJnQyxFQUFFcUQsT0FBTzJKLEVBQVE1SyxFQUFLcEUsSUFDdEI4VixHQUFhLEdBSWpCLEdBREFGLEVBQUtDLEVBQU14UCxLQUFLLEtBQ1p5UCxFQUFZLENBQ2QsSUFBSyxJQUFJalEsS0FBS21KLEVBQ1pxRCxFQUFNck4sS0FBS3pCLEtBQUtXLElBQUkrTixnQkFBZ0JwTSxFQUFHbUosRUFBT25KLEtBRWhEK1AsR0FBTSxJQUFNdkQsRUFBTWhNLEtBQUssV0FHekJ1UCxFQUFLeFIsRUFBSyxHQUVaYixLQUFLNkUsUUFBUSxXQUFZLENBQUN3TixHQUFJQSxJQUM5QnJTLEtBQUtXLElBQUlzSixjQUFnQixDQUFDakssS0FBS0QsS0FBTUMsS0FBS21HLE1BQzFDbkcsS0FBS1csSUFBSWlGLFlBQVl5TSxHQUNqQixJQUFJbkosT0FBT21KLEdBQUluTSxLQUFLSyxJQUN0QnZHLEtBQUtXLElBQUlrRSxRQUFRLHFCQUtyQkEsUUFBUyxTQUFTN0gsRUFBTTJLLEdBR3RCLFlBRm1CLElBQVJBLElBQXVCQSxFQUFPLElBQ3BDQSxFQUFLa0MsVUFBV2xDLEVBQUtrQyxRQUFVN0osTUFDN0JBLEtBQUtXLElBQUlrRSxRQUFRN0gsRUFBTTJLLElBSWhDbkQsZUFBZ0IsV0FDZCxPQUFPeEUsS0FBS1csSUFBSTZELGtCQUlsQjZJLEtBQU0sU0FBU2dFLEVBQVV4SSxHQUN2QixPQUFPN0ksS0FBS1csSUFBSTBNLEtBQUtnRSxFQUFVeEksSUFJakMwRCxTQUFVLFdBQ1IsT0FBT3ZNLEtBQUtXLElBQUk0TCxTQUFTdk0sS0FBS0QsS0FBTUMsS0FBS21HLE9BSzNDOUQsS0FBTSxTQUFTbVEsR0FDYixPQUFPL1QsRUFBRWdVLFVBQVVELElBSXJCclQsU0FBVSxXQUNSLE1BQU8sdUJBQXlCLENBQUNhLEtBQUtELEtBQU1DLEtBQUttRyxLQUFNbkcsS0FBS3lMLFFBQVEzSSxLQUFLLFFBS3RFcEUsSUFqbUVxQixnQyxnQkNUOUI7Ozs7Ozs7Ozs7Ozs7SUFhQSxTQUFZZ1UsRUFBUUMsR0FFbkIsYUFFNkQsaUJBQW5CblcsRUFBT0QsUUFTaERDLEVBQU9ELFFBQVVtVyxFQUFPM04sU0FDdkI0TixFQUFTRCxHQUFRLEdBQ2pCLFNBQVVFLEdBQ1QsSUFBTUEsRUFBRTdOLFNBQ1AsTUFBTSxJQUFJK0ksTUFBTyw0Q0FFbEIsT0FBTzZFLEVBQVNDLElBR2xCRCxFQUFTRCxHQXRCWCxDQTBCdUIsb0JBQVhuUyxPQUF5QkEsT0FBU1AsTUFBTSxTQUFVTyxFQUFRc1MsR0FNdEUsYUFFQSxJQUFJQyxFQUFNLEdBRU5DLEVBQVc1VixPQUFPNlYsZUFFbEJoVSxFQUFROFQsRUFBSTlULE1BRVppVSxFQUFPSCxFQUFJRyxLQUFPLFNBQVUvQixHQUMvQixPQUFPNEIsRUFBSUcsS0FBS3JXLEtBQU1zVSxJQUNuQixTQUFVQSxHQUNiLE9BQU80QixFQUFJM1MsT0FBT0QsTUFBTyxHQUFJZ1IsSUFJMUJ6UCxFQUFPcVIsRUFBSXJSLEtBRVgyTCxFQUFVMEYsRUFBSTFGLFFBRWQ4RixFQUFhLEdBRWIvVCxFQUFXK1QsRUFBVy9ULFNBRXRCZ1UsRUFBU0QsRUFBVzVVLGVBRXBCOFUsRUFBYUQsRUFBT2hVLFNBRXBCa1UsRUFBdUJELEVBQVd4VyxLQUFNTyxRQUV4Q21XLEVBQVUsR0FFVnRSLEVBQWEsU0FBcUI5QyxHQU1oQyxNQUFzQixtQkFBUkEsR0FBOEMsaUJBQWpCQSxFQUFJa1IsVUFJakRtRCxFQUFXLFNBQW1CclUsR0FDaEMsT0FBYyxNQUFQQSxHQUFlQSxJQUFRQSxFQUFJcUIsUUFJaEN3RSxFQUFXeEUsRUFBT3dFLFNBSWpCeU8sRUFBNEIsQ0FDL0IxSixNQUFNLEVBQ04ySixLQUFLLEVBQ0xDLE9BQU8sRUFDUEMsVUFBVSxHQUdYLFNBQVNDLEVBQVNDLEVBQU1DLEVBQU1DLEdBRzdCLElBQUl0WCxFQUFHMFIsRUFDTjZGLEdBSERELEVBQU1BLEdBQU9oUCxHQUdDUSxjQUFlLFVBRzdCLEdBREF5TyxFQUFPQyxLQUFPSixFQUNUQyxFQUNKLElBQU1yWCxLQUFLK1csR0FZVnJGLEVBQU0yRixFQUFNclgsSUFBT3FYLEVBQUsxRixjQUFnQjBGLEVBQUsxRixhQUFjM1IsS0FFMUR1WCxFQUFPRSxhQUFjelgsRUFBRzBSLEdBSTNCNEYsRUFBSUksS0FBS0MsWUFBYUosR0FBU0ssV0FBV0MsWUFBYU4sR0FJekQsU0FBU08sRUFBUXJWLEdBQ2hCLE9BQVksTUFBUEEsRUFDR0EsRUFBTSxHQUlRLGlCQUFSQSxHQUFtQyxtQkFBUkEsRUFDeENnVSxFQUFZL1QsRUFBU3ZDLEtBQU1zQyxLQUFXLGdCQUMvQkEsRUFRVCxJQUlDc1YsRUFBUyxTQUFVNVQsRUFBVWlKLEdBSTVCLE9BQU8sSUFBSTJLLEVBQU9DLEdBQUdDLEtBQU05VCxFQUFVaUosSUEwVnZDLFNBQVM4SyxFQUFhelYsR0FNckIsSUFBSTZCLElBQVc3QixHQUFPLFdBQVlBLEdBQU9BLEVBQUk2QixPQUM1QytJLEVBQU95SyxFQUFRclYsR0FFaEIsT0FBSzhDLEVBQVk5QyxLQUFTcVUsRUFBVXJVLEtBSXBCLFVBQVQ0SyxHQUErQixJQUFYL0ksR0FDUixpQkFBWEEsR0FBdUJBLEVBQVMsR0FBT0EsRUFBUyxLQUFPN0IsR0FyV2hFc1YsRUFBT0MsR0FBS0QsRUFBT25XLFVBQVksQ0FHOUJtVCxPQWJVLFFBZVZ6SSxZQUFheUwsRUFHYnpULE9BQVEsRUFFUjZULFFBQVMsV0FDUixPQUFPNVYsRUFBTXBDLEtBQU1vRCxPQUtwQjFDLElBQUssU0FBVXVYLEdBR2QsT0FBWSxNQUFQQSxFQUNHN1YsRUFBTXBDLEtBQU1vRCxNQUliNlUsRUFBTSxFQUFJN1UsS0FBTTZVLEVBQU03VSxLQUFLZSxRQUFXZixLQUFNNlUsSUFLcERDLFVBQVcsU0FBVUMsR0FHcEIsSUFBSXBILEVBQU02RyxFQUFPUSxNQUFPaFYsS0FBSytJLGNBQWVnTSxHQU01QyxPQUhBcEgsRUFBSXNILFdBQWFqVixLQUdWMk4sR0FJUnhNLEtBQU0sU0FBVTBILEdBQ2YsT0FBTzJMLEVBQU9yVCxLQUFNbkIsS0FBTTZJLElBRzNCcU0sSUFBSyxTQUFVck0sR0FDZCxPQUFPN0ksS0FBSzhVLFVBQVdOLEVBQU9VLElBQUtsVixNQUFNLFNBQVVtVixFQUFNMVksR0FDeEQsT0FBT29NLEVBQVNqTSxLQUFNdVksRUFBTTFZLEVBQUcwWSxRQUlqQ25XLE1BQU8sV0FDTixPQUFPZ0IsS0FBSzhVLFVBQVc5VixFQUFNa0IsTUFBT0YsS0FBTUksYUFHM0NnVixNQUFPLFdBQ04sT0FBT3BWLEtBQUtxVixHQUFJLElBR2pCQyxLQUFNLFdBQ0wsT0FBT3RWLEtBQUtxVixJQUFLLElBR2xCRSxLQUFNLFdBQ0wsT0FBT3ZWLEtBQUs4VSxVQUFXTixFQUFPZ0IsS0FBTXhWLE1BQU0sU0FBVXlWLEVBQU9oWixHQUMxRCxPQUFTQSxFQUFJLEdBQU0sT0FJckJpWixJQUFLLFdBQ0osT0FBTzFWLEtBQUs4VSxVQUFXTixFQUFPZ0IsS0FBTXhWLE1BQU0sU0FBVXlWLEVBQU9oWixHQUMxRCxPQUFPQSxFQUFJLE9BSWI0WSxHQUFJLFNBQVU1WSxHQUNiLElBQUlxUSxFQUFNOU0sS0FBS2UsT0FDZDRVLEdBQUtsWixHQUFNQSxFQUFJLEVBQUlxUSxFQUFNLEdBQzFCLE9BQU85TSxLQUFLOFUsVUFBV2EsR0FBSyxHQUFLQSxFQUFJN0ksRUFBTSxDQUFFOU0sS0FBTTJWLElBQVEsS0FHNURDLElBQUssV0FDSixPQUFPNVYsS0FBS2lWLFlBQWNqVixLQUFLK0ksZUFLaEN0SCxLQUFNQSxFQUNOb1UsS0FBTS9DLEVBQUkrQyxLQUNWQyxPQUFRaEQsRUFBSWdELFFBR2J0QixFQUFPMVMsT0FBUzBTLEVBQU9DLEdBQUczUyxPQUFTLFdBQ2xDLElBQUlxSSxFQUFTbk4sRUFBTXlXLEVBQUtzQyxFQUFNQyxFQUFhMUYsRUFDMUNqTixFQUFTakQsVUFBVyxJQUFPLEdBQzNCM0QsRUFBSSxFQUNKc0UsRUFBU1gsVUFBVVcsT0FDbkJrVixHQUFPLEVBc0JSLElBbkJ1QixrQkFBWDVTLElBQ1g0UyxFQUFPNVMsRUFHUEEsRUFBU2pELFVBQVczRCxJQUFPLEdBQzNCQSxLQUlzQixpQkFBWDRHLEdBQXdCckIsRUFBWXFCLEtBQy9DQSxFQUFTLElBSUw1RyxJQUFNc0UsSUFDVnNDLEVBQVNyRCxLQUNUdkQsS0FHT0EsRUFBSXNFLEVBQVF0RSxJQUduQixHQUFxQyxPQUE5QjBOLEVBQVUvSixVQUFXM0QsSUFHM0IsSUFBTU8sS0FBUW1OLEVBQ2I0TCxFQUFPNUwsRUFBU25OLEdBSUYsY0FBVEEsR0FBd0JxRyxJQUFXMFMsSUFLbkNFLEdBQVFGLElBQVV2QixFQUFPMEIsY0FBZUgsS0FDMUNDLEVBQWNqWCxNQUFNa0QsUUFBUzhULE1BQy9CdEMsRUFBTXBRLEVBQVFyRyxHQUlic1QsRUFESTBGLElBQWdCalgsTUFBTWtELFFBQVN3UixHQUMzQixHQUNJdUMsR0FBZ0J4QixFQUFPMEIsY0FBZXpDLEdBRzFDQSxFQUZBLEdBSVR1QyxHQUFjLEVBR2QzUyxFQUFRckcsR0FBU3dYLEVBQU8xUyxPQUFRbVUsRUFBTTNGLEVBQU95RixTQUd6QkksSUFBVEosSUFDWDFTLEVBQVFyRyxHQUFTK1ksSUFPckIsT0FBTzFTLEdBR1JtUixFQUFPMVMsT0FBUSxDQUdkc1UsUUFBUyxVQWxMQyxRQWtMc0JqUCxLQUFLQyxVQUFXM0gsUUFBUyxNQUFPLElBR2hFNFcsU0FBUyxFQUVUL04sTUFBTyxTQUFVZ08sR0FDaEIsTUFBTSxJQUFJeEksTUFBT3dJLElBR2xCQyxLQUFNLGFBRU5MLGNBQWUsU0FBVWhYLEdBQ3hCLElBQUlzWCxFQUFPQyxFQUlYLFNBQU12WCxHQUFnQyxvQkFBekJDLEVBQVN2QyxLQUFNc0MsUUFJNUJzWCxFQUFRekQsRUFBVTdULEtBU0ssbUJBRHZCdVgsRUFBT3RELEVBQU92VyxLQUFNNFosRUFBTyxnQkFBbUJBLEVBQU16TixjQUNmcUssRUFBV3hXLEtBQU02WixLQUFXcEQsSUFHbEUzRyxjQUFlLFNBQVV4TixHQUN4QixJQUFJbEMsRUFFSixJQUFNQSxLQUFRa0MsRUFDYixPQUFPLEVBRVIsT0FBTyxHQUtSd1gsV0FBWSxTQUFVN0MsRUFBTTFKLEVBQVM0SixHQUNwQ0gsRUFBU0MsRUFBTSxDQUFFSCxNQUFPdkosR0FBV0EsRUFBUXVKLE9BQVNLLElBR3JENVMsS0FBTSxTQUFVakMsRUFBSzJKLEdBQ3BCLElBQUk5SCxFQUFRdEUsRUFBSSxFQUVoQixHQUFLa1ksRUFBYXpWLEdBRWpCLElBREE2QixFQUFTN0IsRUFBSTZCLE9BQ0x0RSxFQUFJc0UsSUFDcUMsSUFBM0M4SCxFQUFTak0sS0FBTXNDLEVBQUt6QyxHQUFLQSxFQUFHeUMsRUFBS3pDLElBRG5CQSxVQU1wQixJQUFNQSxLQUFLeUMsRUFDVixJQUFnRCxJQUEzQzJKLEVBQVNqTSxLQUFNc0MsRUFBS3pDLEdBQUtBLEVBQUd5QyxFQUFLekMsSUFDckMsTUFLSCxPQUFPeUMsR0FJUjZDLFVBQVcsU0FBVStRLEVBQUtuRyxHQUN6QixJQUFJZ0IsRUFBTWhCLEdBQVcsR0FhckIsT0FYWSxNQUFQbUcsSUFDQzZCLEVBQWF4WCxPQUFRMlYsSUFDekIwQixFQUFPUSxNQUFPckgsRUFDRSxpQkFBUm1GLEVBQ1AsQ0FBRUEsR0FBUUEsR0FHWHJSLEVBQUs3RSxLQUFNK1EsRUFBS21GLElBSVhuRixHQUdSdEMsUUFBUyxTQUFVOEosRUFBTXJDLEVBQUtyVyxHQUM3QixPQUFjLE1BQVBxVyxHQUFlLEVBQUkxRixFQUFReFEsS0FBTWtXLEVBQUtxQyxFQUFNMVksSUFLcER1WSxNQUFPLFNBQVVJLEVBQU91QixHQUt2QixJQUpBLElBQUk3SixHQUFPNkosRUFBTzVWLE9BQ2pCNFUsRUFBSSxFQUNKbFosRUFBSTJZLEVBQU1yVSxPQUVINFUsRUFBSTdJLEVBQUs2SSxJQUNoQlAsRUFBTzNZLEtBQVFrYSxFQUFRaEIsR0FLeEIsT0FGQVAsRUFBTXJVLE9BQVN0RSxFQUVSMlksR0FHUkksS0FBTSxTQUFVVCxFQUFPbE0sRUFBVStOLEdBU2hDLElBUkEsSUFDQzNTLEVBQVUsR0FDVnhILEVBQUksRUFDSnNFLEVBQVNnVSxFQUFNaFUsT0FDZjhWLEdBQWtCRCxFQUlYbmEsRUFBSXNFLEVBQVF0RSxLQUNBb00sRUFBVWtNLEVBQU90WSxHQUFLQSxLQUNoQm9hLEdBQ3hCNVMsRUFBUXhDLEtBQU1zVCxFQUFPdFksSUFJdkIsT0FBT3dILEdBSVJpUixJQUFLLFNBQVVILEVBQU9sTSxFQUFVaU8sR0FDL0IsSUFBSS9WLEVBQVFyRCxFQUNYakIsRUFBSSxFQUNKa1IsRUFBTSxHQUdQLEdBQUtnSCxFQUFhSSxHQUVqQixJQURBaFUsRUFBU2dVLEVBQU1oVSxPQUNQdEUsRUFBSXNFLEVBQVF0RSxJQUdMLE9BRmRpQixFQUFRbUwsRUFBVWtNLEVBQU90WSxHQUFLQSxFQUFHcWEsS0FHaENuSixFQUFJbE0sS0FBTS9ELFFBTVosSUFBTWpCLEtBQUtzWSxFQUdJLE9BRmRyWCxFQUFRbUwsRUFBVWtNLEVBQU90WSxHQUFLQSxFQUFHcWEsS0FHaENuSixFQUFJbE0sS0FBTS9ELEdBTWIsT0FBT3VWLEVBQU10RixJQUlkb0osS0FBTSxFQUlOekQsUUFBU0EsSUFHYSxtQkFBWDlWLFNBQ1hnWCxFQUFPQyxHQUFJalgsT0FBT3daLFVBQWFsRSxFQUFLdFYsT0FBT3daLFdBSTVDeEMsRUFBT3JULEtBQU0sdUVBQXVFNk4sTUFBTyxNQUMzRixTQUFVaUksRUFBSWphLEdBQ2JrVyxFQUFZLFdBQWFsVyxFQUFPLEtBQVFBLEVBQUs4TCxpQkFtQjlDLElBQUlvTzs7Ozs7Ozs7Ozs7QUFXSixTQUFZM1csR0FDWixJQUFJOUQsRUFDSDZXLEVBQ0E2RCxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUdBQyxFQUNBN1MsRUFDQThTLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0EvVCxFQUNBZ1UsRUFHQTdCLEVBQVUsU0FBVyxFQUFJLElBQUl4VSxLQUM3QnNXLEVBQWUzWCxFQUFPd0UsU0FDdEJvVCxFQUFVLEVBQ1ZDLEVBQU8sRUFDUEMsRUFBYUMsS0FDYkMsRUFBYUQsS0FDYkUsRUFBZ0JGLEtBQ2hCRyxFQUF5QkgsS0FDekJJLEVBQVksU0FBVXRULEVBQUd1VCxHQUl4QixPQUhLdlQsSUFBTXVULElBQ1ZoQixHQUFlLEdBRVQsR0FJUnhFLEVBQVMsR0FBTzdVLGVBQ2hCd1UsRUFBTSxHQUNOOEYsRUFBTTlGLEVBQUk4RixJQUNWQyxFQUFhL0YsRUFBSXJSLEtBQ2pCQSxFQUFPcVIsRUFBSXJSLEtBQ1h6QyxFQUFROFQsRUFBSTlULE1BSVpvTyxFQUFVLFNBQVUwTCxFQUFNM0QsR0FHekIsSUFGQSxJQUFJMVksRUFBSSxFQUNQcVEsRUFBTWdNLEVBQUsvWCxPQUNKdEUsRUFBSXFRLEVBQUtyUSxJQUNoQixHQUFLcWMsRUFBTXJjLEtBQVEwWSxFQUNsQixPQUFPMVksRUFHVCxPQUFRLEdBR1RzYyxFQUFXLDZIQU1YQyxFQUFhLHNCQUdiQyxFQUFhLDBCQUE0QkQsRUFDeEMsMENBR0RFLEVBQWEsTUFBUUYsRUFBYSxLQUFPQyxFQUFhLE9BQVNELEVBRzlELGdCQUFrQkEsRUFJbEIsMkRBQTZEQyxFQUFhLE9BQzFFRCxFQUFhLE9BRWRHLEVBQVUsS0FBT0YsRUFBUCx3RkFPb0JDLEVBUHBCLGVBY1ZFLEVBQWMsSUFBSWxRLE9BQVE4UCxFQUFhLElBQUssS0FDNUNLLEVBQVEsSUFBSW5RLE9BQVEsSUFBTThQLEVBQWEsOEJBQ3RDQSxFQUFhLEtBQU0sS0FFcEJNLEVBQVMsSUFBSXBRLE9BQVEsSUFBTThQLEVBQWEsS0FBT0EsRUFBYSxLQUM1RE8sRUFBZSxJQUFJclEsT0FBUSxJQUFNOFAsRUFBYSxXQUFhQSxFQUFhLElBQU1BLEVBQzdFLEtBQ0RRLEVBQVcsSUFBSXRRLE9BQVE4UCxFQUFhLE1BRXBDUyxFQUFVLElBQUl2USxPQUFRaVEsR0FDdEJPLEVBQWMsSUFBSXhRLE9BQVEsSUFBTStQLEVBQWEsS0FFN0NVLEVBQVksQ0FDWCxHQUFNLElBQUl6USxPQUFRLE1BQVErUCxFQUFhLEtBQ3ZDLE1BQVMsSUFBSS9QLE9BQVEsUUFBVStQLEVBQWEsS0FDNUMsSUFBTyxJQUFJL1AsT0FBUSxLQUFPK1AsRUFBYSxTQUN2QyxLQUFRLElBQUkvUCxPQUFRLElBQU1nUSxHQUMxQixPQUFVLElBQUloUSxPQUFRLElBQU1pUSxHQUM1QixNQUFTLElBQUlqUSxPQUFRLHlEQUNwQjhQLEVBQWEsK0JBQWlDQSxFQUFhLGNBQzNEQSxFQUFhLGFBQWVBLEVBQWEsU0FBVSxLQUNwRCxLQUFRLElBQUk5UCxPQUFRLE9BQVM2UCxFQUFXLEtBQU0sS0FJOUMsYUFBZ0IsSUFBSTdQLE9BQVEsSUFBTThQLEVBQ2pDLG1EQUFxREEsRUFDckQsbUJBQXFCQSxFQUFhLG1CQUFvQixNQUd4RFksRUFBUSxTQUNSQyxFQUFVLHNDQUNWQyxFQUFVLFNBRVZDLEVBQVUseUJBR1ZDLEVBQWEsbUNBRWJDLEdBQVcsT0FJWEMsR0FBWSxJQUFJaFIsT0FBUSx1QkFBeUI4UCxFQUFhLHVCQUF3QixLQUN0Rm1CLEdBQVksU0FBVUMsRUFBUUMsR0FDN0IsSUFBSUMsRUFBTyxLQUFPRixFQUFPcGIsTUFBTyxHQUFNLE1BRXRDLE9BQU9xYixJQVNOQyxFQUFPLEVBQ056YSxPQUFPMGEsYUFBY0QsRUFBTyxPQUM1QnphLE9BQU8wYSxhQUFjRCxHQUFRLEdBQUssTUFBZSxLQUFQQSxFQUFlLFNBSzVERSxHQUFhLHNEQUNiQyxHQUFhLFNBQVVDLEVBQUlDLEdBQzFCLE9BQUtBLEVBR1EsT0FBUEQsRUFDRyxJQUlEQSxFQUFHMWIsTUFBTyxHQUFJLEdBQU0sS0FDMUIwYixFQUFHRSxXQUFZRixFQUFHM1osT0FBUyxHQUFJNUIsU0FBVSxJQUFPLElBSTNDLEtBQU91YixHQU9mRyxHQUFnQixXQUNmakQsS0FHRGtELEdBQXFCQyxJQUNwQixTQUFVNUYsR0FDVCxPQUF5QixJQUFsQkEsRUFBSzZGLFVBQXFELGFBQWhDN0YsRUFBSzhGLFNBQVNuUyxnQkFFaEQsQ0FBRW9TLElBQUssYUFBYzFMLEtBQU0sV0FJN0IsSUFDQy9OLEVBQUt2QixNQUNGNFMsRUFBTTlULEVBQU1wQyxLQUFNc2IsRUFBYWlELFlBQ2pDakQsRUFBYWlELFlBTWRySSxFQUFLb0YsRUFBYWlELFdBQVdwYSxRQUFTcVAsU0FDckMsTUFBUTNMLEdBQ1RoRCxFQUFPLENBQUV2QixNQUFPNFMsRUFBSS9SLE9BR25CLFNBQVVzQyxFQUFRK1gsR0FDakJ2QyxFQUFXM1ksTUFBT21ELEVBQVFyRSxFQUFNcEMsS0FBTXdlLEtBS3ZDLFNBQVUvWCxFQUFRK1gsR0FLakIsSUFKQSxJQUFJekYsRUFBSXRTLEVBQU90QyxPQUNkdEUsRUFBSSxFQUdLNEcsRUFBUXNTLEtBQVF5RixFQUFLM2UsT0FDL0I0RyxFQUFPdEMsT0FBUzRVLEVBQUksSUFLdkIsU0FBU3VCLEdBQVF0VyxFQUFVaUosRUFBUzhDLEVBQVMwTyxHQUM1QyxJQUFJeGUsRUFBR0osRUFBRzBZLEVBQU1tRyxFQUFLcFgsRUFBT3FYLEVBQVFDLEVBQ25DQyxFQUFhNVIsR0FBV0EsRUFBUTZSLGNBR2hDdEwsRUFBV3ZHLEVBQVVBLEVBQVF1RyxTQUFXLEVBS3pDLEdBSEF6RCxFQUFVQSxHQUFXLEdBR0ksaUJBQWIvTCxJQUEwQkEsR0FDeEIsSUFBYndQLEdBQStCLElBQWJBLEdBQStCLEtBQWJBLEVBRXBDLE9BQU96RCxFQUlSLElBQU0wTyxJQUNMekQsRUFBYS9OLEdBQ2JBLEVBQVVBLEdBQVc5RSxFQUVoQitTLEdBQWlCLENBSXJCLEdBQWtCLEtBQWIxSCxJQUFxQmxNLEVBQVE4VixFQUFXL1EsS0FBTXJJLElBR2xELEdBQU8vRCxFQUFJcUgsRUFBTyxJQUdqQixHQUFrQixJQUFia00sRUFBaUIsQ0FDckIsS0FBTytFLEVBQU90TCxFQUFROFIsZUFBZ0I5ZSxJQVVyQyxPQUFPOFAsRUFMUCxHQUFLd0ksRUFBS3lHLEtBQU8vZSxFQUVoQixPQURBOFAsRUFBUWxMLEtBQU0wVCxHQUNQeEksT0FZVCxHQUFLOE8sSUFBZ0J0RyxFQUFPc0csRUFBV0UsZUFBZ0I5ZSxLQUN0RG9iLEVBQVVwTyxFQUFTc0wsSUFDbkJBLEVBQUt5RyxLQUFPL2UsRUFHWixPQURBOFAsRUFBUWxMLEtBQU0wVCxHQUNQeEksTUFLSCxJQUFLekksRUFBTyxHQUVsQixPQURBekMsRUFBS3ZCLE1BQU95TSxFQUFTOUMsRUFBUWdTLHFCQUFzQmpiLElBQzVDK0wsRUFHRCxJQUFPOVAsRUFBSXFILEVBQU8sS0FBU29QLEVBQVF3SSx3QkFDekNqUyxFQUFRaVMsdUJBR1IsT0FEQXJhLEVBQUt2QixNQUFPeU0sRUFBUzlDLEVBQVFpUyx1QkFBd0JqZixJQUM5QzhQLEVBS1QsR0FBSzJHLEVBQVF5SSxNQUNYdEQsRUFBd0I3WCxFQUFXLFFBQ2pDbVgsSUFBY0EsRUFBVTdSLEtBQU10RixNQUlsQixJQUFid1AsR0FBcUQsV0FBbkN2RyxFQUFRb1IsU0FBU25TLGVBQStCLENBWXBFLEdBVkEwUyxFQUFjNWEsRUFDZDZhLEVBQWE1UixFQVNLLElBQWJ1RyxJQUNGb0osRUFBU3RULEtBQU10RixJQUFjMlksRUFBYXJULEtBQU10RixJQUFlLENBcUJqRSxLQWxCQTZhLEVBQWF4QixHQUFTL1QsS0FBTXRGLElBQWNvYixHQUFhblMsRUFBUXdLLGFBQzlEeEssS0FJbUJBLEdBQVl5SixFQUFRMkksU0FHaENYLEVBQU16UixFQUFRdUUsYUFBYyxPQUNsQ2tOLEVBQU1BLEVBQUk3YixRQUFTK2EsR0FBWUMsSUFFL0I1USxFQUFRcUssYUFBYyxLQUFRb0gsRUFBTWxGLElBTXRDM1osR0FEQThlLEVBQVNqRSxFQUFVMVcsSUFDUkcsT0FDSHRFLEtBQ1A4ZSxFQUFROWUsSUFBUTZlLEVBQU0sSUFBTUEsRUFBTSxVQUFhLElBQzlDWSxHQUFZWCxFQUFROWUsSUFFdEIrZSxFQUFjRCxFQUFPelksS0FBTSxLQUc1QixJQUlDLE9BSEFyQixFQUFLdkIsTUFBT3lNLEVBQ1g4TyxFQUFXVSxpQkFBa0JYLElBRXZCN08sRUFDTixNQUFReVAsR0FDVDNELEVBQXdCN1gsR0FBVSxHQUNqQyxRQUNJMGEsSUFBUWxGLEdBQ1p2TSxFQUFRd1MsZ0JBQWlCLFFBUTlCLE9BQU83RSxFQUFRNVcsRUFBU25CLFFBQVM0WixFQUFPLE1BQVF4UCxFQUFTOEMsRUFBUzBPLEdBU25FLFNBQVMvQyxLQUNSLElBQUk1VixFQUFPLEdBWVgsT0FWQSxTQUFTbU4sRUFBTzdSLEVBQUtOLEdBUXBCLE9BTEtnRixFQUFLakIsS0FBTXpELEVBQU0sS0FBUW1aLEVBQUttRixvQkFHM0J6TSxFQUFPbk4sRUFBSzFCLFNBRVg2TyxFQUFPN1IsRUFBTSxLQUFRTixHQVNoQyxTQUFTNmUsR0FBYzlILEdBRXRCLE9BREFBLEVBQUkyQixJQUFZLEVBQ1QzQixFQU9SLFNBQVMrSCxHQUFRL0gsR0FDaEIsSUFBSWdJLEVBQUsxWCxFQUFTUSxjQUFlLFlBRWpDLElBQ0MsUUFBU2tQLEVBQUlnSSxHQUNaLE1BQVFoWSxHQUNULE9BQU8sRUFDTixRQUdJZ1ksRUFBR3BJLFlBQ1BvSSxFQUFHcEksV0FBV0MsWUFBYW1JLEdBSTVCQSxFQUFLLE1BU1AsU0FBU0MsR0FBV0MsRUFBT0MsR0FJMUIsSUFIQSxJQUFJOUosRUFBTTZKLEVBQU0zTixNQUFPLEtBQ3RCdlMsRUFBSXFXLEVBQUkvUixPQUVEdEUsS0FDUDBhLEVBQUswRixXQUFZL0osRUFBS3JXLElBQVFtZ0IsRUFVaEMsU0FBU0UsR0FBYzFYLEVBQUd1VCxHQUN6QixJQUFJb0UsRUFBTXBFLEdBQUt2VCxFQUNkNFgsRUFBT0QsR0FBc0IsSUFBZjNYLEVBQUVnTCxVQUFpQyxJQUFmdUksRUFBRXZJLFVBQ25DaEwsRUFBRTZYLFlBQWN0RSxFQUFFc0UsWUFHcEIsR0FBS0QsRUFDSixPQUFPQSxFQUlSLEdBQUtELEVBQ0osS0FBVUEsRUFBTUEsRUFBSUcsYUFDbkIsR0FBS0gsSUFBUXBFLEVBQ1osT0FBUSxFQUtYLE9BQU92VCxFQUFJLEdBQUssRUFPakIsU0FBUytYLEdBQW1CclQsR0FDM0IsT0FBTyxTQUFVcUwsR0FFaEIsTUFBZ0IsVUFETEEsRUFBSzhGLFNBQVNuUyxlQUNFcU0sRUFBS3JMLE9BQVNBLEdBUTNDLFNBQVNzVCxHQUFvQnRULEdBQzVCLE9BQU8sU0FBVXFMLEdBQ2hCLElBQUluWSxFQUFPbVksRUFBSzhGLFNBQVNuUyxjQUN6QixPQUFrQixVQUFUOUwsR0FBNkIsV0FBVEEsSUFBdUJtWSxFQUFLckwsT0FBU0EsR0FRcEUsU0FBU3VULEdBQXNCckMsR0FHOUIsT0FBTyxTQUFVN0YsR0FLaEIsTUFBSyxTQUFVQSxFQVNUQSxFQUFLZCxhQUFnQyxJQUFsQmMsRUFBSzZGLFNBR3ZCLFVBQVc3RixFQUNWLFVBQVdBLEVBQUtkLFdBQ2JjLEVBQUtkLFdBQVcyRyxXQUFhQSxFQUU3QjdGLEVBQUs2RixXQUFhQSxFQU1wQjdGLEVBQUttSSxhQUFldEMsR0FJMUI3RixFQUFLbUksY0FBZ0J0QyxHQUNyQkYsR0FBb0IzRixLQUFXNkYsRUFHMUI3RixFQUFLNkYsV0FBYUEsRUFLZCxVQUFXN0YsR0FDZkEsRUFBSzZGLFdBQWFBLEdBWTVCLFNBQVN1QyxHQUF3QjlJLEdBQ2hDLE9BQU84SCxJQUFjLFNBQVVpQixHQUU5QixPQURBQSxHQUFZQSxFQUNMakIsSUFBYyxTQUFVbEIsRUFBTXBYLEdBTXBDLElBTEEsSUFBSTBSLEVBQ0g4SCxFQUFlaEosRUFBSSxHQUFJNEcsRUFBS3RhLE9BQVF5YyxHQUNwQy9nQixFQUFJZ2hCLEVBQWExYyxPQUdWdEUsS0FDRjRlLEVBQVExRixFQUFJOEgsRUFBY2hoQixNQUM5QjRlLEVBQU0xRixLQUFTMVIsRUFBUzBSLEdBQU0wRixFQUFNMUYsV0FZekMsU0FBU3FHLEdBQWFuUyxHQUNyQixPQUFPQSxRQUFtRCxJQUFqQ0EsRUFBUWdTLHNCQUF3Q2hTLEVBa3JDMUUsSUFBTXBOLEtBOXFDTjZXLEVBQVU0RCxHQUFPNUQsUUFBVSxHQU8zQitELEVBQVFILEdBQU9HLE1BQVEsU0FBVWxDLEdBQ2hDLElBQUluTyxFQUFZbU8sRUFBS3VJLGFBQ3BCN0YsR0FBWTFDLEVBQUt1RyxlQUFpQnZHLEdBQU93SSxnQkFLMUMsT0FBUS9ELEVBQU0xVCxLQUFNYyxHQUFhNlEsR0FBV0EsRUFBUW9ELFVBQVksU0FRakVyRCxFQUFjVixHQUFPVSxZQUFjLFNBQVU5RCxHQUM1QyxJQUFJOEosRUFBWUMsRUFDZjlKLEVBQU1ELEVBQU9BLEVBQUs0SCxlQUFpQjVILEVBQU9vRSxFQU8zQyxPQUFLbkUsR0FBT2hQLEdBQTZCLElBQWpCZ1AsRUFBSTNELFVBQW1CMkQsRUFBSTRKLGlCQU1uRDlGLEdBREE5UyxFQUFXZ1AsR0FDUTRKLGdCQUNuQjdGLEdBQWtCVCxFQUFPdFMsR0FRcEJtVCxHQUFnQm5ULElBQ2xCOFksRUFBWTlZLEVBQVMrWSxjQUFpQkQsRUFBVXBhLE1BQVFvYSxJQUdyREEsRUFBVUUsaUJBQ2RGLEVBQVVFLGlCQUFrQixTQUFVbEQsSUFBZSxHQUcxQ2dELEVBQVVHLGFBQ3JCSCxFQUFVRyxZQUFhLFdBQVluRCxLQVNyQ3ZILEVBQVEySSxNQUFRTyxJQUFRLFNBQVVDLEdBRWpDLE9BREE1RSxFQUFRekQsWUFBYXFJLEdBQUtySSxZQUFhclAsRUFBU1EsY0FBZSxhQUN6QixJQUF4QmtYLEVBQUdOLG1CQUNmTSxFQUFHTixpQkFBa0IsdUJBQXdCcGIsVUFTaER1UyxFQUFRNEYsV0FBYXNELElBQVEsU0FBVUMsR0FFdEMsT0FEQUEsRUFBR3dCLFVBQVksS0FDUHhCLEVBQUdyTyxhQUFjLGdCQU8xQmtGLEVBQVF1SSxxQkFBdUJXLElBQVEsU0FBVUMsR0FFaEQsT0FEQUEsRUFBR3JJLFlBQWFyUCxFQUFTbVosY0FBZSxNQUNoQ3pCLEVBQUdaLHFCQUFzQixLQUFNOWEsVUFJeEN1UyxFQUFRd0ksdUJBQXlCL0IsRUFBUTdULEtBQU1uQixFQUFTK1csd0JBTXhEeEksRUFBUTZLLFFBQVUzQixJQUFRLFNBQVVDLEdBRW5DLE9BREE1RSxFQUFRekQsWUFBYXFJLEdBQUtiLEdBQUt4RixHQUN2QnJSLEVBQVNxWixvQkFBc0JyWixFQUFTcVosa0JBQW1CaEksR0FBVXJWLFVBSXpFdVMsRUFBUTZLLFNBQ1poSCxFQUFLa0gsT0FBYSxHQUFJLFNBQVV6QyxHQUMvQixJQUFJMEMsRUFBUzFDLEVBQUduYyxRQUFTeWEsR0FBV0MsSUFDcEMsT0FBTyxTQUFVaEYsR0FDaEIsT0FBT0EsRUFBSy9HLGFBQWMsUUFBV2tRLElBR3ZDbkgsRUFBSy9PLEtBQVcsR0FBSSxTQUFVd1QsRUFBSS9SLEdBQ2pDLFFBQXVDLElBQTNCQSxFQUFROFIsZ0JBQWtDN0QsRUFBaUIsQ0FDdEUsSUFBSTNDLEVBQU90TCxFQUFROFIsZUFBZ0JDLEdBQ25DLE9BQU96RyxFQUFPLENBQUVBLEdBQVMsT0FJM0JnQyxFQUFLa0gsT0FBYSxHQUFLLFNBQVV6QyxHQUNoQyxJQUFJMEMsRUFBUzFDLEVBQUduYyxRQUFTeWEsR0FBV0MsSUFDcEMsT0FBTyxTQUFVaEYsR0FDaEIsSUFBSXJCLE9BQXdDLElBQTFCcUIsRUFBS29KLGtCQUN0QnBKLEVBQUtvSixpQkFBa0IsTUFDeEIsT0FBT3pLLEdBQVFBLEVBQUtwVyxRQUFVNGdCLElBTWhDbkgsRUFBSy9PLEtBQVcsR0FBSSxTQUFVd1QsRUFBSS9SLEdBQ2pDLFFBQXVDLElBQTNCQSxFQUFROFIsZ0JBQWtDN0QsRUFBaUIsQ0FDdEUsSUFBSWhFLEVBQU1yWCxFQUFHc1ksRUFDWkksRUFBT3RMLEVBQVE4UixlQUFnQkMsR0FFaEMsR0FBS3pHLEVBQU8sQ0FJWCxJQURBckIsRUFBT3FCLEVBQUtvSixpQkFBa0IsUUFDakJ6SyxFQUFLcFcsUUFBVWtlLEVBQzNCLE1BQU8sQ0FBRXpHLEdBTVYsSUFGQUosRUFBUWxMLEVBQVF1VSxrQkFBbUJ4QyxHQUNuQ25mLEVBQUksRUFDTTBZLEVBQU9KLEVBQU90WSxNQUV2QixJQURBcVgsRUFBT3FCLEVBQUtvSixpQkFBa0IsUUFDakJ6SyxFQUFLcFcsUUFBVWtlLEVBQzNCLE1BQU8sQ0FBRXpHLEdBS1osTUFBTyxNQU1WZ0MsRUFBSy9PLEtBQVksSUFBSWtMLEVBQVF1SSxxQkFDNUIsU0FBVTJDLEVBQUszVSxHQUNkLFlBQTZDLElBQWpDQSxFQUFRZ1MscUJBQ1poUyxFQUFRZ1MscUJBQXNCMkMsR0FHMUJsTCxFQUFReUksSUFDWmxTLEVBQVFzUyxpQkFBa0JxQyxRQUQzQixHQUtSLFNBQVVBLEVBQUszVSxHQUNkLElBQUlzTCxFQUNIc0osRUFBTSxHQUNOaGlCLEVBQUksRUFHSmtRLEVBQVU5QyxFQUFRZ1MscUJBQXNCMkMsR0FHekMsR0FBYSxNQUFSQSxFQUFjLENBQ2xCLEtBQVVySixFQUFPeEksRUFBU2xRLE1BQ0YsSUFBbEIwWSxFQUFLL0UsVUFDVHFPLEVBQUloZCxLQUFNMFQsR0FJWixPQUFPc0osRUFFUixPQUFPOVIsR0FJVHdLLEVBQUsvTyxLQUFjLE1BQUlrTCxFQUFRd0ksd0JBQTBCLFNBQVVtQyxFQUFXcFUsR0FDN0UsUUFBK0MsSUFBbkNBLEVBQVFpUyx3QkFBMENoRSxFQUM3RCxPQUFPak8sRUFBUWlTLHVCQUF3Qm1DLElBVXpDakcsRUFBZ0IsR0FPaEJELEVBQVksSUFFTHpFLEVBQVF5SSxJQUFNaEMsRUFBUTdULEtBQU1uQixFQUFTb1gscUJBSTNDSyxJQUFRLFNBQVVDLEdBRWpCLElBQUlpQyxFQU9KN0csRUFBUXpELFlBQWFxSSxHQUFLcE0sVUFBWSxVQUFZK0YsRUFBWixxQkFDcEJBLEVBRG9CLGtFQVFqQ3FHLEVBQUdOLGlCQUFrQix3QkFBeUJwYixRQUNsRGdYLEVBQVV0VyxLQUFNLFNBQVd1WCxFQUFhLGdCQUtuQ3lELEVBQUdOLGlCQUFrQixjQUFlcGIsUUFDekNnWCxFQUFVdFcsS0FBTSxNQUFRdVgsRUFBYSxhQUFlRCxFQUFXLEtBSTFEMEQsRUFBR04saUJBQWtCLFFBQVUvRixFQUFVLE1BQU9yVixRQUNyRGdYLEVBQVV0VyxLQUFNLE9BUWpCaWQsRUFBUTNaLEVBQVNRLGNBQWUsVUFDMUIyTyxhQUFjLE9BQVEsSUFDNUJ1SSxFQUFHckksWUFBYXNLLEdBQ1ZqQyxFQUFHTixpQkFBa0IsYUFBY3BiLFFBQ3hDZ1gsRUFBVXRXLEtBQU0sTUFBUXVYLEVBQWEsUUFBVUEsRUFBYSxLQUMzREEsRUFBYSxnQkFNVHlELEVBQUdOLGlCQUFrQixZQUFhcGIsUUFDdkNnWCxFQUFVdFcsS0FBTSxZQU1YZ2IsRUFBR04saUJBQWtCLEtBQU8vRixFQUFVLE1BQU9yVixRQUNsRGdYLEVBQVV0VyxLQUFNLFlBS2pCZ2IsRUFBR04saUJBQWtCLFFBQ3JCcEUsRUFBVXRXLEtBQU0sa0JBR2pCK2EsSUFBUSxTQUFVQyxHQUNqQkEsRUFBR3BNLFVBQVksb0ZBS2YsSUFBSXFPLEVBQVEzWixFQUFTUSxjQUFlLFNBQ3BDbVosRUFBTXhLLGFBQWMsT0FBUSxVQUM1QnVJLEVBQUdySSxZQUFhc0ssR0FBUXhLLGFBQWMsT0FBUSxLQUl6Q3VJLEVBQUdOLGlCQUFrQixZQUFhcGIsUUFDdENnWCxFQUFVdFcsS0FBTSxPQUFTdVgsRUFBYSxlQUtXLElBQTdDeUQsRUFBR04saUJBQWtCLFlBQWFwYixRQUN0Q2dYLEVBQVV0VyxLQUFNLFdBQVksYUFLN0JvVyxFQUFRekQsWUFBYXFJLEdBQUt6QixVQUFXLEVBQ2MsSUFBOUN5QixFQUFHTixpQkFBa0IsYUFBY3BiLFFBQ3ZDZ1gsRUFBVXRXLEtBQU0sV0FBWSxhQUs3QmdiLEVBQUdOLGlCQUFrQixRQUNyQnBFLEVBQVV0VyxLQUFNLGFBSVg2UixFQUFRcUwsZ0JBQWtCNUUsRUFBUTdULEtBQVFqQyxFQUFVNFQsRUFBUTVULFNBQ2xFNFQsRUFBUStHLHVCQUNSL0csRUFBUWdILG9CQUNSaEgsRUFBUWlILGtCQUNSakgsRUFBUWtILHFCQUVSdkMsSUFBUSxTQUFVQyxHQUlqQm5KLEVBQVEwTCxrQkFBb0IvYSxFQUFRckgsS0FBTTZmLEVBQUksS0FJOUN4WSxFQUFRckgsS0FBTTZmLEVBQUksYUFDbEJ6RSxFQUFjdlcsS0FBTSxLQUFNMFgsTUFJNUJwQixFQUFZQSxFQUFVaFgsUUFBVSxJQUFJbUksT0FBUTZPLEVBQVVqVixLQUFNLE1BQzVEa1YsRUFBZ0JBLEVBQWNqWCxRQUFVLElBQUltSSxPQUFROE8sRUFBY2xWLEtBQU0sTUFJeEU4YSxFQUFhN0QsRUFBUTdULEtBQU0yUixFQUFRb0gseUJBS25DaEgsRUFBVzJGLEdBQWM3RCxFQUFRN1QsS0FBTTJSLEVBQVFJLFVBQzlDLFNBQVU3UyxFQUFHdVQsR0FDWixJQUFJdUcsRUFBdUIsSUFBZjlaLEVBQUVnTCxTQUFpQmhMLEVBQUV1WSxnQkFBa0J2WSxFQUNsRCtaLEVBQU14RyxHQUFLQSxFQUFFdEUsV0FDZCxPQUFPalAsSUFBTStaLE1BQVdBLEdBQXdCLElBQWpCQSxFQUFJL08sWUFDbEM4TyxFQUFNakgsU0FDTGlILEVBQU1qSCxTQUFVa0gsR0FDaEIvWixFQUFFNloseUJBQThELEdBQW5DN1osRUFBRTZaLHdCQUF5QkUsTUFHM0QsU0FBVS9aLEVBQUd1VCxHQUNaLEdBQUtBLEVBQ0osS0FBVUEsRUFBSUEsRUFBRXRFLFlBQ2YsR0FBS3NFLElBQU12VCxFQUNWLE9BQU8sRUFJVixPQUFPLEdBT1RzVCxFQUFZa0YsRUFDWixTQUFVeFksRUFBR3VULEdBR1osR0FBS3ZULElBQU11VCxFQUVWLE9BREFoQixHQUFlLEVBQ1IsRUFJUixJQUFJeUgsR0FBV2hhLEVBQUU2Wix5QkFBMkJ0RyxFQUFFc0csd0JBQzlDLE9BQUtHLElBZ0JVLEdBUGZBLEdBQVloYSxFQUFFc1csZUFBaUJ0VyxLQUFTdVQsRUFBRStDLGVBQWlCL0MsR0FDMUR2VCxFQUFFNlosd0JBQXlCdEcsR0FHM0IsS0FJR3JGLEVBQVErTCxjQUFnQjFHLEVBQUVzRyx3QkFBeUI3WixLQUFRZ2EsRUFPekRoYSxHQUFLTCxHQUFZSyxFQUFFc1csZUFBaUJ4RCxHQUN4Q0QsRUFBVUMsRUFBYzlTLElBQ2hCLEVBT0p1VCxHQUFLNVQsR0FBWTRULEVBQUUrQyxlQUFpQnhELEdBQ3hDRCxFQUFVQyxFQUFjUyxHQUNqQixFQUlEakIsRUFDSnRLLEVBQVNzSyxFQUFXdFMsR0FBTWdJLEVBQVNzSyxFQUFXaUIsR0FDaEQsRUFHZSxFQUFWeUcsR0FBZSxFQUFJLElBRTNCLFNBQVVoYSxFQUFHdVQsR0FHWixHQUFLdlQsSUFBTXVULEVBRVYsT0FEQWhCLEdBQWUsRUFDUixFQUdSLElBQUlvRixFQUNIdGdCLEVBQUksRUFDSjZpQixFQUFNbGEsRUFBRWlQLFdBQ1I4SyxFQUFNeEcsRUFBRXRFLFdBQ1JrTCxFQUFLLENBQUVuYSxHQUNQb2EsRUFBSyxDQUFFN0csR0FHUixJQUFNMkcsSUFBUUgsRUFNYixPQUFPL1osR0FBS0wsR0FBWSxFQUN2QjRULEdBQUs1VCxFQUFXLEVBRWhCdWEsR0FBTyxFQUNQSCxFQUFNLEVBQ056SCxFQUNFdEssRUFBU3NLLEVBQVd0UyxHQUFNZ0ksRUFBU3NLLEVBQVdpQixHQUNoRCxFQUdLLEdBQUsyRyxJQUFRSCxFQUNuQixPQUFPckMsR0FBYzFYLEVBQUd1VCxHQUt6QixJQURBb0UsRUFBTTNYLEVBQ0kyWCxFQUFNQSxFQUFJMUksWUFDbkJrTCxFQUFHNWQsUUFBU29iLEdBR2IsSUFEQUEsRUFBTXBFLEVBQ0lvRSxFQUFNQSxFQUFJMUksWUFDbkJtTCxFQUFHN2QsUUFBU29iLEdBSWIsS0FBUXdDLEVBQUk5aUIsS0FBUStpQixFQUFJL2lCLElBQ3ZCQSxJQUdELE9BQU9BLEVBR05xZ0IsR0FBY3lDLEVBQUk5aUIsR0FBSytpQixFQUFJL2lCLElBTzNCOGlCLEVBQUk5aUIsSUFBT3liLEdBQWdCLEVBQzNCc0gsRUFBSS9pQixJQUFPeWIsRUFBZSxFQUUxQixHQUdLblQsR0EvY0NBLEdBa2RUbVMsR0FBT2pULFFBQVUsU0FBVXdiLEVBQU1DLEdBQ2hDLE9BQU94SSxHQUFRdUksRUFBTSxLQUFNLEtBQU1DLElBR2xDeEksR0FBT3lILGdCQUFrQixTQUFVeEosRUFBTXNLLEdBR3hDLEdBRkE3SCxFQUFhekMsR0FFUjdCLEVBQVFxTCxpQkFBbUI3RyxJQUM5QlcsRUFBd0JnSCxFQUFPLFFBQzdCekgsSUFBa0JBLEVBQWM5UixLQUFNdVosT0FDdEMxSCxJQUFrQkEsRUFBVTdSLEtBQU11WixJQUVyQyxJQUNDLElBQUk5UixFQUFNMUosRUFBUXJILEtBQU11WSxFQUFNc0ssR0FHOUIsR0FBSzlSLEdBQU8yRixFQUFRMEwsbUJBSW5CN0osRUFBS3BRLFVBQXVDLEtBQTNCb1EsRUFBS3BRLFNBQVNxTCxTQUMvQixPQUFPekMsRUFFUCxNQUFRbEosR0FDVGdVLEVBQXdCZ0gsR0FBTSxHQUloQyxPQUFPdkksR0FBUXVJLEVBQU0xYSxFQUFVLEtBQU0sQ0FBRW9RLElBQVNwVSxPQUFTLEdBRzFEbVcsR0FBT2UsU0FBVyxTQUFVcE8sRUFBU3NMLEdBVXBDLE9BSE90TCxFQUFRNlIsZUFBaUI3UixJQUFhOUUsR0FDNUM2UyxFQUFhL04sR0FFUG9PLEVBQVVwTyxFQUFTc0wsSUFHM0IrQixHQUFPMVQsS0FBTyxTQUFVMlIsRUFBTW5ZLElBT3RCbVksRUFBS3VHLGVBQWlCdkcsSUFBVXBRLEdBQ3RDNlMsRUFBYXpDLEdBR2QsSUFBSVYsRUFBSzBDLEVBQUswRixXQUFZN2YsRUFBSzhMLGVBRzlCcUYsRUFBTXNHLEdBQU10QixFQUFPdlcsS0FBTXVhLEVBQUswRixXQUFZN2YsRUFBSzhMLGVBQzlDMkwsRUFBSVUsRUFBTW5ZLEdBQU84YSxRQUNqQjNCLEVBRUYsWUFBZUEsSUFBUmhJLEVBQ05BLEVBQ0FtRixFQUFRNEYsYUFBZXBCLEVBQ3RCM0MsRUFBSy9HLGFBQWNwUixJQUNqQm1SLEVBQU1nSCxFQUFLb0osaUJBQWtCdmhCLEtBQVltUixFQUFJd1IsVUFDOUN4UixFQUFJelEsTUFDSixNQUdKd1osR0FBT2tELE9BQVMsU0FBVXdGLEdBQ3pCLE9BQVNBLEVBQU0sSUFBS25nQixRQUFTK2EsR0FBWUMsS0FHMUN2RCxHQUFPNU8sTUFBUSxTQUFVZ08sR0FDeEIsTUFBTSxJQUFJeEksTUFBTywwQ0FBNEN3SSxJQU85RFksR0FBTzJJLFdBQWEsU0FBVWxULEdBQzdCLElBQUl3SSxFQUNIMkssRUFBYSxHQUNibkssRUFBSSxFQUNKbFosRUFBSSxFQU9MLEdBSkFrYixHQUFnQnJFLEVBQVF5TSxpQkFDeEJySSxHQUFhcEUsRUFBUTBNLFlBQWNyVCxFQUFRM04sTUFBTyxHQUNsRDJOLEVBQVFrSixLQUFNNkMsR0FFVGYsRUFBZSxDQUNuQixLQUFVeEMsRUFBT3hJLEVBQVNsUSxNQUNwQjBZLElBQVN4SSxFQUFTbFEsS0FDdEJrWixFQUFJbUssRUFBV3JlLEtBQU1oRixJQUd2QixLQUFRa1osS0FDUGhKLEVBQVFtSixPQUFRZ0ssRUFBWW5LLEdBQUssR0FRbkMsT0FGQStCLEVBQVksS0FFTC9LLEdBT1J5SyxFQUFVRixHQUFPRSxRQUFVLFNBQVVqQyxHQUNwQyxJQUFJckIsRUFDSG5HLEVBQU0sR0FDTmxSLEVBQUksRUFDSjJULEVBQVcrRSxFQUFLL0UsU0FFakIsR0FBTUEsR0FRQyxHQUFrQixJQUFiQSxHQUErQixJQUFiQSxHQUErQixLQUFiQSxFQUFrQixDQUlqRSxHQUFpQyxpQkFBckIrRSxFQUFLOEssWUFDaEIsT0FBTzlLLEVBQUs4SyxZQUlaLElBQU05SyxFQUFPQSxFQUFLK0ssV0FBWS9LLEVBQU1BLEVBQU9BLEVBQUsrSCxZQUMvQ3ZQLEdBQU95SixFQUFTakMsUUFHWixHQUFrQixJQUFiL0UsR0FBK0IsSUFBYkEsRUFDN0IsT0FBTytFLEVBQUtnTCxlQW5CWixLQUFVck0sRUFBT3FCLEVBQU0xWSxNQUd0QmtSLEdBQU95SixFQUFTdEQsR0FxQmxCLE9BQU9uRyxJQUdSd0osRUFBT0QsR0FBT2tKLFVBQVksQ0FHekI5RCxZQUFhLEdBRWIrRCxhQUFjOUQsR0FFZHJZLE1BQU95VixFQUVQa0QsV0FBWSxHQUVaelUsS0FBTSxHQUVOa1ksU0FBVSxDQUNULElBQUssQ0FBRXBGLElBQUssYUFBYzlGLE9BQU8sR0FDakMsSUFBSyxDQUFFOEYsSUFBSyxjQUNaLElBQUssQ0FBRUEsSUFBSyxrQkFBbUI5RixPQUFPLEdBQ3RDLElBQUssQ0FBRThGLElBQUssb0JBR2JxRixVQUFXLENBQ1YsS0FBUSxTQUFVcmMsR0FXakIsT0FWQUEsRUFBTyxHQUFNQSxFQUFPLEdBQUl6RSxRQUFTeWEsR0FBV0MsSUFHNUNqVyxFQUFPLElBQVFBLEVBQU8sSUFBT0EsRUFBTyxJQUNuQ0EsRUFBTyxJQUFPLElBQUt6RSxRQUFTeWEsR0FBV0MsSUFFcEIsT0FBZmpXLEVBQU8sS0FDWEEsRUFBTyxHQUFNLElBQU1BLEVBQU8sR0FBTSxLQUcxQkEsRUFBTWxGLE1BQU8sRUFBRyxJQUd4QixNQUFTLFNBQVVrRixHQWlDbEIsT0FyQkFBLEVBQU8sR0FBTUEsRUFBTyxHQUFJNEUsY0FFVSxRQUE3QjVFLEVBQU8sR0FBSWxGLE1BQU8sRUFBRyxJQUduQmtGLEVBQU8sSUFDWmdULEdBQU81TyxNQUFPcEUsRUFBTyxJQUt0QkEsRUFBTyxLQUFTQSxFQUFPLEdBQ3RCQSxFQUFPLElBQVFBLEVBQU8sSUFBTyxHQUM3QixHQUFxQixTQUFmQSxFQUFPLElBQWlDLFFBQWZBLEVBQU8sS0FDdkNBLEVBQU8sS0FBV0EsRUFBTyxHQUFNQSxFQUFPLElBQXdCLFFBQWZBLEVBQU8sS0FHM0NBLEVBQU8sSUFDbEJnVCxHQUFPNU8sTUFBT3BFLEVBQU8sSUFHZkEsR0FHUixPQUFVLFNBQVVBLEdBQ25CLElBQUlzYyxFQUNIQyxHQUFZdmMsRUFBTyxJQUFPQSxFQUFPLEdBRWxDLE9BQUt5VixFQUFtQixNQUFFelQsS0FBTWhDLEVBQU8sSUFDL0IsTUFJSEEsRUFBTyxHQUNYQSxFQUFPLEdBQU1BLEVBQU8sSUFBT0EsRUFBTyxJQUFPLEdBRzlCdWMsR0FBWWhILEVBQVF2VCxLQUFNdWEsS0FHbkNELEVBQVNsSixFQUFVbUosR0FBVSxNQUc3QkQsRUFBU0MsRUFBU3JULFFBQVMsSUFBS3FULEVBQVMxZixPQUFTeWYsR0FBV0MsRUFBUzFmLFVBR3hFbUQsRUFBTyxHQUFNQSxFQUFPLEdBQUlsRixNQUFPLEVBQUd3aEIsR0FDbEN0YyxFQUFPLEdBQU11YyxFQUFTemhCLE1BQU8sRUFBR3doQixJQUkxQnRjLEVBQU1sRixNQUFPLEVBQUcsTUFJekJxZixPQUFRLENBRVAsSUFBTyxTQUFVcUMsR0FDaEIsSUFBSXpGLEVBQVd5RixFQUFpQmpoQixRQUFTeWEsR0FBV0MsSUFBWXJSLGNBQ2hFLE1BQTRCLE1BQXJCNFgsRUFDTixXQUNDLE9BQU8sR0FFUixTQUFVdkwsR0FDVCxPQUFPQSxFQUFLOEYsVUFBWTlGLEVBQUs4RixTQUFTblMsZ0JBQWtCbVMsSUFJM0QsTUFBUyxTQUFVZ0QsR0FDbEIsSUFBSTBDLEVBQVV0SSxFQUFZNEYsRUFBWSxLQUV0QyxPQUFPMEMsSUFDSkEsRUFBVSxJQUFJelgsT0FBUSxNQUFROFAsRUFDL0IsSUFBTWlGLEVBQVksSUFBTWpGLEVBQWEsU0FBYVgsRUFDakQ0RixHQUFXLFNBQVU5SSxHQUNwQixPQUFPd0wsRUFBUXphLEtBQ1ksaUJBQW5CaVAsRUFBSzhJLFdBQTBCOUksRUFBSzhJLGdCQUNkLElBQXRCOUksRUFBSy9HLGNBQ1grRyxFQUFLL0csYUFBYyxVQUNwQixRQUtOLEtBQVEsU0FBVXBSLEVBQU00akIsRUFBVUMsR0FDakMsT0FBTyxTQUFVMUwsR0FDaEIsSUFBSTJMLEVBQVM1SixHQUFPMVQsS0FBTTJSLEVBQU1uWSxHQUVoQyxPQUFlLE1BQVY4akIsRUFDZ0IsT0FBYkYsR0FFRkEsSUFJTkUsR0FBVSxHQUlVLE1BQWJGLEVBQW1CRSxJQUFXRCxFQUN2QixPQUFiRCxFQUFvQkUsSUFBV0QsRUFDbEIsT0FBYkQsRUFBb0JDLEdBQXFDLElBQTVCQyxFQUFPMVQsUUFBU3lULEdBQ2hDLE9BQWJELEVBQW9CQyxHQUFTQyxFQUFPMVQsUUFBU3lULElBQVcsRUFDM0MsT0FBYkQsRUFBb0JDLEdBQVNDLEVBQU85aEIsT0FBUTZoQixFQUFNOWYsVUFBYThmLEVBQ2xELE9BQWJELEdBQXNCLElBQU1FLEVBQU9yaEIsUUFBUzJaLEVBQWEsS0FBUSxLQUFNaE0sUUFBU3lULElBQVcsRUFDOUUsT0FBYkQsSUFBb0JFLElBQVdELEdBQVNDLEVBQU85aEIsTUFBTyxFQUFHNmhCLEVBQU05ZixPQUFTLEtBQVE4ZixFQUFRLFFBTzNGLE1BQVMsU0FBVS9XLEVBQU1pWCxFQUFNQyxFQUFXNUwsRUFBT0UsR0FDaEQsSUFBSTJMLEVBQWdDLFFBQXZCblgsRUFBSzlLLE1BQU8sRUFBRyxHQUMzQmtpQixFQUErQixTQUFyQnBYLEVBQUs5SyxPQUFRLEdBQ3ZCbWlCLEVBQWtCLFlBQVRKLEVBRVYsT0FBaUIsSUFBVjNMLEdBQXdCLElBQVRFLEVBR3JCLFNBQVVILEdBQ1QsUUFBU0EsRUFBS2QsWUFHZixTQUFVYyxFQUFNaU0sRUFBVUMsR0FDekIsSUFBSXhSLEVBQU95UixFQUFhQyxFQUFZek4sRUFBTTBOLEVBQVdDLEVBQ3BEdkcsRUFBTStGLElBQVdDLEVBQVUsY0FBZ0Isa0JBQzNDUSxFQUFTdk0sRUFBS2QsV0FDZHJYLEVBQU9ta0IsR0FBVWhNLEVBQUs4RixTQUFTblMsY0FDL0I2WSxHQUFZTixJQUFRRixFQUNwQm5FLEdBQU8sRUFFUixHQUFLMEUsRUFBUyxDQUdiLEdBQUtULEVBQVMsQ0FDYixLQUFRL0YsR0FBTSxDQUViLElBREFwSCxFQUFPcUIsRUFDR3JCLEVBQU9BLEVBQU1vSCxJQUN0QixHQUFLaUcsRUFDSnJOLEVBQUttSCxTQUFTblMsZ0JBQWtCOUwsRUFDZCxJQUFsQjhXLEVBQUsxRCxTQUVMLE9BQU8sRUFLVHFSLEVBQVF2RyxFQUFlLFNBQVRwUixJQUFvQjJYLEdBQVMsY0FFNUMsT0FBTyxFQU1SLEdBSEFBLEVBQVEsQ0FBRVAsRUFBVVEsRUFBT3hCLFdBQWF3QixFQUFPRSxXQUcxQ1YsR0FBV1MsR0FrQmYsSUFIQTNFLEdBREF3RSxHQURBM1IsR0FIQXlSLEdBSkFDLEdBREF6TixFQUFPNE4sR0FDWXRMLEtBQWV0QyxFQUFNc0MsR0FBWSxLQUkxQnRDLEVBQUsrTixZQUM1Qk4sRUFBWXpOLEVBQUsrTixVQUFhLEtBRVovWCxJQUFVLElBQ1osS0FBUXFPLEdBQVd0SSxFQUFPLEtBQ3pCQSxFQUFPLEdBQzNCaUUsRUFBTzBOLEdBQWFFLEVBQU92RyxXQUFZcUcsR0FFN0IxTixJQUFTME4sR0FBYTFOLEdBQVFBLEVBQU1vSCxLQUczQzhCLEVBQU93RSxFQUFZLElBQU9DLEVBQU03SSxPQUdsQyxHQUF1QixJQUFsQjlFLEVBQUsxRCxZQUFvQjRNLEdBQVFsSixJQUFTcUIsRUFBTyxDQUNyRG1NLEVBQWF4WCxHQUFTLENBQUVxTyxFQUFTcUosRUFBV3hFLEdBQzVDLFlBeUJGLEdBbEJLMkUsSUFhSjNFLEVBREF3RSxHQURBM1IsR0FIQXlSLEdBSkFDLEdBREF6TixFQUFPcUIsR0FDWWlCLEtBQWV0QyxFQUFNc0MsR0FBWSxLQUkxQnRDLEVBQUsrTixZQUM1Qk4sRUFBWXpOLEVBQUsrTixVQUFhLEtBRVovWCxJQUFVLElBQ1osS0FBUXFPLEdBQVd0SSxFQUFPLEtBTWhDLElBQVRtTixFQUdKLE1BQVVsSixJQUFTME4sR0FBYTFOLEdBQVFBLEVBQU1vSCxLQUMzQzhCLEVBQU93RSxFQUFZLElBQU9DLEVBQU03SSxVQUUzQnVJLEVBQ05yTixFQUFLbUgsU0FBU25TLGdCQUFrQjlMLEVBQ2QsSUFBbEI4VyxFQUFLMUQsY0FDSDRNLElBR0cyRSxLQU1KTCxHQUxBQyxFQUFhek4sRUFBTXNDLEtBQ2hCdEMsRUFBTXNDLEdBQVksS0FJS3RDLEVBQUsrTixZQUM1Qk4sRUFBWXpOLEVBQUsrTixVQUFhLEtBRXBCL1gsR0FBUyxDQUFFcU8sRUFBUzZFLElBRzdCbEosSUFBU3FCLE1BVWxCLE9BREE2SCxHQUFRMUgsS0FDUUYsR0FBVzRILEVBQU81SCxHQUFVLEdBQUs0SCxFQUFPNUgsR0FBUyxLQUtyRSxPQUFVLFNBQVUwTSxFQUFRdEUsR0FNM0IsSUFBSTNjLEVBQ0g0VCxFQUFLMEMsRUFBS2dDLFFBQVMySSxJQUFZM0ssRUFBSzRLLFdBQVlELEVBQU9oWixnQkFDdERvTyxHQUFPNU8sTUFBTyx1QkFBeUJ3WixHQUt6QyxPQUFLck4sRUFBSTJCLEdBQ0QzQixFQUFJK0ksR0FJUC9JLEVBQUcxVCxPQUFTLEdBQ2hCRixFQUFPLENBQUVpaEIsRUFBUUEsRUFBUSxHQUFJdEUsR0FDdEJyRyxFQUFLNEssV0FBV3pqQixlQUFnQndqQixFQUFPaFosZUFDN0N5VCxJQUFjLFNBQVVsQixFQUFNcFgsR0FJN0IsSUFIQSxJQUFJK2QsRUFDSGpWLEVBQVUwSCxFQUFJNEcsRUFBTW1DLEdBQ3BCL2dCLEVBQUlzUSxFQUFRaE0sT0FDTHRFLEtBRVA0ZSxFQURBMkcsRUFBTTVVLEVBQVNpTyxFQUFNdE8sRUFBU3RRLE9BQ2J3SCxFQUFTK2QsR0FBUWpWLEVBQVN0USxPQUc3QyxTQUFVMFksR0FDVCxPQUFPVixFQUFJVSxFQUFNLEVBQUd0VSxLQUloQjRULElBSVQwRSxRQUFTLENBR1IsSUFBT29ELElBQWMsU0FBVTNiLEdBSzlCLElBQUk4ZCxFQUFRLEdBQ1gvUixFQUFVLEdBQ1ZzVixFQUFVMUssRUFBUzNXLEVBQVNuQixRQUFTNFosRUFBTyxPQUU3QyxPQUFPNEksRUFBUzdMLEdBQ2ZtRyxJQUFjLFNBQVVsQixFQUFNcFgsRUFBU21kLEVBQVVDLEdBTWhELElBTEEsSUFBSWxNLEVBQ0grTSxFQUFZRCxFQUFTNUcsRUFBTSxLQUFNZ0csRUFBSyxJQUN0QzVrQixFQUFJNGUsRUFBS3RhLE9BR0Z0RSxNQUNBMFksRUFBTytNLEVBQVd6bEIsTUFDeEI0ZSxFQUFNNWUsS0FBU3dILEVBQVN4SCxHQUFNMFksT0FJakMsU0FBVUEsRUFBTWlNLEVBQVVDLEdBTXpCLE9BTEEzQyxFQUFPLEdBQU12SixFQUNiOE0sRUFBU3ZELEVBQU8sS0FBTTJDLEVBQUsxVSxHQUczQitSLEVBQU8sR0FBTSxNQUNML1IsRUFBUWlNLFVBSW5CLElBQU8yRCxJQUFjLFNBQVUzYixHQUM5QixPQUFPLFNBQVV1VSxHQUNoQixPQUFPK0IsR0FBUXRXLEVBQVV1VSxHQUFPcFUsT0FBUyxNQUkzQyxTQUFZd2IsSUFBYyxTQUFVdEksR0FFbkMsT0FEQUEsRUFBT0EsRUFBS3hVLFFBQVN5YSxHQUFXQyxJQUN6QixTQUFVaEYsR0FDaEIsT0FBU0EsRUFBSzhLLGFBQWU3SSxFQUFTakMsSUFBUy9ILFFBQVM2RyxJQUFVLE1BV3BFLEtBQVFzSSxJQUFjLFNBQVU0RixHQU8vQixPQUpNekksRUFBWXhULEtBQU1pYyxHQUFRLEtBQy9CakwsR0FBTzVPLE1BQU8scUJBQXVCNlosR0FFdENBLEVBQU9BLEVBQUsxaUIsUUFBU3lhLEdBQVdDLElBQVlyUixjQUNyQyxTQUFVcU0sR0FDaEIsSUFBSWlOLEVBQ0osR0FDQyxHQUFPQSxFQUFXdEssRUFDakIzQyxFQUFLZ04sS0FDTGhOLEVBQUsvRyxhQUFjLGFBQWdCK0csRUFBSy9HLGFBQWMsUUFHdEQsT0FEQWdVLEVBQVdBLEVBQVN0WixpQkFDQXFaLEdBQTJDLElBQW5DQyxFQUFTaFYsUUFBUytVLEVBQU8sWUFFM0NoTixFQUFPQSxFQUFLZCxhQUFrQyxJQUFsQmMsRUFBSy9FLFVBQzdDLE9BQU8sTUFLVCxPQUFVLFNBQVUrRSxHQUNuQixJQUFJaFIsRUFBTzVELEVBQU9rRixVQUFZbEYsRUFBT2tGLFNBQVN0QixLQUM5QyxPQUFPQSxHQUFRQSxFQUFLbkYsTUFBTyxLQUFRbVcsRUFBS3lHLElBR3pDLEtBQVEsU0FBVXpHLEdBQ2pCLE9BQU9BLElBQVMwQyxHQUdqQixNQUFTLFNBQVUxQyxHQUNsQixPQUFPQSxJQUFTcFEsRUFBU3NkLGlCQUNyQnRkLEVBQVN1ZCxVQUFZdmQsRUFBU3VkLGdCQUM3Qm5OLEVBQUtyTCxNQUFRcUwsRUFBSzNQLE9BQVMyUCxFQUFLb04sV0FJdEMsUUFBV2xGLElBQXNCLEdBQ2pDLFNBQVlBLElBQXNCLEdBRWxDLFFBQVcsU0FBVWxJLEdBSXBCLElBQUk4RixFQUFXOUYsRUFBSzhGLFNBQVNuUyxjQUM3QixNQUFzQixVQUFibVMsS0FBMEI5RixFQUFLcU4sU0FDeEIsV0FBYnZILEtBQTJCOUYsRUFBS3NOLFVBR3BDLFNBQVksU0FBVXROLEdBU3JCLE9BTEtBLEVBQUtkLFlBRVRjLEVBQUtkLFdBQVdxTyxlQUdRLElBQWxCdk4sRUFBS3NOLFVBSWIsTUFBUyxTQUFVdE4sR0FNbEIsSUFBTUEsRUFBT0EsRUFBSytLLFdBQVkvSyxFQUFNQSxFQUFPQSxFQUFLK0gsWUFDL0MsR0FBSy9ILEVBQUsvRSxTQUFXLEVBQ3BCLE9BQU8sRUFHVCxPQUFPLEdBR1IsT0FBVSxTQUFVK0UsR0FDbkIsT0FBUWdDLEVBQUtnQyxRQUFpQixNQUFHaEUsSUFJbEMsT0FBVSxTQUFVQSxHQUNuQixPQUFPMkUsRUFBUTVULEtBQU1pUCxFQUFLOEYsV0FHM0IsTUFBUyxTQUFVOUYsR0FDbEIsT0FBTzBFLEVBQVEzVCxLQUFNaVAsRUFBSzhGLFdBRzNCLE9BQVUsU0FBVTlGLEdBQ25CLElBQUluWSxFQUFPbVksRUFBSzhGLFNBQVNuUyxjQUN6QixNQUFnQixVQUFUOUwsR0FBa0MsV0FBZG1ZLEVBQUtyTCxNQUE4QixXQUFUOU0sR0FHdEQsS0FBUSxTQUFVbVksR0FDakIsSUFBSTNSLEVBQ0osTUFBdUMsVUFBaEMyUixFQUFLOEYsU0FBU25TLGVBQ04sU0FBZHFNLEVBQUtyTCxPQUl1QyxPQUF4Q3RHLEVBQU8yUixFQUFLL0csYUFBYyxVQUNOLFNBQXZCNUssRUFBS3NGLGdCQUlSLE1BQVN5VSxJQUF3QixXQUNoQyxNQUFPLENBQUUsTUFHVixLQUFRQSxJQUF3QixTQUFVb0YsRUFBZTVoQixHQUN4RCxNQUFPLENBQUVBLEVBQVMsTUFHbkIsR0FBTXdjLElBQXdCLFNBQVVvRixFQUFlNWhCLEVBQVF5YyxHQUM5RCxNQUFPLENBQUVBLEVBQVcsRUFBSUEsRUFBV3pjLEVBQVN5YyxNQUc3QyxLQUFRRCxJQUF3QixTQUFVRSxFQUFjMWMsR0FFdkQsSUFEQSxJQUFJdEUsRUFBSSxFQUNBQSxFQUFJc0UsRUFBUXRFLEdBQUssRUFDeEJnaEIsRUFBYWhjLEtBQU1oRixHQUVwQixPQUFPZ2hCLEtBR1IsSUFBT0YsSUFBd0IsU0FBVUUsRUFBYzFjLEdBRXRELElBREEsSUFBSXRFLEVBQUksRUFDQUEsRUFBSXNFLEVBQVF0RSxHQUFLLEVBQ3hCZ2hCLEVBQWFoYyxLQUFNaEYsR0FFcEIsT0FBT2doQixLQUdSLEdBQU1GLElBQXdCLFNBQVVFLEVBQWMxYyxFQUFReWMsR0FNN0QsSUFMQSxJQUFJL2dCLEVBQUkrZ0IsRUFBVyxFQUNsQkEsRUFBV3pjLEVBQ1h5YyxFQUFXemMsRUFDVkEsRUFDQXljLElBQ1EvZ0IsR0FBSyxHQUNkZ2hCLEVBQWFoYyxLQUFNaEYsR0FFcEIsT0FBT2doQixLQUdSLEdBQU1GLElBQXdCLFNBQVVFLEVBQWMxYyxFQUFReWMsR0FFN0QsSUFEQSxJQUFJL2dCLEVBQUkrZ0IsRUFBVyxFQUFJQSxFQUFXemMsRUFBU3ljLElBQ2pDL2dCLEVBQUlzRSxHQUNiMGMsRUFBYWhjLEtBQU1oRixHQUVwQixPQUFPZ2hCLFFBS0x0RSxRQUFlLElBQUloQyxFQUFLZ0MsUUFBYyxHQUdoQyxDQUFFeUosT0FBTyxFQUFNQyxVQUFVLEVBQU1DLE1BQU0sRUFBTUMsVUFBVSxFQUFNQyxPQUFPLEdBQzVFN0wsRUFBS2dDLFFBQVMxYyxHQUFNMGdCLEdBQW1CMWdCLEdBRXhDLElBQU1BLElBQUssQ0FBRXdtQixRQUFRLEVBQU1DLE9BQU8sR0FDakMvTCxFQUFLZ0MsUUFBUzFjLEdBQU0yZ0IsR0FBb0IzZ0IsR0FJekMsU0FBU3NsQixNQTBFVCxTQUFTN0YsR0FBWWlILEdBSXBCLElBSEEsSUFBSTFtQixFQUFJLEVBQ1BxUSxFQUFNcVcsRUFBT3BpQixPQUNiSCxFQUFXLEdBQ0puRSxFQUFJcVEsRUFBS3JRLElBQ2hCbUUsR0FBWXVpQixFQUFRMW1CLEdBQUlpQixNQUV6QixPQUFPa0QsRUFHUixTQUFTbWEsR0FBZWtILEVBQVNtQixFQUFZQyxHQUM1QyxJQUFJbkksRUFBTWtJLEVBQVdsSSxJQUNwQm9JLEVBQU9GLEVBQVc1VCxLQUNsQnhSLEVBQU1zbEIsR0FBUXBJLEVBQ2RxSSxFQUFtQkYsR0FBZ0IsZUFBUnJsQixFQUMzQndsQixFQUFXcEwsSUFFWixPQUFPZ0wsRUFBV2hPLE1BR2pCLFNBQVVELEVBQU10TCxFQUFTd1gsR0FDeEIsS0FBVWxNLEVBQU9BLEVBQU0rRixJQUN0QixHQUF1QixJQUFsQi9GLEVBQUsvRSxVQUFrQm1ULEVBQzNCLE9BQU90QixFQUFTOU0sRUFBTXRMLEVBQVN3WCxHQUdqQyxPQUFPLEdBSVIsU0FBVWxNLEVBQU10TCxFQUFTd1gsR0FDeEIsSUFBSW9DLEVBQVVuQyxFQUFhQyxFQUMxQm1DLEVBQVcsQ0FBRXZMLEVBQVNxTCxHQUd2QixHQUFLbkMsR0FDSixLQUFVbE0sRUFBT0EsRUFBTStGLElBQ3RCLElBQXVCLElBQWxCL0YsRUFBSy9FLFVBQWtCbVQsSUFDdEJ0QixFQUFTOU0sRUFBTXRMLEVBQVN3WCxHQUM1QixPQUFPLE9BS1YsS0FBVWxNLEVBQU9BLEVBQU0rRixJQUN0QixHQUF1QixJQUFsQi9GLEVBQUsvRSxVQUFrQm1ULEVBUTNCLEdBSEFqQyxHQUpBQyxFQUFhcE0sRUFBTWlCLEtBQWVqQixFQUFNaUIsR0FBWSxLQUkxQmpCLEVBQUswTSxZQUM1Qk4sRUFBWXBNLEVBQUswTSxVQUFhLElBRTVCeUIsR0FBUUEsSUFBU25PLEVBQUs4RixTQUFTblMsY0FDbkNxTSxFQUFPQSxFQUFNK0YsSUFBUy9GLE1BQ2hCLEtBQU9zTyxFQUFXbkMsRUFBYXRqQixLQUNyQ3lsQixFQUFVLEtBQVF0TCxHQUFXc0wsRUFBVSxLQUFRRCxFQUcvQyxPQUFTRSxFQUFVLEdBQU1ELEVBQVUsR0FPbkMsR0FIQW5DLEVBQWF0akIsR0FBUTBsQixFQUdkQSxFQUFVLEdBQU16QixFQUFTOU0sRUFBTXRMLEVBQVN3WCxHQUM5QyxPQUFPLEVBTVosT0FBTyxHQUlWLFNBQVNzQyxHQUFnQkMsR0FDeEIsT0FBT0EsRUFBUzdpQixPQUFTLEVBQ3hCLFNBQVVvVSxFQUFNdEwsRUFBU3dYLEdBRXhCLElBREEsSUFBSTVrQixFQUFJbW5CLEVBQVM3aUIsT0FDVHRFLEtBQ1AsSUFBTW1uQixFQUFVbm5CLEdBQUswWSxFQUFNdEwsRUFBU3dYLEdBQ25DLE9BQU8sRUFHVCxPQUFPLEdBRVJ1QyxFQUFVLEdBWVosU0FBU0MsR0FBVTNCLEVBQVdoTixFQUFLbUosRUFBUXhVLEVBQVN3WCxHQU9uRCxJQU5BLElBQUlsTSxFQUNIMk8sRUFBZSxHQUNmcm5CLEVBQUksRUFDSnFRLEVBQU1vVixFQUFVbmhCLE9BQ2hCZ2pCLEVBQWdCLE1BQVA3TyxFQUVGelksRUFBSXFRLEVBQUtyUSxLQUNUMFksRUFBTytNLEVBQVd6bEIsTUFDbEI0aEIsSUFBVUEsRUFBUWxKLEVBQU10TCxFQUFTd1gsS0FDdEN5QyxFQUFhcmlCLEtBQU0wVCxHQUNkNE8sR0FDSjdPLEVBQUl6VCxLQUFNaEYsS0FNZCxPQUFPcW5CLEVBR1IsU0FBU0UsR0FBWXpELEVBQVczZixFQUFVcWhCLEVBQVNnQyxFQUFZQyxFQUFZQyxHQU8xRSxPQU5LRixJQUFlQSxFQUFZN04sS0FDL0I2TixFQUFhRCxHQUFZQyxJQUVyQkMsSUFBZUEsRUFBWTlOLEtBQy9COE4sRUFBYUYsR0FBWUUsRUFBWUMsSUFFL0I1SCxJQUFjLFNBQVVsQixFQUFNMU8sRUFBUzlDLEVBQVN3WCxHQUN0RCxJQUFJK0MsRUFBTTNuQixFQUFHMFksRUFDWmtQLEVBQVMsR0FDVEMsRUFBVSxHQUNWQyxFQUFjNVgsRUFBUTVMLE9BR3RCZ1UsRUFBUXNHLEdBNUNYLFNBQTJCemEsRUFBVTRqQixFQUFVN1gsR0FHOUMsSUFGQSxJQUFJbFEsRUFBSSxFQUNQcVEsRUFBTTBYLEVBQVN6akIsT0FDUnRFLEVBQUlxUSxFQUFLclEsSUFDaEJ5YSxHQUFRdFcsRUFBVTRqQixFQUFVL25CLEdBQUtrUSxHQUVsQyxPQUFPQSxFQXNDVzhYLENBQ2Y3akIsR0FBWSxJQUNaaUosRUFBUXVHLFNBQVcsQ0FBRXZHLEdBQVlBLEVBQ2pDLElBSUQ2YSxHQUFZbkUsSUFBZWxGLEdBQVN6YSxFQUVuQ21VLEVBREE4TyxHQUFVOU8sRUFBT3NQLEVBQVE5RCxFQUFXMVcsRUFBU3dYLEdBRzlDc0QsRUFBYTFDLEVBR1ppQyxJQUFnQjdJLEVBQU9rRixFQUFZZ0UsR0FBZU4sR0FHakQsR0FHQXRYLEVBQ0QrWCxFQVFGLEdBTEt6QyxHQUNKQSxFQUFTeUMsRUFBV0MsRUFBWTlhLEVBQVN3WCxHQUlyQzRDLEVBTUosSUFMQUcsRUFBT1AsR0FBVWMsRUFBWUwsR0FDN0JMLEVBQVlHLEVBQU0sR0FBSXZhLEVBQVN3WCxHQUcvQjVrQixFQUFJMm5CLEVBQUtyakIsT0FDRHRFLE1BQ0EwWSxFQUFPaVAsRUFBTTNuQixNQUNuQmtvQixFQUFZTCxFQUFTN25CLE1BQVdpb0IsRUFBV0osRUFBUzduQixJQUFRMFksSUFLL0QsR0FBS2tHLEdBQ0osR0FBSzZJLEdBQWMzRCxFQUFZLENBQzlCLEdBQUsyRCxFQUFhLENBS2pCLElBRkFFLEVBQU8sR0FDUDNuQixFQUFJa29CLEVBQVc1akIsT0FDUHRFLE1BQ0EwWSxFQUFPd1AsRUFBWWxvQixLQUd6QjJuQixFQUFLM2lCLEtBQVFpakIsRUFBV2pvQixHQUFNMFksR0FHaEMrTyxFQUFZLEtBQVFTLEVBQWEsR0FBTVAsRUFBTS9DLEdBSzlDLElBREE1a0IsRUFBSWtvQixFQUFXNWpCLE9BQ1B0RSxNQUNBMFksRUFBT3dQLEVBQVlsb0IsTUFDdkIybkIsRUFBT0YsRUFBYTlXLEVBQVNpTyxFQUFNbEcsR0FBU2tQLEVBQVE1bkIsS0FBUyxJQUUvRDRlLEVBQU0rSSxLQUFZelgsRUFBU3lYLEdBQVNqUCxVQU92Q3dQLEVBQWFkLEdBQ1pjLElBQWVoWSxFQUNkZ1ksRUFBVzdPLE9BQVF5TyxFQUFhSSxFQUFXNWpCLFFBQzNDNGpCLEdBRUdULEVBQ0pBLEVBQVksS0FBTXZYLEVBQVNnWSxFQUFZdEQsR0FFdkM1ZixFQUFLdkIsTUFBT3lNLEVBQVNnWSxNQU16QixTQUFTQyxHQUFtQnpCLEdBeUIzQixJQXhCQSxJQUFJMEIsRUFBYzVDLEVBQVN0TSxFQUMxQjdJLEVBQU1xVyxFQUFPcGlCLE9BQ2IrakIsRUFBa0IzTixFQUFLbUosU0FBVTZDLEVBQVEsR0FBSXJaLE1BQzdDaWIsRUFBbUJELEdBQW1CM04sRUFBS21KLFNBQVUsS0FDckQ3akIsRUFBSXFvQixFQUFrQixFQUFJLEVBRzFCRSxFQUFlakssSUFBZSxTQUFVNUYsR0FDdkMsT0FBT0EsSUFBUzBQLElBQ2RFLEdBQWtCLEdBQ3JCRSxFQUFrQmxLLElBQWUsU0FBVTVGLEdBQzFDLE9BQU8vSCxFQUFTeVgsRUFBYzFQLElBQVUsSUFDdEM0UCxHQUFrQixHQUNyQm5CLEVBQVcsQ0FBRSxTQUFVek8sRUFBTXRMLEVBQVN3WCxHQUNyQyxJQUFJMVQsR0FBU21YLElBQXFCekQsR0FBT3hYLElBQVk0TixNQUNsRG9OLEVBQWVoYixHQUFVdUcsU0FDMUI0VSxFQUFjN1AsRUFBTXRMLEVBQVN3WCxHQUM3QjRELEVBQWlCOVAsRUFBTXRMLEVBQVN3WCxJQUlsQyxPQURBd0QsRUFBZSxLQUNSbFgsSUFHRGxSLEVBQUlxUSxFQUFLclEsSUFDaEIsR0FBT3dsQixFQUFVOUssRUFBS21KLFNBQVU2QyxFQUFRMW1CLEdBQUlxTixNQUMzQzhaLEVBQVcsQ0FBRTdJLEdBQWU0SSxHQUFnQkMsR0FBWTNCLFFBQ2xELENBSU4sSUFIQUEsRUFBVTlLLEVBQUtrSCxPQUFROEUsRUFBUTFtQixHQUFJcU4sTUFBTzVKLE1BQU8sS0FBTWlqQixFQUFRMW1CLEdBQUl3SCxVQUdyRG1TLEdBQVksQ0FJekIsSUFEQVQsSUFBTWxaLEVBQ0VrWixFQUFJN0ksSUFDTnFLLEVBQUttSixTQUFVNkMsRUFBUXhOLEdBQUk3TCxNQURoQjZMLEtBS2pCLE9BQU9xTyxHQUNOdm5CLEVBQUksR0FBS2tuQixHQUFnQkMsR0FDekJubkIsRUFBSSxHQUFLeWYsR0FHVGlILEVBQ0Vua0IsTUFBTyxFQUFHdkMsRUFBSSxHQUNkMEQsT0FBUSxDQUFFekMsTUFBZ0MsTUFBekJ5bEIsRUFBUTFtQixFQUFJLEdBQUlxTixLQUFlLElBQU0sTUFDdERySyxRQUFTNFosRUFBTyxNQUNsQjRJLEVBQ0F4bEIsRUFBSWtaLEdBQUtpUCxHQUFtQnpCLEVBQU9ua0IsTUFBT3ZDLEVBQUdrWixJQUM3Q0EsRUFBSTdJLEdBQU84WCxHQUFxQnpCLEVBQVNBLEVBQU9ua0IsTUFBTzJXLElBQ3ZEQSxFQUFJN0ksR0FBT29QLEdBQVlpSCxJQUd6QlMsRUFBU25pQixLQUFNd2dCLEdBSWpCLE9BQU8wQixHQUFnQkMsR0FvVHhCLE9BdHBCQTdCLEdBQVcxakIsVUFBWThZLEVBQUsrTixRQUFVL04sRUFBS2dDLFFBQzNDaEMsRUFBSzRLLFdBQWEsSUFBSUEsR0FFdEJ6SyxFQUFXSixHQUFPSSxTQUFXLFNBQVUxVyxFQUFVdWtCLEdBQ2hELElBQUlwWSxFQUFTN0ksRUFBT2lmLEVBQVFyWixFQUMzQnNiLEVBQU83SixFQUFROEosRUFDZjFWLEVBQVM0SSxFQUFZM1gsRUFBVyxLQUVqQyxHQUFLK08sRUFDSixPQUFPd1YsRUFBWSxFQUFJeFYsRUFBTzNRLE1BQU8sR0FPdEMsSUFKQW9tQixFQUFReGtCLEVBQ1IyYSxFQUFTLEdBQ1Q4SixFQUFhbE8sRUFBS29KLFVBRVY2RSxHQUFRLENBMkJmLElBQU10YixLQXhCQWlELEtBQWE3SSxFQUFRb1YsRUFBT3JRLEtBQU1tYyxNQUNsQ2xoQixJQUdKa2hCLEVBQVFBLEVBQU1wbUIsTUFBT2tGLEVBQU8sR0FBSW5ELFNBQVlxa0IsR0FFN0M3SixFQUFPOVosS0FBUTBoQixFQUFTLEtBR3pCcFcsR0FBVSxHQUdIN0ksRUFBUXFWLEVBQWF0USxLQUFNbWMsTUFDakNyWSxFQUFVN0ksRUFBTWxELFFBQ2hCbWlCLEVBQU8xaEIsS0FBTSxDQUNaL0QsTUFBT3FQLEVBR1BqRCxLQUFNNUYsRUFBTyxHQUFJekUsUUFBUzRaLEVBQU8sT0FFbEMrTCxFQUFRQSxFQUFNcG1CLE1BQU8rTixFQUFRaE0sU0FJaEJvVyxFQUFLa0gsU0FDWG5hLEVBQVF5VixFQUFXN1AsR0FBT2IsS0FBTW1jLEtBQWdCQyxFQUFZdmIsTUFDaEU1RixFQUFRbWhCLEVBQVl2YixHQUFRNUYsTUFDOUI2SSxFQUFVN0ksRUFBTWxELFFBQ2hCbWlCLEVBQU8xaEIsS0FBTSxDQUNaL0QsTUFBT3FQLEVBQ1BqRCxLQUFNQSxFQUNON0YsUUFBU0MsSUFFVmtoQixFQUFRQSxFQUFNcG1CLE1BQU8rTixFQUFRaE0sU0FJL0IsSUFBTWdNLEVBQ0wsTUFPRixPQUFPb1ksRUFDTkMsRUFBTXJrQixPQUNOcWtCLEVBQ0NsTyxHQUFPNU8sTUFBTzFILEdBR2QyWCxFQUFZM1gsRUFBVTJhLEdBQVN2YyxNQUFPLElBNFp6Q3VZLEVBQVVMLEdBQU9LLFFBQVUsU0FBVTNXLEVBQVVzRCxHQUM5QyxJQUFJekgsRUFDSDZvQixFQUFjLEdBQ2RDLEVBQWtCLEdBQ2xCNVYsRUFBUzZJLEVBQWU1WCxFQUFXLEtBRXBDLElBQU0rTyxFQUFTLENBT2QsSUFKTXpMLElBQ0xBLEVBQVFvVCxFQUFVMVcsSUFFbkJuRSxFQUFJeUgsRUFBTW5ELE9BQ0Z0RSxNQUNQa1QsRUFBU2lWLEdBQW1CMWdCLEVBQU96SCxLQUN0QjJaLEdBQ1prUCxFQUFZN2pCLEtBQU1rTyxHQUVsQjRWLEVBQWdCOWpCLEtBQU1rTyxJQUt4QkEsRUFBUzZJLEVBQ1I1WCxFQXJKSCxTQUFtQzJrQixFQUFpQkQsR0FDbkQsSUFBSUUsRUFBUUYsRUFBWXZrQixPQUFTLEVBQ2hDMGtCLEVBQVlGLEVBQWdCeGtCLE9BQVMsRUFDckMya0IsRUFBZSxTQUFVckssRUFBTXhSLEVBQVN3WCxFQUFLMVUsRUFBU2daLEdBQ3JELElBQUl4USxFQUFNUSxFQUFHc00sRUFDWjJELEVBQWUsRUFDZm5wQixFQUFJLElBQ0p5bEIsRUFBWTdHLEdBQVEsR0FDcEJ3SyxFQUFhLEdBQ2JDLEVBQWdCck8sRUFHaEIxQyxFQUFRc0csR0FBUW9LLEdBQWF0TyxFQUFLL08sS0FBWSxJQUFHLElBQUt1ZCxHQUd0REksRUFBa0I1TixHQUE0QixNQUFqQjJOLEVBQXdCLEVBQUkzZSxLQUFLQyxVQUFZLEdBQzFFMEYsRUFBTWlJLEVBQU1oVSxPQWNiLElBWks0a0IsSUFNSmxPLEVBQW1CNU4sR0FBVzlFLEdBQVk4RSxHQUFXOGIsR0FNOUNscEIsSUFBTXFRLEdBQWdDLE9BQXZCcUksRUFBT0osRUFBT3RZLElBQWVBLElBQU0sQ0FDekQsR0FBS2dwQixHQUFhdFEsRUFBTyxDQVd4QixJQVZBUSxFQUFJLEVBTUU5TCxHQUFXc0wsRUFBS3VHLGVBQWlCM1csSUFDdEM2UyxFQUFhekMsR0FDYmtNLEdBQU92SixHQUVFbUssRUFBVXNELEVBQWlCNVAsTUFDcEMsR0FBS3NNLEVBQVM5TSxFQUFNdEwsR0FBVzlFLEVBQVVzYyxHQUFRLENBQ2hEMVUsRUFBUWxMLEtBQU0wVCxHQUNkLE1BR0d3USxJQUNKeE4sRUFBVTROLEdBS1BQLEtBR0dyUSxHQUFROE0sR0FBVzlNLElBQ3pCeVEsSUFJSXZLLEdBQ0o2RyxFQUFVemdCLEtBQU0wVCxJQWdCbkIsR0FUQXlRLEdBQWdCbnBCLEVBU1grb0IsR0FBUy9vQixJQUFNbXBCLEVBQWUsQ0FFbEMsSUFEQWpRLEVBQUksRUFDTXNNLEVBQVVxRCxFQUFhM1AsTUFDaENzTSxFQUFTQyxFQUFXMkQsRUFBWWhjLEVBQVN3WCxHQUcxQyxHQUFLaEcsRUFBTyxDQUdYLEdBQUt1SyxFQUFlLEVBQ25CLEtBQVFucEIsS0FDQ3lsQixFQUFXemxCLElBQU9vcEIsRUFBWXBwQixLQUNyQ29wQixFQUFZcHBCLEdBQU1tYyxFQUFJaGMsS0FBTStQLElBTS9Ca1osRUFBYWhDLEdBQVVnQyxHQUl4QnBrQixFQUFLdkIsTUFBT3lNLEVBQVNrWixHQUdoQkYsSUFBY3RLLEdBQVF3SyxFQUFXOWtCLE9BQVMsR0FDNUM2a0IsRUFBZU4sRUFBWXZrQixPQUFXLEdBRXhDbVcsR0FBTzJJLFdBQVlsVCxHQVVyQixPQUxLZ1osSUFDSnhOLEVBQVU0TixFQUNWdE8sRUFBbUJxTyxHQUdiNUQsR0FHVCxPQUFPc0QsRUFDTmpKLEdBQWNtSixHQUNkQSxFQTRCQ00sQ0FBMEJULEVBQWlCRCxLQUlyQzFrQixTQUFXQSxFQUVuQixPQUFPK08sR0FZUjZILEVBQVNOLEdBQU9NLE9BQVMsU0FBVTVXLEVBQVVpSixFQUFTOEMsRUFBUzBPLEdBQzlELElBQUk1ZSxFQUFHMG1CLEVBQVE4QyxFQUFPbmMsRUFBTTFCLEVBQzNCOGQsRUFBK0IsbUJBQWJ0bEIsR0FBMkJBLEVBQzdDc0QsR0FBU21YLEdBQVEvRCxFQUFZMVcsRUFBV3NsQixFQUFTdGxCLFVBQVlBLEdBTTlELEdBSkErTCxFQUFVQSxHQUFXLEdBSUMsSUFBakJ6SSxFQUFNbkQsT0FBZSxDQUl6QixJQURBb2lCLEVBQVNqZixFQUFPLEdBQU1BLEVBQU8sR0FBSWxGLE1BQU8sSUFDNUIrQixPQUFTLEdBQXNDLFFBQS9Ca2xCLEVBQVE5QyxFQUFRLElBQU1yWixNQUM1QixJQUFyQkQsRUFBUXVHLFVBQWtCMEgsR0FBa0JYLEVBQUttSixTQUFVNkMsRUFBUSxHQUFJclosTUFBUyxDQUloRixLQUZBRCxHQUFZc04sRUFBSy9PLEtBQVcsR0FBRzZkLEVBQU1oaUIsUUFBUyxHQUM1Q3hFLFFBQVN5YSxHQUFXQyxJQUFhdFEsSUFBYSxJQUFNLElBRXJELE9BQU84QyxFQUdJdVosSUFDWHJjLEVBQVVBLEVBQVF3SyxZQUduQnpULEVBQVdBLEVBQVM1QixNQUFPbWtCLEVBQU9uaUIsUUFBUXRELE1BQU1xRCxRQUtqRCxJQURBdEUsRUFBSWtkLEVBQTBCLGFBQUV6VCxLQUFNdEYsR0FBYSxFQUFJdWlCLEVBQU9waUIsT0FDdER0RSxNQUNQd3BCLEVBQVE5QyxFQUFRMW1CLElBR1gwYSxFQUFLbUosU0FBWXhXLEVBQU9tYyxFQUFNbmMsUUFHbkMsSUFBTzFCLEVBQU8rTyxFQUFLL08sS0FBTTBCLE1BR2pCdVIsRUFBT2pULEVBQ2I2ZCxFQUFNaGlCLFFBQVMsR0FBSXhFLFFBQVN5YSxHQUFXQyxJQUN2Q0YsR0FBUy9ULEtBQU1pZCxFQUFRLEdBQUlyWixPQUFVa1MsR0FBYW5TLEVBQVF3SyxhQUN6RHhLLElBQ0ksQ0FLTCxHQUZBc1osRUFBT3JOLE9BQVFyWixFQUFHLEtBQ2xCbUUsRUFBV3lhLEVBQUt0YSxRQUFVbWIsR0FBWWlILElBR3JDLE9BREExaEIsRUFBS3ZCLE1BQU95TSxFQUFTME8sR0FDZDFPLEVBR1IsT0FlSixPQVBFdVosR0FBWTNPLEVBQVMzVyxFQUFVc0QsSUFDaENtWCxFQUNBeFIsR0FDQ2lPLEVBQ0RuTCxHQUNDOUMsR0FBV29RLEdBQVMvVCxLQUFNdEYsSUFBY29iLEdBQWFuUyxFQUFRd0ssYUFBZ0J4SyxHQUV4RThDLEdBTVIyRyxFQUFRME0sV0FBYTVKLEVBQVFwSCxNQUFPLElBQUs2RyxLQUFNNkMsR0FBWTVWLEtBQU0sTUFBU3NULEVBSTFFOUMsRUFBUXlNLG1CQUFxQnBJLEVBRzdCQyxJQUlBdEUsRUFBUStMLGFBQWU3QyxJQUFRLFNBQVVDLEdBR3hDLE9BQTRFLEVBQXJFQSxFQUFHd0Msd0JBQXlCbGEsRUFBU1EsY0FBZSxnQkFNdERpWCxJQUFRLFNBQVVDLEdBRXZCLE9BREFBLEVBQUdwTSxVQUFZLG1CQUNpQyxNQUF6Q29NLEVBQUd5RCxXQUFXOVIsYUFBYyxZQUVuQ3NPLEdBQVcsMEJBQTBCLFNBQVV2SCxFQUFNblksRUFBTXFhLEdBQzFELElBQU1BLEVBQ0wsT0FBT2xDLEVBQUsvRyxhQUFjcFIsRUFBNkIsU0FBdkJBLEVBQUs4TCxjQUEyQixFQUFJLE1BT2pFd0ssRUFBUTRGLFlBQWVzRCxJQUFRLFNBQVVDLEdBRzlDLE9BRkFBLEVBQUdwTSxVQUFZLFdBQ2ZvTSxFQUFHeUQsV0FBV2hNLGFBQWMsUUFBUyxJQUNZLEtBQTFDdUksRUFBR3lELFdBQVc5UixhQUFjLGFBRW5Dc08sR0FBVyxTQUFTLFNBQVV2SCxFQUFNZ1IsRUFBTzlPLEdBQzFDLElBQU1BLEdBQXlDLFVBQWhDbEMsRUFBSzhGLFNBQVNuUyxjQUM1QixPQUFPcU0sRUFBS2lSLGdCQU9UNUosSUFBUSxTQUFVQyxHQUN2QixPQUF3QyxNQUFqQ0EsRUFBR3JPLGFBQWMsZ0JBRXhCc08sR0FBVzNELEdBQVUsU0FBVTVELEVBQU1uWSxFQUFNcWEsR0FDMUMsSUFBSWxKLEVBQ0osSUFBTWtKLEVBQ0wsT0FBd0IsSUFBakJsQyxFQUFNblksR0FBa0JBLEVBQUs4TCxlQUNqQ3FGLEVBQU1nSCxFQUFLb0osaUJBQWtCdmhCLEtBQVltUixFQUFJd1IsVUFDOUN4UixFQUFJelEsTUFDSixRQUtFd1osR0ExNEVQLENBNDRFSzNXLEdBSUxpVSxFQUFPcE0sS0FBTzhPLEVBQ2QxQyxFQUFPaUwsS0FBT3ZJLEVBQU9rSixVQUdyQjVMLEVBQU9pTCxLQUFNLEtBQVFqTCxFQUFPaUwsS0FBS3RHLFFBQ2pDM0UsRUFBT3FMLFdBQWFyTCxFQUFPNlIsT0FBU25QLEVBQU8ySSxXQUMzQ3JMLEVBQU9QLEtBQU9pRCxFQUFPRSxRQUNyQjVDLEVBQU84UixTQUFXcFAsRUFBT0csTUFDekI3QyxFQUFPeUQsU0FBV2YsRUFBT2UsU0FDekJ6RCxFQUFPK1IsZUFBaUJyUCxFQUFPa0QsT0FLL0IsSUFBSWMsRUFBTSxTQUFVL0YsRUFBTStGLEVBQUtzTCxHQUk5QixJQUhBLElBQUl6WixFQUFVLEdBQ2IwWixPQUFxQnRRLElBQVZxUSxHQUVGclIsRUFBT0EsRUFBTStGLEtBQTZCLElBQWxCL0YsRUFBSy9FLFVBQ3RDLEdBQXVCLElBQWxCK0UsRUFBSy9FLFNBQWlCLENBQzFCLEdBQUtxVyxHQUFZalMsRUFBUVcsR0FBT3VSLEdBQUlGLEdBQ25DLE1BRUR6WixFQUFRdEwsS0FBTTBULEdBR2hCLE9BQU9wSSxHQUlKNFosRUFBVyxTQUFVem9CLEVBQUdpWCxHQUczQixJQUZBLElBQUlwSSxFQUFVLEdBRU43TyxFQUFHQSxFQUFJQSxFQUFFZ2YsWUFDSSxJQUFmaGYsRUFBRWtTLFVBQWtCbFMsSUFBTWlYLEdBQzlCcEksRUFBUXRMLEtBQU12RCxHQUloQixPQUFPNk8sR0FJSjZaLEVBQWdCcFMsRUFBT2lMLEtBQUt2YixNQUFNMmlCLGFBSXRDLFNBQVM1TCxFQUFVOUYsRUFBTW5ZLEdBRXZCLE9BQU9tWSxFQUFLOEYsVUFBWTlGLEVBQUs4RixTQUFTblMsZ0JBQWtCOUwsRUFBSzhMLGNBRy9ELElBQUlnZSxFQUFhLGtFQUtqQixTQUFTQyxFQUFRckgsRUFBVXNILEVBQVdDLEdBQ3JDLE9BQUtqbEIsRUFBWWdsQixHQUNUeFMsRUFBT2dCLEtBQU1rSyxHQUFVLFNBQVV2SyxFQUFNMVksR0FDN0MsUUFBU3VxQixFQUFVcHFCLEtBQU11WSxFQUFNMVksRUFBRzBZLEtBQVc4UixLQUsxQ0QsRUFBVTVXLFNBQ1BvRSxFQUFPZ0IsS0FBTWtLLEdBQVUsU0FBVXZLLEdBQ3ZDLE9BQVNBLElBQVM2UixJQUFnQkMsS0FLVixpQkFBZEQsRUFDSnhTLEVBQU9nQixLQUFNa0ssR0FBVSxTQUFVdkssR0FDdkMsT0FBUy9ILEVBQVF4USxLQUFNb3FCLEVBQVc3UixJQUFVLElBQVE4UixLQUsvQ3pTLEVBQU82SixPQUFRMkksRUFBV3RILEVBQVV1SCxHQUc1Q3pTLEVBQU82SixPQUFTLFNBQVVvQixFQUFNMUssRUFBT2tTLEdBQ3RDLElBQUk5UixFQUFPSixFQUFPLEdBTWxCLE9BSktrUyxJQUNKeEgsRUFBTyxRQUFVQSxFQUFPLEtBR0gsSUFBakIxSyxFQUFNaFUsUUFBa0MsSUFBbEJvVSxFQUFLL0UsU0FDeEJvRSxFQUFPcE0sS0FBS3VXLGdCQUFpQnhKLEVBQU1zSyxHQUFTLENBQUV0SyxHQUFTLEdBR3hEWCxFQUFPcE0sS0FBS25FLFFBQVN3YixFQUFNakwsRUFBT2dCLEtBQU1ULEdBQU8sU0FBVUksR0FDL0QsT0FBeUIsSUFBbEJBLEVBQUsvRSxjQUlkb0UsRUFBT0MsR0FBRzNTLE9BQVEsQ0FDakJzRyxLQUFNLFNBQVV4SCxHQUNmLElBQUluRSxFQUFHa1IsRUFDTmIsRUFBTTlNLEtBQUtlLE9BQ1htbUIsRUFBT2xuQixLQUVSLEdBQXlCLGlCQUFiWSxFQUNYLE9BQU9aLEtBQUs4VSxVQUFXTixFQUFRNVQsR0FBV3lkLFFBQVEsV0FDakQsSUFBTTVoQixFQUFJLEVBQUdBLEVBQUlxUSxFQUFLclEsSUFDckIsR0FBSytYLEVBQU95RCxTQUFVaVAsRUFBTXpxQixHQUFLdUQsTUFDaEMsT0FBTyxNQVFYLElBRkEyTixFQUFNM04sS0FBSzhVLFVBQVcsSUFFaEJyWSxFQUFJLEVBQUdBLEVBQUlxUSxFQUFLclEsSUFDckIrWCxFQUFPcE0sS0FBTXhILEVBQVVzbUIsRUFBTXpxQixHQUFLa1IsR0FHbkMsT0FBT2IsRUFBTSxFQUFJMEgsRUFBT3FMLFdBQVlsUyxHQUFRQSxHQUU3QzBRLE9BQVEsU0FBVXpkLEdBQ2pCLE9BQU9aLEtBQUs4VSxVQUFXaVMsRUFBUS9tQixLQUFNWSxHQUFZLElBQUksS0FFdERxbUIsSUFBSyxTQUFVcm1CLEdBQ2QsT0FBT1osS0FBSzhVLFVBQVdpUyxFQUFRL21CLEtBQU1ZLEdBQVksSUFBSSxLQUV0RDhsQixHQUFJLFNBQVU5bEIsR0FDYixRQUFTbW1CLEVBQ1IvbUIsS0FJb0IsaUJBQWJZLEdBQXlCZ21CLEVBQWMxZ0IsS0FBTXRGLEdBQ25ENFQsRUFBUTVULEdBQ1JBLEdBQVksSUFDYixHQUNDRyxVQVNKLElBQUlvbUIsRUFNSG5OLEVBQWEsdUNBRU54RixFQUFPQyxHQUFHQyxLQUFPLFNBQVU5VCxFQUFVaUosRUFBU3VkLEdBQ3BELElBQUlsakIsRUFBT2lSLEVBR1gsSUFBTXZVLEVBQ0wsT0FBT1osS0FRUixHQUhBb25CLEVBQU9BLEdBQVFELEVBR1UsaUJBQWJ2bUIsRUFBd0IsQ0FhbkMsS0FQQ3NELEVBTHNCLE1BQWxCdEQsRUFBVSxJQUNzQixNQUFwQ0EsRUFBVUEsRUFBU0csT0FBUyxJQUM1QkgsRUFBU0csUUFBVSxFQUdYLENBQUUsS0FBTUgsRUFBVSxNQUdsQm9aLEVBQVcvUSxLQUFNckksTUFJVnNELEVBQU8sSUFBUTJGLEVBNkN4QixPQUFNQSxHQUFXQSxFQUFRMkgsUUFDdEIzSCxHQUFXdWQsR0FBT2hmLEtBQU14SCxHQUsxQlosS0FBSytJLFlBQWFjLEdBQVV6QixLQUFNeEgsR0FoRHpDLEdBQUtzRCxFQUFPLEdBQU0sQ0FZakIsR0FYQTJGLEVBQVVBLGFBQW1CMkssRUFBUzNLLEVBQVMsR0FBTUEsRUFJckQySyxFQUFPUSxNQUFPaFYsS0FBTXdVLEVBQU82UyxVQUMxQm5qQixFQUFPLEdBQ1AyRixHQUFXQSxFQUFRdUcsU0FBV3ZHLEVBQVE2UixlQUFpQjdSLEVBQVU5RSxHQUNqRSxJQUlJK2hCLEVBQVc1Z0IsS0FBTWhDLEVBQU8sS0FBU3NRLEVBQU8wQixjQUFlck0sR0FDM0QsSUFBTTNGLEtBQVMyRixFQUdUN0gsRUFBWWhDLEtBQU1rRSxJQUN0QmxFLEtBQU1rRSxHQUFTMkYsRUFBUzNGLElBSXhCbEUsS0FBS3dELEtBQU1VLEVBQU8yRixFQUFTM0YsSUFLOUIsT0FBT2xFLEtBWVAsT0FSQW1WLEVBQU9wUSxFQUFTNFcsZUFBZ0J6WCxFQUFPLE9BS3RDbEUsS0FBTSxHQUFNbVYsRUFDWm5WLEtBQUtlLE9BQVMsR0FFUmYsS0FjSCxPQUFLWSxFQUFTd1AsVUFDcEJwUSxLQUFNLEdBQU1ZLEVBQ1paLEtBQUtlLE9BQVMsRUFDUGYsTUFJSWdDLEVBQVlwQixRQUNEdVYsSUFBZmlSLEVBQUtFLE1BQ1hGLEVBQUtFLE1BQU8xbUIsR0FHWkEsRUFBVTRULEdBR0xBLEVBQU96UyxVQUFXbkIsRUFBVVosUUFJaEMzQixVQUFZbVcsRUFBT0MsR0FHeEIwUyxFQUFhM1MsRUFBUXpQLEdBR3JCLElBQUl3aUIsRUFBZSxpQ0FHbEJDLEVBQW1CLENBQ2xCQyxVQUFVLEVBQ1ZwVyxVQUFVLEVBQ1Y3QixNQUFNLEVBQ05xQyxNQUFNLEdBb0ZSLFNBQVM2VixFQUFTM0ssRUFBSzdCLEdBQ3RCLE1BQVU2QixFQUFNQSxFQUFLN0IsS0FBNEIsSUFBakI2QixFQUFJM00sV0FDcEMsT0FBTzJNLEVBbkZSdkksRUFBT0MsR0FBRzNTLE9BQVEsQ0FDakJjLElBQUssU0FBVVMsR0FDZCxJQUFJc2tCLEVBQVVuVCxFQUFRblIsRUFBUXJELE1BQzdCdEQsRUFBSWlyQixFQUFRNW1CLE9BRWIsT0FBT2YsS0FBS3FlLFFBQVEsV0FFbkIsSUFEQSxJQUFJNWhCLEVBQUksRUFDQUEsRUFBSUMsRUFBR0QsSUFDZCxHQUFLK1gsRUFBT3lELFNBQVVqWSxLQUFNMm5CLEVBQVNsckIsSUFDcEMsT0FBTyxNQU1YNkcsUUFBUyxTQUFVOGMsRUFBV3ZXLEdBQzdCLElBQUlrVCxFQUNIdGdCLEVBQUksRUFDSkMsRUFBSXNELEtBQUtlLE9BQ1RnTSxFQUFVLEdBQ1Y0YSxFQUErQixpQkFBZHZILEdBQTBCNUwsRUFBUTRMLEdBR3BELElBQU13RyxFQUFjMWdCLEtBQU1rYSxHQUN6QixLQUFRM2pCLEVBQUlDLEVBQUdELElBQ2QsSUFBTXNnQixFQUFNL2MsS0FBTXZELEdBQUtzZ0IsR0FBT0EsSUFBUWxULEVBQVNrVCxFQUFNQSxFQUFJMUksV0FHeEQsR0FBSzBJLEVBQUkzTSxTQUFXLEtBQVF1WCxFQUMzQkEsRUFBUUMsTUFBTzdLLElBQVMsRUFHUCxJQUFqQkEsRUFBSTNNLFVBQ0hvRSxFQUFPcE0sS0FBS3VXLGdCQUFpQjVCLEVBQUtxRCxJQUFnQixDQUVuRHJULEVBQVF0TCxLQUFNc2IsR0FDZCxNQU1KLE9BQU8vYyxLQUFLOFUsVUFBVy9ILEVBQVFoTSxPQUFTLEVBQUl5VCxFQUFPcUwsV0FBWTlTLEdBQVlBLElBSTVFNmEsTUFBTyxTQUFVelMsR0FHaEIsT0FBTUEsRUFLZSxpQkFBVEEsRUFDSi9ILEVBQVF4USxLQUFNNFgsRUFBUVcsR0FBUW5WLEtBQU0sSUFJckNvTixFQUFReFEsS0FBTW9ELEtBR3BCbVYsRUFBSzNELE9BQVMyRCxFQUFNLEdBQU1BLEdBWmpCblYsS0FBTSxJQUFPQSxLQUFNLEdBQUlxVSxXQUFlclUsS0FBS29WLFFBQVF5UyxVQUFVOW1CLFFBQVUsR0FnQmxGK21CLElBQUssU0FBVWxuQixFQUFVaUosR0FDeEIsT0FBTzdKLEtBQUs4VSxVQUNYTixFQUFPcUwsV0FDTnJMLEVBQU9RLE1BQU9oVixLQUFLMUMsTUFBT2tYLEVBQVE1VCxFQUFVaUosT0FLL0NrZSxRQUFTLFNBQVVubkIsR0FDbEIsT0FBT1osS0FBSzhuQixJQUFpQixNQUFabG5CLEVBQ2hCWixLQUFLaVYsV0FBYWpWLEtBQUtpVixXQUFXb0osT0FBUXpkLE9BVTdDNFQsRUFBT3JULEtBQU0sQ0FDWnVnQixPQUFRLFNBQVV2TSxHQUNqQixJQUFJdU0sRUFBU3ZNLEVBQUtkLFdBQ2xCLE9BQU9xTixHQUE4QixLQUFwQkEsRUFBT3RSLFNBQWtCc1IsRUFBUyxNQUVwRHNHLFFBQVMsU0FBVTdTLEdBQ2xCLE9BQU8rRixFQUFLL0YsRUFBTSxlQUVuQjhTLGFBQWMsU0FBVTlTLEVBQU04QixFQUFJdVAsR0FDakMsT0FBT3RMLEVBQUsvRixFQUFNLGFBQWNxUixJQUVqQ2hYLEtBQU0sU0FBVTJGLEdBQ2YsT0FBT3VTLEVBQVN2UyxFQUFNLGdCQUV2QnRELEtBQU0sU0FBVXNELEdBQ2YsT0FBT3VTLEVBQVN2UyxFQUFNLG9CQUV2QitTLFFBQVMsU0FBVS9TLEdBQ2xCLE9BQU8rRixFQUFLL0YsRUFBTSxnQkFFbkIwUyxRQUFTLFNBQVUxUyxHQUNsQixPQUFPK0YsRUFBSy9GLEVBQU0sb0JBRW5CZ1QsVUFBVyxTQUFVaFQsRUFBTThCLEVBQUl1UCxHQUM5QixPQUFPdEwsRUFBSy9GLEVBQU0sY0FBZXFSLElBRWxDNEIsVUFBVyxTQUFValQsRUFBTThCLEVBQUl1UCxHQUM5QixPQUFPdEwsRUFBSy9GLEVBQU0sa0JBQW1CcVIsSUFFdENHLFNBQVUsU0FBVXhSLEdBQ25CLE9BQU93UixHQUFZeFIsRUFBS2QsWUFBYyxJQUFLNkwsV0FBWS9LLElBRXhEc1MsU0FBVSxTQUFVdFMsR0FDbkIsT0FBT3dSLEVBQVV4UixFQUFLK0ssYUFFdkI3TyxTQUFVLFNBQVU4RCxHQUNuQixPQUE2QixNQUF4QkEsRUFBS2tULGlCQUtUdFYsRUFBVW9DLEVBQUtrVCxpQkFFUmxULEVBQUtrVCxpQkFNUnBOLEVBQVU5RixFQUFNLGNBQ3BCQSxFQUFPQSxFQUFLN0gsU0FBVzZILEdBR2pCWCxFQUFPUSxNQUFPLEdBQUlHLEVBQUtnRyxnQkFFN0IsU0FBVW5lLEVBQU15WCxHQUNsQkQsRUFBT0MsR0FBSXpYLEdBQVMsU0FBVXdwQixFQUFPNWxCLEdBQ3BDLElBQUltTSxFQUFVeUgsRUFBT1UsSUFBS2xWLEtBQU15VSxFQUFJK1IsR0F1QnBDLE1BckIwQixVQUFyQnhwQixFQUFLZ0MsT0FBUSxLQUNqQjRCLEVBQVc0bEIsR0FHUDVsQixHQUFnQyxpQkFBYkEsSUFDdkJtTSxFQUFVeUgsRUFBTzZKLE9BQVF6ZCxFQUFVbU0sSUFHL0IvTSxLQUFLZSxPQUFTLElBR1p5bUIsRUFBa0J4cUIsSUFDdkJ3WCxFQUFPcUwsV0FBWTlTLEdBSWZ3YSxFQUFhcmhCLEtBQU1sSixJQUN2QitQLEVBQVFWLFdBSUhyTSxLQUFLOFUsVUFBVy9ILE9BR3pCLElBQUl1YixFQUFnQixvQkFzT3BCLFNBQVNDLEVBQVVobUIsR0FDbEIsT0FBT0EsRUFFUixTQUFTaW1CLEVBQVNDLEdBQ2pCLE1BQU1BLEVBR1AsU0FBU0MsRUFBWWhyQixFQUFPaXJCLEVBQVNDLEVBQVFDLEdBQzVDLElBQUlsZSxFQUVKLElBR01qTixHQUFTc0UsRUFBYzJJLEVBQVNqTixFQUFNb3JCLFNBQzFDbmUsRUFBTy9OLEtBQU1jLEdBQVEwYSxLQUFNdVEsR0FBVUksS0FBTUgsR0FHaENsckIsR0FBU3NFLEVBQWMySSxFQUFTak4sRUFBTTRSLE1BQ2pEM0UsRUFBTy9OLEtBQU1jLEVBQU9pckIsRUFBU0MsR0FRN0JELEVBQVF6b0IsV0FBT2lXLEVBQVcsQ0FBRXpZLEdBQVFzQixNQUFPNnBCLElBTTNDLE1BQVFuckIsR0FJVGtyQixFQUFPMW9CLFdBQU9pVyxFQUFXLENBQUV6WSxLQXZPN0I4VyxFQUFPd1UsVUFBWSxTQUFVN2UsR0FJNUJBLEVBQTZCLGlCQUFaQSxFQWxDbEIsU0FBd0JBLEdBQ3ZCLElBQUloTSxFQUFTLEdBSWIsT0FIQXFXLEVBQU9yVCxLQUFNZ0osRUFBUWpHLE1BQU9va0IsSUFBbUIsSUFBSSxTQUFVVyxFQUFHQyxHQUMvRC9xQixFQUFRK3FCLElBQVMsS0FFWC9xQixFQThCTmdyQixDQUFlaGYsR0FDZnFLLEVBQU8xUyxPQUFRLEdBQUlxSSxHQUVwQixJQUNDaWYsRUFHQUMsRUFHQUMsRUFHQUMsRUFHQXpRLEVBQU8sR0FHUDBRLEVBQVEsR0FHUkMsR0FBZSxFQUdmQyxFQUFPLFdBUU4sSUFMQUgsRUFBU0EsR0FBVXBmLEVBQVF3ZixLQUkzQkwsRUFBUUYsR0FBUyxFQUNUSSxFQUFNem9CLE9BQVEwb0IsR0FBZSxFQUVwQyxJQURBSixFQUFTRyxFQUFNeG9CLFVBQ0x5b0IsRUFBYzNRLEVBQUsvWCxTQUdtQyxJQUExRCtYLEVBQU0yUSxHQUFjdnBCLE1BQU9tcEIsRUFBUSxHQUFLQSxFQUFRLEtBQ3BEbGYsRUFBUXlmLGNBR1JILEVBQWMzUSxFQUFLL1gsT0FDbkJzb0IsR0FBUyxHQU1ObGYsRUFBUWtmLFNBQ2JBLEdBQVMsR0FHVkQsR0FBUyxFQUdKRyxJQUlIelEsRUFESXVRLEVBQ0csR0FJQSxLQU1WbkMsRUFBTyxDQUdOWSxJQUFLLFdBMkJKLE9BMUJLaFAsSUFHQ3VRLElBQVdELElBQ2ZLLEVBQWMzUSxFQUFLL1gsT0FBUyxFQUM1QnlvQixFQUFNL25CLEtBQU00bkIsSUFHYixTQUFXdkIsRUFBS2puQixHQUNmMlQsRUFBT3JULEtBQU1OLEdBQU0sU0FBVW9vQixFQUFHblMsR0FDMUI5VSxFQUFZOFUsR0FDVjNNLEVBQVFrYyxRQUFXYSxFQUFLdGtCLElBQUtrVSxJQUNsQ2dDLEVBQUtyWCxLQUFNcVYsR0FFREEsR0FBT0EsRUFBSS9WLFFBQTRCLFdBQWxCd1QsRUFBUXVDLElBR3hDZ1IsRUFBS2hSLE1BVFIsQ0FZSzFXLFdBRUFpcEIsSUFBV0QsR0FDZk0sS0FHSzFwQixNQUlSdVEsT0FBUSxXQVlQLE9BWEFpRSxFQUFPclQsS0FBTWYsV0FBVyxTQUFVNm9CLEVBQUduUyxHQUVwQyxJQURBLElBQUk4USxHQUNNQSxFQUFRcFQsRUFBT25KLFFBQVN5TCxFQUFLZ0MsRUFBTThPLEtBQWEsR0FDekQ5TyxFQUFLaEQsT0FBUThSLEVBQU8sR0FHZkEsR0FBUzZCLEdBQ2JBLE9BSUl6cEIsTUFLUjRDLElBQUssU0FBVTZSLEdBQ2QsT0FBT0EsRUFDTkQsRUFBT25KLFFBQVNvSixFQUFJcUUsSUFBVSxFQUM5QkEsRUFBSy9YLE9BQVMsR0FJaEI4b0IsTUFBTyxXQUlOLE9BSEsvUSxJQUNKQSxFQUFPLElBRUQ5WSxNQU1SOHBCLFFBQVMsV0FHUixPQUZBUCxFQUFTQyxFQUFRLEdBQ2pCMVEsRUFBT3VRLEVBQVMsR0FDVHJwQixNQUVSZ2IsU0FBVSxXQUNULE9BQVFsQyxHQU1UaVIsS0FBTSxXQUtMLE9BSkFSLEVBQVNDLEVBQVEsR0FDWEgsR0FBV0QsSUFDaEJ0USxFQUFPdVEsRUFBUyxJQUVWcnBCLE1BRVJ1cEIsT0FBUSxXQUNQLFFBQVNBLEdBSVZTLFNBQVUsU0FBVW5nQixFQUFTaEosR0FTNUIsT0FSTTBvQixJQUVMMW9CLEVBQU8sQ0FBRWdKLEdBRFRoSixFQUFPQSxHQUFRLElBQ1E3QixNQUFRNkIsRUFBSzdCLFFBQVU2QixHQUM5QzJvQixFQUFNL25CLEtBQU1aLEdBQ051b0IsR0FDTE0sS0FHSzFwQixNQUlSMHBCLEtBQU0sV0FFTCxPQURBeEMsRUFBSzhDLFNBQVVocUIsS0FBTUksV0FDZEosTUFJUnNwQixNQUFPLFdBQ04sUUFBU0EsSUFJWixPQUFPcEMsR0E0Q1IxUyxFQUFPMVMsT0FBUSxDQUVkbW9CLFNBQVUsU0FBVUMsR0FDbkIsSUFBSUMsRUFBUyxDQUlYLENBQUUsU0FBVSxXQUFZM1YsRUFBT3dVLFVBQVcsVUFDekN4VSxFQUFPd1UsVUFBVyxVQUFZLEdBQy9CLENBQUUsVUFBVyxPQUFReFUsRUFBT3dVLFVBQVcsZUFDdEN4VSxFQUFPd1UsVUFBVyxlQUFpQixFQUFHLFlBQ3ZDLENBQUUsU0FBVSxPQUFReFUsRUFBT3dVLFVBQVcsZUFDckN4VSxFQUFPd1UsVUFBVyxlQUFpQixFQUFHLGFBRXhDb0IsRUFBUSxVQUNSdEIsRUFBVSxDQUNUc0IsTUFBTyxXQUNOLE9BQU9BLEdBRVJDLE9BQVEsV0FFUCxPQURBQyxFQUFTbFMsS0FBTWhZLFdBQVkyb0IsS0FBTTNvQixXQUMxQkosTUFFUixNQUFTLFNBQVV5VSxHQUNsQixPQUFPcVUsRUFBUXhaLEtBQU0sS0FBTW1GLElBSTVCOFYsS0FBTSxXQUNMLElBQUlDLEVBQU1wcUIsVUFFVixPQUFPb1UsRUFBT3lWLFVBQVUsU0FBVVEsR0FDakNqVyxFQUFPclQsS0FBTWdwQixHQUFRLFNBQVVsVCxFQUFJeVQsR0FHbEMsSUFBSWpXLEVBQUt6UyxFQUFZd29CLEVBQUtFLEVBQU8sTUFBV0YsRUFBS0UsRUFBTyxJQUt4REosRUFBVUksRUFBTyxLQUFPLFdBQ3ZCLElBQUl6ZSxFQUFXd0ksR0FBTUEsRUFBR3ZVLE1BQU9GLEtBQU1JLFdBQ2hDNkwsR0FBWWpLLEVBQVlpSyxFQUFTNmMsU0FDckM3YyxFQUFTNmMsVUFDUDZCLFNBQVVGLEVBQVNHLFFBQ25CeFMsS0FBTXFTLEVBQVM5QixTQUNmSSxLQUFNMEIsRUFBUzdCLFFBRWpCNkIsRUFBVUMsRUFBTyxHQUFNLFFBQ3RCMXFCLEtBQ0F5VSxFQUFLLENBQUV4SSxHQUFhN0wsaUJBS3hCb3FCLEVBQU0sUUFDSDFCLFdBRUx4WixLQUFNLFNBQVV1YixFQUFhQyxFQUFZQyxHQUN4QyxJQUFJQyxFQUFXLEVBQ2YsU0FBU3JDLEVBQVNzQyxFQUFPWCxFQUFVMU4sRUFBU3NPLEdBQzNDLE9BQU8sV0FDTixJQUFJQyxFQUFPbnJCLEtBQ1ZhLEVBQU9ULFVBQ1BnckIsRUFBYSxXQUNaLElBQUluZixFQUFVcUQsRUFLZCxLQUFLMmIsRUFBUUQsR0FBYixDQVFBLElBSkEvZSxFQUFXMlEsRUFBUTFjLE1BQU9pckIsRUFBTXRxQixNQUlkeXBCLEVBQVN4QixVQUMxQixNQUFNLElBQUl1QyxVQUFXLDRCQU90Qi9iLEVBQU9yRCxJQUtnQixpQkFBYkEsR0FDWSxtQkFBYkEsSUFDUkEsRUFBU3FELEtBR0x0TixFQUFZc04sR0FHWDRiLEVBQ0o1YixFQUFLMVMsS0FDSnFQLEVBQ0EwYyxFQUFTcUMsRUFBVVYsRUFBVS9CLEVBQVUyQyxHQUN2Q3ZDLEVBQVNxQyxFQUFVVixFQUFVOUIsRUFBUzBDLEtBT3ZDRixJQUVBMWIsRUFBSzFTLEtBQ0pxUCxFQUNBMGMsRUFBU3FDLEVBQVVWLEVBQVUvQixFQUFVMkMsR0FDdkN2QyxFQUFTcUMsRUFBVVYsRUFBVTlCLEVBQVMwQyxHQUN0Q3ZDLEVBQVNxQyxFQUFVVixFQUFVL0IsRUFDNUIrQixFQUFTZ0IsZUFTUDFPLElBQVkyTCxJQUNoQjRDLE9BQU9oVixFQUNQdFYsRUFBTyxDQUFFb0wsS0FLUmlmLEdBQVdaLEVBQVNpQixhQUFlSixFQUFNdHFCLE1BSzdDMnFCLEVBQVVOLEVBQ1RFLEVBQ0EsV0FDQyxJQUNDQSxJQUNDLE1BQVEzbUIsR0FFSitQLEVBQU95VixTQUFTd0IsZUFDcEJqWCxFQUFPeVYsU0FBU3dCLGNBQWVobkIsRUFDOUIrbUIsRUFBUUUsWUFNTFQsRUFBUSxHQUFLRCxJQUlacE8sSUFBWTRMLElBQ2hCMkMsT0FBT2hWLEVBQ1B0VixFQUFPLENBQUU0RCxJQUdWNmxCLEVBQVNxQixXQUFZUixFQUFNdHFCLE1BUzNCb3FCLEVBQ0pPLEtBS0toWCxFQUFPeVYsU0FBUzJCLGVBQ3BCSixFQUFRRSxXQUFhbFgsRUFBT3lWLFNBQVMyQixnQkFFdENyckIsRUFBT2tHLFdBQVkra0IsS0FLdEIsT0FBT2hYLEVBQU95VixVQUFVLFNBQVVRLEdBR2pDTixFQUFRLEdBQUssR0FBSXJDLElBQ2hCYSxFQUNDLEVBQ0E4QixFQUNBem9CLEVBQVkrb0IsR0FDWEEsRUFDQXhDLEVBQ0RrQyxFQUFTYSxhQUtYbkIsRUFBUSxHQUFLLEdBQUlyQyxJQUNoQmEsRUFDQyxFQUNBOEIsRUFDQXpvQixFQUFZNm9CLEdBQ1hBLEVBQ0F0QyxJQUtINEIsRUFBUSxHQUFLLEdBQUlyQyxJQUNoQmEsRUFDQyxFQUNBOEIsRUFDQXpvQixFQUFZOG9CLEdBQ1hBLEVBQ0F0QyxPQUdBTSxXQUtMQSxRQUFTLFNBQVU1cEIsR0FDbEIsT0FBYyxNQUFQQSxFQUFjc1YsRUFBTzFTLE9BQVE1QyxFQUFLNHBCLEdBQVlBLElBR3ZEd0IsRUFBVyxHQWtFWixPQS9EQTlWLEVBQU9yVCxLQUFNZ3BCLEdBQVEsU0FBVTF0QixFQUFHaXVCLEdBQ2pDLElBQUk1UixFQUFPNFIsRUFBTyxHQUNqQm1CLEVBQWNuQixFQUFPLEdBS3RCNUIsRUFBUzRCLEVBQU8sSUFBUTVSLEVBQUtnUCxJQUd4QitELEdBQ0ovUyxFQUFLZ1AsS0FDSixXQUlDc0MsRUFBUXlCLElBS1QxQixFQUFRLEVBQUkxdEIsR0FBSyxHQUFJcXRCLFFBSXJCSyxFQUFRLEVBQUkxdEIsR0FBSyxHQUFJcXRCLFFBR3JCSyxFQUFRLEdBQUssR0FBSUosS0FHakJJLEVBQVEsR0FBSyxHQUFJSixNQU9uQmpSLEVBQUtnUCxJQUFLNEMsRUFBTyxHQUFJaEIsTUFLckJZLEVBQVVJLEVBQU8sSUFBUSxXQUV4QixPQURBSixFQUFVSSxFQUFPLEdBQU0sUUFBVTFxQixPQUFTc3FCLE9BQVduVSxFQUFZblcsS0FBTUksV0FDaEVKLE1BTVJzcUIsRUFBVUksRUFBTyxHQUFNLFFBQVc1UixFQUFLa1IsWUFJeENsQixFQUFRQSxRQUFTd0IsR0FHWkosR0FDSkEsRUFBS3R0QixLQUFNMHRCLEVBQVVBLEdBSWZBLEdBSVJ3QixLQUFNLFNBQVVDLEdBQ2YsSUFHQ0MsRUFBWTVyQixVQUFVVyxPQUd0QnRFLEVBQUl1dkIsRUFHSkMsRUFBa0JsdEIsTUFBT3RDLEdBQ3pCeXZCLEVBQWdCbHRCLEVBQU1wQyxLQUFNd0QsV0FHNUIrckIsRUFBUzNYLEVBQU95VixXQUdoQm1DLEVBQWEsU0FBVTN2QixHQUN0QixPQUFPLFNBQVVpQixHQUNoQnV1QixFQUFpQnh2QixHQUFNdUQsS0FDdkJrc0IsRUFBZXp2QixHQUFNMkQsVUFBVVcsT0FBUyxFQUFJL0IsRUFBTXBDLEtBQU13RCxXQUFjMUMsSUFDNURzdUIsR0FDVEcsRUFBT1osWUFBYVUsRUFBaUJDLEtBTXpDLEdBQUtGLEdBQWEsSUFDakJ0RCxFQUFZcUQsRUFBYUksRUFBTy9ULEtBQU1nVSxFQUFZM3ZCLElBQU1rc0IsUUFBU3dELEVBQU92RCxRQUN0RW9ELEdBR3NCLFlBQW5CRyxFQUFPL0IsU0FDWHBvQixFQUFZa3FCLEVBQWV6dkIsSUFBT3l2QixFQUFlenZCLEdBQUk2UyxPQUVyRCxPQUFPNmMsRUFBTzdjLE9BS2hCLEtBQVE3UyxLQUNQaXNCLEVBQVl3RCxFQUFlenZCLEdBQUsydkIsRUFBWTN2QixHQUFLMHZCLEVBQU92RCxRQUd6RCxPQUFPdUQsRUFBT3JELGFBT2hCLElBQUl1RCxFQUFjLHlEQUVsQjdYLEVBQU95VixTQUFTd0IsY0FBZ0IsU0FBVW5qQixFQUFPZ2tCLEdBSTNDL3JCLEVBQU9zQixTQUFXdEIsRUFBT3NCLFFBQVEwcUIsTUFBUWprQixHQUFTK2pCLEVBQVlubUIsS0FBTW9DLEVBQU10TCxPQUM5RXVELEVBQU9zQixRQUFRMHFCLEtBQU0sOEJBQWdDamtCLEVBQU1zRixRQUFTdEYsRUFBTWdrQixNQUFPQSxJQU9uRjlYLEVBQU9nWSxlQUFpQixTQUFVbGtCLEdBQ2pDL0gsRUFBT2tHLFlBQVksV0FDbEIsTUFBTTZCLE1BUVIsSUFBSW1rQixFQUFZalksRUFBT3lWLFdBa0R2QixTQUFTeUMsSUFDUjNuQixFQUFTNG5CLG9CQUFxQixtQkFBb0JELEdBQ2xEbnNCLEVBQU9vc0Isb0JBQXFCLE9BQVFELEdBQ3BDbFksRUFBTzhTLFFBbkRSOVMsRUFBT0MsR0FBRzZTLE1BQVEsU0FBVTdTLEdBWTNCLE9BVkFnWSxFQUNFbmQsS0FBTW1GLEdBS05tWSxPQUFPLFNBQVV0a0IsR0FDakJrTSxFQUFPZ1ksZUFBZ0Jsa0IsTUFHbEJ0SSxNQUdSd1UsRUFBTzFTLE9BQVEsQ0FHZHVVLFNBQVMsRUFJVHdXLFVBQVcsRUFHWHZGLE1BQU8sU0FBVS9YLEtBR0YsSUFBVEEsSUFBa0JpRixFQUFPcVksVUFBWXJZLEVBQU82QixXQUtqRDdCLEVBQU82QixTQUFVLEdBR0gsSUFBVDlHLEtBQW1CaUYsRUFBT3FZLFVBQVksR0FLM0NKLEVBQVVsQixZQUFheG1CLEVBQVUsQ0FBRXlQLFFBSXJDQSxFQUFPOFMsTUFBTWhZLEtBQU9tZCxFQUFVbmQsS0FhRCxhQUF4QnZLLEVBQVMrbkIsWUFDYSxZQUF4Qi9uQixFQUFTK25CLGFBQTZCL25CLEVBQVM0WSxnQkFBZ0JvUCxTQUdqRXhzQixFQUFPa0csV0FBWStOLEVBQU84UyxRQUsxQnZpQixFQUFTZ1osaUJBQWtCLG1CQUFvQjJPLEdBRy9DbnNCLEVBQU93ZCxpQkFBa0IsT0FBUTJPLElBUWxDLElBQUlNLEVBQVMsU0FBVWpZLEVBQU9OLEVBQUl6VyxFQUFLTixFQUFPdXZCLEVBQVdDLEVBQVVDLEdBQ2xFLElBQUkxd0IsRUFBSSxFQUNQcVEsRUFBTWlJLEVBQU1oVSxPQUNacXNCLEVBQWMsTUFBUHB2QixFQUdSLEdBQXVCLFdBQWxCdVcsRUFBUXZXLEdBRVosSUFBTXZCLEtBRE53d0IsR0FBWSxFQUNEanZCLEVBQ1ZndkIsRUFBUWpZLEVBQU9OLEVBQUloWSxFQUFHdUIsRUFBS3ZCLElBQUssRUFBTXl3QixFQUFVQyxRQUkzQyxRQUFlaFgsSUFBVnpZLElBQ1h1dkIsR0FBWSxFQUVOanJCLEVBQVl0RSxLQUNqQnl2QixHQUFNLEdBR0ZDLElBR0NELEdBQ0oxWSxFQUFHN1gsS0FBTW1ZLEVBQU9yWCxHQUNoQitXLEVBQUssT0FJTDJZLEVBQU8zWSxFQUNQQSxFQUFLLFNBQVVVLEVBQU1rWSxFQUFNM3ZCLEdBQzFCLE9BQU8wdkIsRUFBS3h3QixLQUFNNFgsRUFBUVcsR0FBUXpYLE1BS2hDK1csR0FDSixLQUFRaFksRUFBSXFRLEVBQUtyUSxJQUNoQmdZLEVBQ0NNLEVBQU90WSxHQUFLdUIsRUFBS212QixFQUNqQnp2QixFQUNBQSxFQUFNZCxLQUFNbVksRUFBT3RZLEdBQUtBLEVBQUdnWSxFQUFJTSxFQUFPdFksR0FBS3VCLEtBTS9DLE9BQUtpdkIsRUFDR2xZLEVBSUhxWSxFQUNHM1ksRUFBRzdYLEtBQU1tWSxHQUdWakksRUFBTTJILEVBQUlNLEVBQU8sR0FBSy9XLEdBQVFrdkIsR0FLbENJLEVBQVksUUFDZkMsRUFBYSxZQUdkLFNBQVNDLEVBQVlDLEVBQU1DLEdBQzFCLE9BQU9BLEVBQU9DLGNBTWYsU0FBU0MsRUFBV3BiLEdBQ25CLE9BQU9BLEVBQU8vUyxRQUFTNnRCLEVBQVcsT0FBUTd0QixRQUFTOHRCLEVBQVlDLEdBRWhFLElBQUlLLEVBQWEsU0FBVUMsR0FRMUIsT0FBMEIsSUFBbkJBLEVBQU0xZCxVQUFxQyxJQUFuQjBkLEVBQU0xZCxZQUFzQjBkLEVBQU0xZCxVQU1sRSxTQUFTMmQsSUFDUi90QixLQUFLb1csUUFBVTVCLEVBQU80QixRQUFVMlgsRUFBS0MsTUFHdENELEVBQUtDLElBQU0sRUFFWEQsRUFBSzF2QixVQUFZLENBRWhCd1IsTUFBTyxTQUFVaWUsR0FHaEIsSUFBSXB3QixFQUFRb3dCLEVBQU85dEIsS0FBS29XLFNBNEJ4QixPQXpCTTFZLElBQ0xBLEVBQVEsR0FLSG13QixFQUFZQyxLQUlYQSxFQUFNMWQsU0FDVjBkLEVBQU85dEIsS0FBS29XLFNBQVkxWSxFQU14QlAsT0FBT0MsZUFBZ0Iwd0IsRUFBTzl0QixLQUFLb1csUUFBUyxDQUMzQzFZLE1BQU9BLEVBQ1B1d0IsY0FBYyxNQU1YdndCLEdBRVJ3d0IsSUFBSyxTQUFVSixFQUFPbm1CLEVBQU1qSyxHQUMzQixJQUFJeXdCLEVBQ0h0ZSxFQUFRN1AsS0FBSzZQLE1BQU9pZSxHQUlyQixHQUFxQixpQkFBVG5tQixFQUNYa0ksRUFBTytkLEVBQVdqbUIsSUFBV2pLLE9BTTdCLElBQU15d0IsS0FBUXhtQixFQUNia0ksRUFBTytkLEVBQVdPLElBQVd4bUIsRUFBTXdtQixHQUdyQyxPQUFPdGUsR0FFUnZTLElBQUssU0FBVXd3QixFQUFPOXZCLEdBQ3JCLFlBQWVtWSxJQUFSblksRUFDTmdDLEtBQUs2UCxNQUFPaWUsR0FHWkEsRUFBTzl0QixLQUFLb1csVUFBYTBYLEVBQU85dEIsS0FBS29XLFNBQVd3WCxFQUFXNXZCLEtBRTdEZ3ZCLE9BQVEsU0FBVWMsRUFBTzl2QixFQUFLTixHQWE3QixZQUFheVksSUFBUm5ZLEdBQ0NBLEdBQXNCLGlCQUFSQSxRQUFnQ21ZLElBQVZ6WSxFQUVsQ3NDLEtBQUsxQyxJQUFLd3dCLEVBQU85dkIsSUFTekJnQyxLQUFLa3VCLElBQUtKLEVBQU85dkIsRUFBS04sUUFJTHlZLElBQVZ6WSxFQUFzQkEsRUFBUU0sSUFFdEN1UyxPQUFRLFNBQVV1ZCxFQUFPOXZCLEdBQ3hCLElBQUl2QixFQUNIb1QsRUFBUWllLEVBQU85dEIsS0FBS29XLFNBRXJCLFFBQWVELElBQVZ0RyxFQUFMLENBSUEsUUFBYXNHLElBQVJuWSxFQUFvQixDQWtCeEJ2QixHQVhDdUIsRUFKSWUsTUFBTWtELFFBQVNqRSxHQUliQSxFQUFJa1gsSUFBSzBZLElBRWY1dkIsRUFBTTR2QixFQUFXNXZCLE1BSUo2UixFQUNaLENBQUU3UixHQUNBQSxFQUFJa0csTUFBT29rQixJQUFtQixJQUcxQnZuQixPQUVSLEtBQVF0RSxZQUNBb1QsRUFBTzdSLEVBQUt2QixVQUtSMFosSUFBUm5ZLEdBQXFCd1csRUFBTzlILGNBQWVtRCxNQU0xQ2llLEVBQU0xZCxTQUNWMGQsRUFBTzl0QixLQUFLb1csY0FBWUQsU0FFakIyWCxFQUFPOXRCLEtBQUtvVyxZQUl0QmdZLFFBQVMsU0FBVU4sR0FDbEIsSUFBSWplLEVBQVFpZSxFQUFPOXRCLEtBQUtvVyxTQUN4QixZQUFpQkQsSUFBVnRHLElBQXdCMkUsRUFBTzlILGNBQWVtRCxLQUd2RCxJQUFJd2UsRUFBVyxJQUFJTixFQUVmTyxFQUFXLElBQUlQLEVBY2ZRLEVBQVMsZ0NBQ1pDLEdBQWEsU0EyQmQsU0FBU0MsR0FBVXRaLEVBQU1uWCxFQUFLMkosR0FDN0IsSUFBSTNLLEVBSUosUUFBY21aLElBQVR4TyxHQUF3QyxJQUFsQndOLEVBQUsvRSxTQUkvQixHQUhBcFQsRUFBTyxRQUFVZ0IsRUFBSXlCLFFBQVMrdUIsR0FBWSxPQUFRMWxCLGNBRzdCLGlCQUZyQm5CLEVBQU93TixFQUFLL0csYUFBY3BSLElBRU0sQ0FDL0IsSUFDQzJLLEVBcENKLFNBQWtCQSxHQUNqQixNQUFjLFNBQVRBLEdBSVMsVUFBVEEsSUFJUyxTQUFUQSxFQUNHLEtBSUhBLEtBQVVBLEVBQU8sSUFDYkEsRUFHSjRtQixFQUFPcm9CLEtBQU15QixHQUNWK21CLEtBQUtDLE1BQU9obkIsR0FHYkEsR0FjR2luQixDQUFTam5CLEdBQ2YsTUFBUWxELElBR1Y2cEIsRUFBU0osSUFBSy9ZLEVBQU1uWCxFQUFLMkosUUFFekJBLE9BQU93TyxFQUdULE9BQU94TyxFQUdSNk0sRUFBTzFTLE9BQVEsQ0FDZHNzQixRQUFTLFNBQVVqWixHQUNsQixPQUFPbVosRUFBU0YsUUFBU2paLElBQVVrWixFQUFTRCxRQUFTalosSUFHdER4TixLQUFNLFNBQVV3TixFQUFNblksRUFBTTJLLEdBQzNCLE9BQU8ybUIsRUFBU3RCLE9BQVE3WCxFQUFNblksRUFBTTJLLElBR3JDa25CLFdBQVksU0FBVTFaLEVBQU1uWSxHQUMzQnN4QixFQUFTL2QsT0FBUTRFLEVBQU1uWSxJQUt4Qjh4QixNQUFPLFNBQVUzWixFQUFNblksRUFBTTJLLEdBQzVCLE9BQU8wbUIsRUFBU3JCLE9BQVE3WCxFQUFNblksRUFBTTJLLElBR3JDb25CLFlBQWEsU0FBVTVaLEVBQU1uWSxHQUM1QnF4QixFQUFTOWQsT0FBUTRFLEVBQU1uWSxNQUl6QndYLEVBQU9DLEdBQUczUyxPQUFRLENBQ2pCNkYsS0FBTSxTQUFVM0osRUFBS04sR0FDcEIsSUFBSWpCLEVBQUdPLEVBQU0ySyxFQUNad04sRUFBT25WLEtBQU0sR0FDYjJjLEVBQVF4SCxHQUFRQSxFQUFLK0QsV0FHdEIsUUFBYS9DLElBQVJuWSxFQUFvQixDQUN4QixHQUFLZ0MsS0FBS2UsU0FDVDRHLEVBQU8ybUIsRUFBU2h4QixJQUFLNlgsR0FFRSxJQUFsQkEsRUFBSy9FLFdBQW1CaWUsRUFBUy93QixJQUFLNlgsRUFBTSxpQkFBbUIsQ0FFbkUsSUFEQTFZLEVBQUlrZ0IsRUFBTTViLE9BQ0Z0RSxLQUlGa2dCLEVBQU9sZ0IsSUFFc0IsS0FEakNPLEVBQU8yZixFQUFPbGdCLEdBQUlPLE1BQ1JvUSxRQUFTLFdBQ2xCcFEsRUFBTzR3QixFQUFXNXdCLEVBQUtnQyxNQUFPLElBQzlCeXZCLEdBQVV0WixFQUFNblksRUFBTTJLLEVBQU0zSyxLQUkvQnF4QixFQUFTSCxJQUFLL1ksRUFBTSxnQkFBZ0IsR0FJdEMsT0FBT3hOLEVBSVIsTUFBb0IsaUJBQVIzSixFQUNKZ0MsS0FBS21CLE1BQU0sV0FDakJtdEIsRUFBU0osSUFBS2x1QixLQUFNaEMsTUFJZmd2QixFQUFRaHRCLE1BQU0sU0FBVXRDLEdBQzlCLElBQUlpSyxFQU9KLEdBQUt3TixRQUFrQmdCLElBQVZ6WSxFQUtaLFlBQWN5WSxLQURkeE8sRUFBTzJtQixFQUFTaHhCLElBQUs2WCxFQUFNblgsVUFRYm1ZLEtBRGR4TyxFQUFPOG1CLEdBQVV0WixFQUFNblgsSUFMZjJKLE9BV1IsRUFJRDNILEtBQUttQixNQUFNLFdBR1ZtdEIsRUFBU0osSUFBS2x1QixLQUFNaEMsRUFBS04sUUFFeEIsS0FBTUEsRUFBTzBDLFVBQVVXLE9BQVMsRUFBRyxNQUFNLElBRzdDOHRCLFdBQVksU0FBVTd3QixHQUNyQixPQUFPZ0MsS0FBS21CLE1BQU0sV0FDakJtdEIsRUFBUy9kLE9BQVF2USxLQUFNaEMsU0FNMUJ3VyxFQUFPMVMsT0FBUSxDQUNkMG5CLE1BQU8sU0FBVXJVLEVBQU1yTCxFQUFNbkMsR0FDNUIsSUFBSTZoQixFQUVKLEdBQUtyVSxFQVlKLE9BWEFyTCxHQUFTQSxHQUFRLE1BQVMsUUFDMUIwZixFQUFRNkUsRUFBUy93QixJQUFLNlgsRUFBTXJMLEdBR3ZCbkMsS0FDRTZoQixHQUFTenFCLE1BQU1rRCxRQUFTMEYsR0FDN0I2aEIsRUFBUTZFLEVBQVNyQixPQUFRN1gsRUFBTXJMLEVBQU0wSyxFQUFPelMsVUFBVzRGLElBRXZENmhCLEVBQU0vbkIsS0FBTWtHLElBR1A2aEIsR0FBUyxJQUlsQndGLFFBQVMsU0FBVTdaLEVBQU1yTCxHQUN4QkEsRUFBT0EsR0FBUSxLQUVmLElBQUkwZixFQUFRaFYsRUFBT2dWLE1BQU9yVSxFQUFNckwsR0FDL0JtbEIsRUFBY3pGLEVBQU16b0IsT0FDcEIwVCxFQUFLK1UsRUFBTXhvQixRQUNYa3VCLEVBQVExYSxFQUFPMmEsWUFBYWhhLEVBQU1yTCxHQU12QixlQUFQMkssSUFDSkEsRUFBSytVLEVBQU14b0IsUUFDWGl1QixLQUdJeGEsSUFJVSxPQUFUM0ssR0FDSjBmLEVBQU03bkIsUUFBUyxxQkFJVHV0QixFQUFNRSxLQUNiM2EsRUFBRzdYLEtBQU11WSxHQXBCRixXQUNOWCxFQUFPd2EsUUFBUzdaLEVBQU1yTCxLQW1CRm9sQixLQUdoQkQsR0FBZUMsR0FDcEJBLEVBQU1yRixNQUFNSCxRQUtkeUYsWUFBYSxTQUFVaGEsRUFBTXJMLEdBQzVCLElBQUk5TCxFQUFNOEwsRUFBTyxhQUNqQixPQUFPdWtCLEVBQVMvd0IsSUFBSzZYLEVBQU1uWCxJQUFTcXdCLEVBQVNyQixPQUFRN1gsRUFBTW5YLEVBQUssQ0FDL0Q2ckIsTUFBT3JWLEVBQU93VSxVQUFXLGVBQWdCbEIsS0FBSyxXQUM3Q3VHLEVBQVM5ZCxPQUFRNEUsRUFBTSxDQUFFckwsRUFBTyxRQUFTOUwsWUFNN0N3VyxFQUFPQyxHQUFHM1MsT0FBUSxDQUNqQjBuQixNQUFPLFNBQVUxZixFQUFNbkMsR0FDdEIsSUFBSTBuQixFQUFTLEVBUWIsTUFOcUIsaUJBQVR2bEIsSUFDWG5DLEVBQU9tQyxFQUNQQSxFQUFPLEtBQ1B1bEIsS0FHSWp2QixVQUFVVyxPQUFTc3VCLEVBQ2hCN2EsRUFBT2dWLE1BQU94cEIsS0FBTSxHQUFLOEosUUFHakJxTSxJQUFUeE8sRUFDTjNILEtBQ0FBLEtBQUttQixNQUFNLFdBQ1YsSUFBSXFvQixFQUFRaFYsRUFBT2dWLE1BQU94cEIsS0FBTThKLEVBQU1uQyxHQUd0QzZNLEVBQU8yYSxZQUFhbnZCLEtBQU04SixHQUVaLE9BQVRBLEdBQWdDLGVBQWYwZixFQUFPLElBQzVCaFYsRUFBT3dhLFFBQVNodkIsS0FBTThKLE9BSTFCa2xCLFFBQVMsU0FBVWxsQixHQUNsQixPQUFPOUosS0FBS21CLE1BQU0sV0FDakJxVCxFQUFPd2EsUUFBU2h2QixLQUFNOEosT0FHeEJ3bEIsV0FBWSxTQUFVeGxCLEdBQ3JCLE9BQU85SixLQUFLd3BCLE1BQU8xZixHQUFRLEtBQU0sS0FLbENnZixRQUFTLFNBQVVoZixFQUFNNUssR0FDeEIsSUFBSXVmLEVBQ0g4USxFQUFRLEVBQ1JDLEVBQVFoYixFQUFPeVYsV0FDZnZLLEVBQVcxZixLQUNYdkQsRUFBSXVELEtBQUtlLE9BQ1Q0bkIsRUFBVSxhQUNDNEcsR0FDVEMsRUFBTWpFLFlBQWE3TCxFQUFVLENBQUVBLEtBVWxDLElBTnFCLGlCQUFUNVYsSUFDWDVLLEVBQU00SyxFQUNOQSxPQUFPcU0sR0FFUnJNLEVBQU9BLEdBQVEsS0FFUHJOLE1BQ1BnaUIsRUFBTTRQLEVBQVMvd0IsSUFBS29pQixFQUFVampCLEdBQUtxTixFQUFPLGdCQUM5QjJVLEVBQUlvTCxRQUNmMEYsSUFDQTlRLEVBQUlvTCxNQUFNL0IsSUFBS2EsSUFJakIsT0FEQUEsSUFDTzZHLEVBQU0xRyxRQUFTNXBCLE1BR3hCLElBQUl1d0IsR0FBTyxzQ0FBMENDLE9BRWpEQyxHQUFVLElBQUl6bUIsT0FBUSxpQkFBbUJ1bUIsR0FBTyxjQUFlLEtBRy9ERyxHQUFZLENBQUUsTUFBTyxRQUFTLFNBQVUsUUFFeENqUyxHQUFrQjVZLEVBQVM0WSxnQkFJMUJrUyxHQUFhLFNBQVUxYSxHQUN6QixPQUFPWCxFQUFPeUQsU0FBVTlDLEVBQUt1RyxjQUFldkcsSUFFN0MyYSxHQUFXLENBQUVBLFVBQVUsR0FPbkJuUyxHQUFnQm9TLGNBQ3BCRixHQUFhLFNBQVUxYSxHQUN0QixPQUFPWCxFQUFPeUQsU0FBVTlDLEVBQUt1RyxjQUFldkcsSUFDM0NBLEVBQUs0YSxZQUFhRCxNQUFlM2EsRUFBS3VHLGdCQUcxQyxJQUFJc1UsR0FBcUIsU0FBVTdhLEVBQU1zSCxHQU92QyxNQUE4QixVQUg5QnRILEVBQU9zSCxHQUFNdEgsR0FHRDhhLE1BQU14dEIsU0FDTSxLQUF2QjBTLEVBQUs4YSxNQUFNeHRCLFNBTVhvdEIsR0FBWTFhLElBRXNCLFNBQWxDWCxFQUFPMGIsSUFBSy9hLEVBQU0sWUFLckIsU0FBU2diLEdBQVdoYixFQUFNZ1osRUFBTWlDLEVBQVlDLEdBQzNDLElBQUlDLEVBQVVDLEVBQ2JDLEVBQWdCLEdBQ2hCQyxFQUFlSixFQUNkLFdBQ0MsT0FBT0EsRUFBTXRULE9BRWQsV0FDQyxPQUFPdkksRUFBTzBiLElBQUsvYSxFQUFNZ1osRUFBTSxLQUVqQ3VDLEVBQVVELElBQ1ZFLEVBQU9QLEdBQWNBLEVBQVksS0FBUzViLEVBQU9vYyxVQUFXekMsR0FBUyxHQUFLLE1BRzFFMEMsRUFBZ0IxYixFQUFLL0UsV0FDbEJvRSxFQUFPb2MsVUFBV3pDLElBQW1CLE9BQVR3QyxJQUFrQkQsSUFDaERmLEdBQVExbUIsS0FBTXVMLEVBQU8wYixJQUFLL2EsRUFBTWdaLElBRWxDLEdBQUswQyxHQUFpQkEsRUFBZSxLQUFRRixFQUFPLENBWW5ELElBUkFELEdBQW9CLEVBR3BCQyxFQUFPQSxHQUFRRSxFQUFlLEdBRzlCQSxHQUFpQkgsR0FBVyxFQUVwQkYsS0FJUGhjLEVBQU95YixNQUFPOWEsRUFBTWdaLEVBQU0wQyxFQUFnQkYsSUFDbkMsRUFBSUosSUFBWSxHQUFNQSxFQUFRRSxJQUFpQkMsR0FBVyxNQUFXLElBQzNFRixFQUFnQixHQUVqQkssR0FBZ0NOLEVBSWpDTSxHQUFnQyxFQUNoQ3JjLEVBQU95YixNQUFPOWEsRUFBTWdaLEVBQU0wQyxFQUFnQkYsR0FHMUNQLEVBQWFBLEdBQWMsR0FnQjVCLE9BYktBLElBQ0pTLEdBQWlCQSxJQUFrQkgsR0FBVyxFQUc5Q0osRUFBV0YsRUFBWSxHQUN0QlMsR0FBa0JULEVBQVksR0FBTSxHQUFNQSxFQUFZLElBQ3JEQSxFQUFZLEdBQ1RDLElBQ0pBLEVBQU1NLEtBQU9BLEVBQ2JOLEVBQU01TyxNQUFRb1AsRUFDZFIsRUFBTXphLElBQU0wYSxJQUdQQSxFQUlSLElBQUlRLEdBQW9CLEdBRXhCLFNBQVNDLEdBQW1CNWIsR0FDM0IsSUFBSWlQLEVBQ0hyUSxFQUFNb0IsRUFBS3VHLGNBQ1hULEVBQVc5RixFQUFLOEYsU0FDaEJ4WSxFQUFVcXVCLEdBQW1CN1YsR0FFOUIsT0FBS3hZLElBSUwyaEIsRUFBT3JRLEVBQUlpZCxLQUFLNWMsWUFBYUwsRUFBSXhPLGNBQWUwVixJQUNoRHhZLEVBQVUrUixFQUFPMGIsSUFBSzlMLEVBQU0sV0FFNUJBLEVBQUsvUCxXQUFXQyxZQUFhOFAsR0FFWixTQUFaM2hCLElBQ0pBLEVBQVUsU0FFWHF1QixHQUFtQjdWLEdBQWF4WSxFQUV6QkEsR0FHUixTQUFTd3VCLEdBQVV2UixFQUFVd1IsR0FPNUIsSUFOQSxJQUFJenVCLEVBQVMwUyxFQUNaZ2MsRUFBUyxHQUNUdkosRUFBUSxFQUNSN21CLEVBQVMyZSxFQUFTM2UsT0FHWDZtQixFQUFRN21CLEVBQVE2bUIsS0FDdkJ6UyxFQUFPdUssRUFBVWtJLElBQ05xSSxRQUlYeHRCLEVBQVUwUyxFQUFLOGEsTUFBTXh0QixRQUNoQnl1QixHQUthLFNBQVp6dUIsSUFDSjB1QixFQUFRdkosR0FBVXlHLEVBQVMvd0IsSUFBSzZYLEVBQU0sWUFBZSxLQUMvQ2djLEVBQVF2SixLQUNielMsRUFBSzhhLE1BQU14dEIsUUFBVSxLQUdLLEtBQXZCMFMsRUFBSzhhLE1BQU14dEIsU0FBa0J1dEIsR0FBb0I3YSxLQUNyRGdjLEVBQVF2SixHQUFVbUosR0FBbUI1YixLQUdyQixTQUFaMVMsSUFDSjB1QixFQUFRdkosR0FBVSxPQUdsQnlHLEVBQVNILElBQUsvWSxFQUFNLFVBQVcxUyxLQU1sQyxJQUFNbWxCLEVBQVEsRUFBR0EsRUFBUTdtQixFQUFRNm1CLElBQ1IsTUFBbkJ1SixFQUFRdkosS0FDWmxJLEVBQVVrSSxHQUFRcUksTUFBTXh0QixRQUFVMHVCLEVBQVF2SixJQUk1QyxPQUFPbEksRUFHUmxMLEVBQU9DLEdBQUczUyxPQUFRLENBQ2pCb3ZCLEtBQU0sV0FDTCxPQUFPRCxHQUFVanhCLE1BQU0sSUFFeEJveEIsS0FBTSxXQUNMLE9BQU9ILEdBQVVqeEIsT0FFbEJxeEIsT0FBUSxTQUFVakgsR0FDakIsTUFBc0Isa0JBQVZBLEVBQ0pBLEVBQVFwcUIsS0FBS2t4QixPQUFTbHhCLEtBQUtveEIsT0FHNUJweEIsS0FBS21CLE1BQU0sV0FDWjZ1QixHQUFvQmh3QixNQUN4QndVLEVBQVF4VSxNQUFPa3hCLE9BRWYxYyxFQUFReFUsTUFBT294QixhQUtuQixJQVVFRSxHQUNBNVMsR0FYRTZTLEdBQWlCLHdCQUVqQkMsR0FBVyxpQ0FFWEMsR0FBYyxxQ0FNaEJILEdBRGN2c0IsRUFBUzJzQix5QkFDUnRkLFlBQWFyUCxFQUFTUSxjQUFlLFNBQ3BEbVosR0FBUTNaLEVBQVNRLGNBQWUsVUFNM0IyTyxhQUFjLE9BQVEsU0FDNUJ3SyxHQUFNeEssYUFBYyxVQUFXLFdBQy9Cd0ssR0FBTXhLLGFBQWMsT0FBUSxLQUU1Qm9kLEdBQUlsZCxZQUFhc0ssSUFJakJwTCxFQUFRcWUsV0FBYUwsR0FBSU0sV0FBVyxHQUFPQSxXQUFXLEdBQU9oUSxVQUFVWSxRQUl2RThPLEdBQUlqaEIsVUFBWSx5QkFDaEJpRCxFQUFRdWUsaUJBQW1CUCxHQUFJTSxXQUFXLEdBQU9oUSxVQUFVd0UsYUFLM0RrTCxHQUFJamhCLFVBQVksb0JBQ2hCaUQsRUFBUXdlLFNBQVdSLEdBQUkxUCxVQUt4QixJQUFJbVEsR0FBVSxDQUtiQyxNQUFPLENBQUUsRUFBRyxVQUFXLFlBQ3ZCQyxJQUFLLENBQUUsRUFBRyxvQkFBcUIsdUJBQy9CQyxHQUFJLENBQUUsRUFBRyxpQkFBa0Isb0JBQzNCQyxHQUFJLENBQUUsRUFBRyxxQkFBc0IseUJBRS9CQyxTQUFVLENBQUUsRUFBRyxHQUFJLEtBWXBCLFNBQVNDLEdBQVF4b0IsRUFBUzJVLEdBSXpCLElBQUk3USxFQVlKLE9BVENBLE9BRDRDLElBQWpDOUQsRUFBUWdTLHFCQUNiaFMsRUFBUWdTLHFCQUFzQjJDLEdBQU8sVUFFSSxJQUE3QjNVLEVBQVFzUyxpQkFDcEJ0UyxFQUFRc1MsaUJBQWtCcUMsR0FBTyxLQUdqQyxRQUdNckksSUFBUnFJLEdBQXFCQSxHQUFPdkQsRUFBVXBSLEVBQVMyVSxHQUM1Q2hLLEVBQU9RLE1BQU8sQ0FBRW5MLEdBQVc4RCxHQUc1QkEsRUFLUixTQUFTMmtCLEdBQWV2ZCxFQUFPd2QsR0FJOUIsSUFIQSxJQUFJOTFCLEVBQUksRUFDUEMsRUFBSXFZLEVBQU1oVSxPQUVIdEUsRUFBSUMsRUFBR0QsSUFDZDR4QixFQUFTSCxJQUNSblosRUFBT3RZLEdBQ1AsY0FDQzgxQixHQUFlbEUsRUFBUy93QixJQUFLaTFCLEVBQWE5MUIsR0FBSyxlQTFDbkRzMUIsR0FBUVMsTUFBUVQsR0FBUVUsTUFBUVYsR0FBUVcsU0FBV1gsR0FBUVksUUFBVVosR0FBUUMsTUFDN0VELEdBQVFhLEdBQUtiLEdBQVFJLEdBR2Y3ZSxFQUFRd2UsU0FDYkMsR0FBUWMsU0FBV2QsR0FBUUQsT0FBUyxDQUFFLEVBQUcsK0JBQWdDLGNBMkMxRSxJQUFJbFksR0FBUSxZQUVaLFNBQVNrWixHQUFlL2QsRUFBT2xMLEVBQVNrcEIsRUFBU0MsRUFBV0MsR0FPM0QsSUFOQSxJQUFJOWQsRUFBTXNKLEVBQUtELEVBQUswVSxFQUFNQyxFQUFVeGQsRUFDbkN5ZCxFQUFXdnBCLEVBQVE2bkIseUJBQ25CMkIsRUFBUSxHQUNSNTJCLEVBQUksRUFDSkMsRUFBSXFZLEVBQU1oVSxPQUVIdEUsRUFBSUMsRUFBR0QsSUFHZCxJQUZBMFksRUFBT0osRUFBT3RZLEtBRVEsSUFBVDBZLEVBR1osR0FBd0IsV0FBbkJaLEVBQVFZLEdBSVpYLEVBQU9RLE1BQU9xZSxFQUFPbGUsRUFBSy9FLFNBQVcsQ0FBRStFLEdBQVNBLFFBRzFDLEdBQU15RSxHQUFNMVQsS0FBTWlQLEdBSWxCLENBVU4sSUFUQXNKLEVBQU1BLEdBQU8yVSxFQUFTaGYsWUFBYXZLLEVBQVF0RSxjQUFlLFFBRzFEaVosR0FBUWdULEdBQVN2b0IsS0FBTWtNLElBQVUsQ0FBRSxHQUFJLEtBQVEsR0FBSXJNLGNBQ25Eb3FCLEVBQU9uQixHQUFTdlQsSUFBU3VULEdBQVFLLFNBQ2pDM1QsRUFBSXBPLFVBQVk2aUIsRUFBTSxHQUFNMWUsRUFBTzhlLGNBQWVuZSxHQUFTK2QsRUFBTSxHQUdqRXZkLEVBQUl1ZCxFQUFNLEdBQ0Z2ZCxLQUNQOEksRUFBTUEsRUFBSW1ELFVBS1hwTixFQUFPUSxNQUFPcWUsRUFBTzVVLEVBQUl0RCxhQUd6QnNELEVBQU0yVSxFQUFTbFQsWUFHWEQsWUFBYyxRQXpCbEJvVCxFQUFNNXhCLEtBQU1vSSxFQUFRMHBCLGVBQWdCcGUsSUFrQ3ZDLElBSEFpZSxFQUFTblQsWUFBYyxHQUV2QnhqQixFQUFJLEVBQ00wWSxFQUFPa2UsRUFBTzUyQixNQUd2QixHQUFLdTJCLEdBQWF4ZSxFQUFPbkosUUFBUzhKLEVBQU02ZCxJQUFlLEVBQ2pEQyxHQUNKQSxFQUFReHhCLEtBQU0wVCxRQWdCaEIsR0FYQWdlLEVBQVd0RCxHQUFZMWEsR0FHdkJzSixFQUFNNFQsR0FBUWUsRUFBU2hmLFlBQWFlLEdBQVEsVUFHdkNnZSxHQUNKYixHQUFlN1QsR0FJWHNVLEVBRUosSUFEQXBkLEVBQUksRUFDTVIsRUFBT3NKLEVBQUs5SSxNQUNoQjhiLEdBQVl2ckIsS0FBTWlQLEVBQUtyTCxNQUFRLEtBQ25DaXBCLEVBQVF0eEIsS0FBTTBULEdBTWxCLE9BQU9pZSxFQUlSLElBQ0NJLEdBQVksT0FDWkMsR0FBYyxpREFDZEMsR0FBaUIsc0JBRWxCLFNBQVNDLEtBQ1IsT0FBTyxFQUdSLFNBQVNDLEtBQ1IsT0FBTyxFQVNSLFNBQVNDLEdBQVkxZSxFQUFNckwsR0FDMUIsT0FBU3FMLElBTVYsV0FDQyxJQUNDLE9BQU9wUSxFQUFTc2QsY0FDZixNQUFReVIsS0FUUUMsS0FBcUMsVUFBVGpxQixHQVkvQyxTQUFTa3FCLEdBQUk3ZSxFQUFNOGUsRUFBT3J6QixFQUFVK0csRUFBTThNLEVBQUl5ZixHQUM3QyxJQUFJQyxFQUFRcnFCLEVBR1osR0FBc0IsaUJBQVZtcUIsRUFBcUIsQ0FTaEMsSUFBTW5xQixJQU5tQixpQkFBYmxKLElBR1grRyxFQUFPQSxHQUFRL0csRUFDZkEsT0FBV3VWLEdBRUU4ZCxFQUNiRCxHQUFJN2UsRUFBTXJMLEVBQU1sSixFQUFVK0csRUFBTXNzQixFQUFPbnFCLEdBQVFvcUIsR0FFaEQsT0FBTy9lLEVBc0JSLEdBbkJhLE1BQVJ4TixHQUFzQixNQUFOOE0sR0FHcEJBLEVBQUs3VCxFQUNMK0csRUFBTy9HLE9BQVd1VixHQUNELE1BQU4xQixJQUNjLGlCQUFiN1QsR0FHWDZULEVBQUs5TSxFQUNMQSxPQUFPd08sSUFJUDFCLEVBQUs5TSxFQUNMQSxFQUFPL0csRUFDUEEsT0FBV3VWLEtBR0QsSUFBUDFCLEVBQ0pBLEVBQUttZixRQUNDLElBQU1uZixFQUNaLE9BQU9VLEVBZVIsT0FaYSxJQUFSK2UsSUFDSkMsRUFBUzFmLEdBQ1RBLEVBQUssU0FBVXZSLEdBSWQsT0FEQXNSLElBQVM0ZixJQUFLbHhCLEdBQ1BpeEIsRUFBT2owQixNQUFPRixLQUFNSSxhQUl6QjJXLEtBQU9vZCxFQUFPcGQsT0FBVW9kLEVBQU9wZCxLQUFPdkMsRUFBT3VDLFNBRTFDNUIsRUFBS2hVLE1BQU0sV0FDakJxVCxFQUFPdFIsTUFBTTRrQixJQUFLOW5CLEtBQU1pMEIsRUFBT3hmLEVBQUk5TSxFQUFNL0csTUErYTNDLFNBQVN5ekIsR0FBZ0I1WCxFQUFJM1MsRUFBTStwQixHQUc1QkEsR0FRTnhGLEVBQVNILElBQUt6UixFQUFJM1MsR0FBTSxHQUN4QjBLLEVBQU90UixNQUFNNGtCLElBQUtyTCxFQUFJM1MsRUFBTSxDQUMzQjlDLFdBQVcsRUFDWDRWLFFBQVMsU0FBVTFaLEdBQ2xCLElBQUlveEIsRUFBVXhULEVBQ2J5VCxFQUFRbEcsRUFBUy93QixJQUFLMEMsS0FBTThKLEdBRTdCLEdBQXlCLEVBQWxCNUcsRUFBTXN4QixXQUFtQngwQixLQUFNOEosSUFLckMsR0FBTXlxQixFQUFNeHpCLFFBaUNFeVQsRUFBT3RSLE1BQU1nb0IsUUFBU3BoQixJQUFVLElBQUsycUIsY0FDbER2eEIsRUFBTXd4Qix1QkFmTixHQWRBSCxFQUFRdjFCLEVBQU1wQyxLQUFNd0QsV0FDcEJpdUIsRUFBU0gsSUFBS2x1QixLQUFNOEosRUFBTXlxQixHQUsxQkQsRUFBV1QsRUFBWTd6QixLQUFNOEosR0FDN0I5SixLQUFNOEosS0FFRHlxQixLQURMelQsRUFBU3VOLEVBQVMvd0IsSUFBSzBDLEtBQU04SixLQUNKd3FCLEVBQ3hCakcsRUFBU0gsSUFBS2x1QixLQUFNOEosR0FBTSxHQUUxQmdYLEVBQVMsR0FFTHlULElBQVV6VCxFQUtkLE9BRkE1ZCxFQUFNeXhCLDJCQUNOenhCLEVBQU15QyxpQkFDQ21iLEVBQU9wakIsV0FlTDYyQixFQUFNeHpCLFNBR2pCc3RCLEVBQVNILElBQUtsdUIsS0FBTThKLEVBQU0sQ0FDekJwTSxNQUFPOFcsRUFBT3RSLE1BQU0yQixRQUluQjJQLEVBQU8xUyxPQUFReXlCLEVBQU8sR0FBSy9mLEVBQU9vZ0IsTUFBTXYyQixXQUN4Q2syQixFQUFNdjFCLE1BQU8sR0FDYmdCLFFBS0ZrRCxFQUFNeXhCLHFDQXpFMEJ4ZSxJQUE3QmtZLEVBQVMvd0IsSUFBS21mLEVBQUkzUyxJQUN0QjBLLEVBQU90UixNQUFNNGtCLElBQUtyTCxFQUFJM1MsRUFBTTZwQixJQTVhL0JuZixFQUFPdFIsTUFBUSxDQUVkd1AsT0FBUSxHQUVSb1YsSUFBSyxTQUFVM1MsRUFBTThlLEVBQU9yWCxFQUFTalYsRUFBTS9HLEdBRTFDLElBQUlpMEIsRUFBYUMsRUFBYXJXLEVBQzdCc1csRUFBUXAzQixFQUFHcTNCLEVBQ1g5SixFQUFTK0osRUFBVW5yQixFQUFNb3JCLEVBQVlDLEVBQ3JDQyxFQUFXL0csRUFBUy93QixJQUFLNlgsR0FHMUIsR0FBTTBZLEVBQVkxWSxHQXVDbEIsSUFsQ0t5SCxFQUFRQSxVQUVaQSxHQURBaVksRUFBY2pZLEdBQ1FBLFFBQ3RCaGMsRUFBV2kwQixFQUFZajBCLFVBS25CQSxHQUNKNFQsRUFBT3BNLEtBQUt1VyxnQkFBaUJoQixHQUFpQi9jLEdBSXpDZ2MsRUFBUTdGLE9BQ2I2RixFQUFRN0YsS0FBT3ZDLEVBQU91QyxTQUlmZ2UsRUFBU0ssRUFBU0wsVUFDekJBLEVBQVNLLEVBQVNMLE9BQVM1M0IsT0FBT1ksT0FBUSxRQUVuQysyQixFQUFjTSxFQUFTQyxVQUM5QlAsRUFBY00sRUFBU0MsT0FBUyxTQUFVNXdCLEdBSXpDLFlBQXlCLElBQVgrUCxHQUEwQkEsRUFBT3RSLE1BQU1veUIsWUFBYzd3QixFQUFFcUYsS0FDcEUwSyxFQUFPdFIsTUFBTXF5QixTQUFTcjFCLE1BQU9pVixFQUFNL1UsZ0JBQWMrVixJQU1wRHhZLEdBREFzMkIsR0FBVUEsR0FBUyxJQUFLL3ZCLE1BQU9va0IsSUFBbUIsQ0FBRSxLQUMxQ3ZuQixPQUNGcEQsS0FFUG1NLEVBQU9xckIsR0FEUDFXLEVBQU1pVixHQUFlenFCLEtBQU1nckIsRUFBT3QyQixLQUFTLElBQ3BCLEdBQ3ZCdTNCLEdBQWV6VyxFQUFLLElBQU8sSUFBS3pQLE1BQU8sS0FBTTZHLE9BR3ZDL0wsSUFLTm9oQixFQUFVMVcsRUFBT3RSLE1BQU1nb0IsUUFBU3BoQixJQUFVLEdBRzFDQSxHQUFTbEosRUFBV3NxQixFQUFRdUosYUFBZXZKLEVBQVFzSyxXQUFjMXJCLEVBR2pFb2hCLEVBQVUxVyxFQUFPdFIsTUFBTWdvQixRQUFTcGhCLElBQVUsR0FHMUNrckIsRUFBWXhnQixFQUFPMVMsT0FBUSxDQUMxQmdJLEtBQU1BLEVBQ05xckIsU0FBVUEsRUFDVnh0QixLQUFNQSxFQUNOaVYsUUFBU0EsRUFDVDdGLEtBQU02RixFQUFRN0YsS0FDZG5XLFNBQVVBLEVBQ1ZpbUIsYUFBY2ptQixHQUFZNFQsRUFBT2lMLEtBQUt2YixNQUFNMmlCLGFBQWEzZ0IsS0FBTXRGLEdBQy9Eb0csVUFBV2t1QixFQUFXcHlCLEtBQU0sTUFDMUIreEIsSUFHS0ksRUFBV0YsRUFBUWpyQixPQUMxQm1yQixFQUFXRixFQUFRanJCLEdBQVMsSUFDbkIyckIsY0FBZ0IsRUFHbkJ2SyxFQUFRd0ssUUFDaUQsSUFBOUR4SyxFQUFRd0ssTUFBTTk0QixLQUFNdVksRUFBTXhOLEVBQU11dEIsRUFBWUosSUFFdkMzZixFQUFLNEksa0JBQ1Q1SSxFQUFLNEksaUJBQWtCalUsRUFBTWdyQixJQUszQjVKLEVBQVFwRCxNQUNab0QsRUFBUXBELElBQUlsckIsS0FBTXVZLEVBQU02ZixHQUVsQkEsRUFBVXBZLFFBQVE3RixPQUN2QmllLEVBQVVwWSxRQUFRN0YsS0FBTzZGLEVBQVE3RixPQUs5Qm5XLEVBQ0pxMEIsRUFBU25mLE9BQVFtZixFQUFTUSxnQkFBaUIsRUFBR1QsR0FFOUNDLEVBQVN4ekIsS0FBTXV6QixHQUloQnhnQixFQUFPdFIsTUFBTXdQLE9BQVE1SSxJQUFTLElBTWhDeUcsT0FBUSxTQUFVNEUsRUFBTThlLEVBQU9yWCxFQUFTaGMsRUFBVSswQixHQUVqRCxJQUFJaGdCLEVBQUdpZ0IsRUFBV25YLEVBQ2pCc1csRUFBUXAzQixFQUFHcTNCLEVBQ1g5SixFQUFTK0osRUFBVW5yQixFQUFNb3JCLEVBQVlDLEVBQ3JDQyxFQUFXL0csRUFBU0QsUUFBU2paLElBQVVrWixFQUFTL3dCLElBQUs2WCxHQUV0RCxHQUFNaWdCLElBQWVMLEVBQVNLLEVBQVNMLFFBQXZDLENBT0EsSUFEQXAzQixHQURBczJCLEdBQVVBLEdBQVMsSUFBSy92QixNQUFPb2tCLElBQW1CLENBQUUsS0FDMUN2bkIsT0FDRnBELEtBTVAsR0FKQW1NLEVBQU9xckIsR0FEUDFXLEVBQU1pVixHQUFlenFCLEtBQU1nckIsRUFBT3QyQixLQUFTLElBQ3BCLEdBQ3ZCdTNCLEdBQWV6VyxFQUFLLElBQU8sSUFBS3pQLE1BQU8sS0FBTTZHLE9BR3ZDL0wsRUFBTixDQWVBLElBUkFvaEIsRUFBVTFXLEVBQU90UixNQUFNZ29CLFFBQVNwaEIsSUFBVSxHQUUxQ21yQixFQUFXRixFQURYanJCLEdBQVNsSixFQUFXc3FCLEVBQVF1SixhQUFldkosRUFBUXNLLFdBQWMxckIsSUFDcEMsR0FDN0IyVSxFQUFNQSxFQUFLLElBQ1YsSUFBSXZWLE9BQVEsVUFBWWdzQixFQUFXcHlCLEtBQU0saUJBQW9CLFdBRzlEOHlCLEVBQVlqZ0IsRUFBSXNmLEVBQVNsMEIsT0FDakI0VSxLQUNQcWYsRUFBWUMsRUFBVXRmLElBRWZnZ0IsR0FBZVIsSUFBYUgsRUFBVUcsVUFDekN2WSxHQUFXQSxFQUFRN0YsT0FBU2llLEVBQVVqZSxNQUN0QzBILElBQU9BLEVBQUl2WSxLQUFNOHVCLEVBQVVodUIsWUFDM0JwRyxHQUFZQSxJQUFhbzBCLEVBQVVwMEIsV0FDeEIsT0FBYkEsSUFBcUJvMEIsRUFBVXAwQixZQUNoQ3EwQixFQUFTbmYsT0FBUUgsRUFBRyxHQUVmcWYsRUFBVXAwQixVQUNkcTBCLEVBQVNRLGdCQUVMdkssRUFBUTNhLFFBQ1oyYSxFQUFRM2EsT0FBTzNULEtBQU11WSxFQUFNNmYsSUFPekJZLElBQWNYLEVBQVNsMEIsU0FDckJtcUIsRUFBUTJLLFdBQ2tELElBQS9EM0ssRUFBUTJLLFNBQVNqNUIsS0FBTXVZLEVBQU0rZixFQUFZRSxFQUFTQyxTQUVsRDdnQixFQUFPc2hCLFlBQWEzZ0IsRUFBTXJMLEVBQU1zckIsRUFBU0MsZUFHbkNOLEVBQVFqckIsU0ExQ2YsSUFBTUEsS0FBUWlyQixFQUNidmdCLEVBQU90UixNQUFNcU4sT0FBUTRFLEVBQU1yTCxFQUFPbXFCLEVBQU90MkIsR0FBS2lmLEVBQVNoYyxHQUFVLEdBOEMvRDRULEVBQU85SCxjQUFlcW9CLElBQzFCMUcsRUFBUzlkLE9BQVE0RSxFQUFNLG1CQUl6Qm9nQixTQUFVLFNBQVVRLEdBRW5CLElBQUl0NUIsRUFBR2taLEVBQUdoSSxFQUFLWixFQUFTaW9CLEVBQVdnQixFQUNsQ24xQixFQUFPLElBQUk5QixNQUFPcUIsVUFBVVcsUUFHNUJtQyxFQUFRc1IsRUFBT3RSLE1BQU0reUIsSUFBS0YsR0FFMUJkLEdBQ0U1RyxFQUFTL3dCLElBQUswQyxLQUFNLFdBQWM3QyxPQUFPWSxPQUFRLE9BQy9DbUYsRUFBTTRHLE9BQVUsR0FDcEJvaEIsRUFBVTFXLEVBQU90UixNQUFNZ29CLFFBQVNob0IsRUFBTTRHLE9BQVUsR0FLakQsSUFGQWpKLEVBQU0sR0FBTXFDLEVBRU56RyxFQUFJLEVBQUdBLEVBQUkyRCxVQUFVVyxPQUFRdEUsSUFDbENvRSxFQUFNcEUsR0FBTTJELFVBQVczRCxHQU14QixHQUhBeUcsRUFBTWd6QixlQUFpQmwyQixNQUdsQmtyQixFQUFRaUwsY0FBMkQsSUFBNUNqTCxFQUFRaUwsWUFBWXY1QixLQUFNb0QsS0FBTWtELEdBQTVELENBU0EsSUFKQTh5QixFQUFleGhCLEVBQU90UixNQUFNK3hCLFNBQVNyNEIsS0FBTW9ELEtBQU1rRCxFQUFPK3hCLEdBR3hEeDRCLEVBQUksR0FDTXNRLEVBQVVpcEIsRUFBY3Y1QixRQUFZeUcsRUFBTWt6Qix3QkFJbkQsSUFIQWx6QixFQUFNbXpCLGNBQWdCdHBCLEVBQVFvSSxLQUU5QlEsRUFBSSxHQUNNcWYsRUFBWWpvQixFQUFRa29CLFNBQVV0ZixRQUN0Q3pTLEVBQU1vekIsaUNBSURwekIsRUFBTXF6QixhQUFzQyxJQUF4QnZCLEVBQVVodUIsWUFDbkM5RCxFQUFNcXpCLFdBQVdyd0IsS0FBTTh1QixFQUFVaHVCLGFBRWpDOUQsRUFBTTh4QixVQUFZQSxFQUNsQjl4QixFQUFNeUUsS0FBT3F0QixFQUFVcnRCLFVBS1Z3TyxLQUhieEksSUFBVTZHLEVBQU90UixNQUFNZ29CLFFBQVM4SixFQUFVRyxXQUFjLElBQUtFLFFBQzVETCxFQUFVcFksU0FBVTFjLE1BQU82TSxFQUFRb0ksS0FBTXRVLE1BR1QsS0FBekJxQyxFQUFNNGQsT0FBU25ULEtBQ3JCekssRUFBTXlDLGlCQUNOekMsRUFBTXd4QixvQkFZWCxPQUpLeEosRUFBUXNMLGNBQ1p0TCxFQUFRc0wsYUFBYTU1QixLQUFNb0QsS0FBTWtELEdBRzNCQSxFQUFNNGQsU0FHZG1VLFNBQVUsU0FBVS94QixFQUFPK3hCLEdBQzFCLElBQUl4NEIsRUFBR3U0QixFQUFXcFYsRUFBSzZXLEVBQWlCQyxFQUN2Q1YsRUFBZSxHQUNmUCxFQUFnQlIsRUFBU1EsY0FDekIxWSxFQUFNN1osRUFBTUcsT0FHYixHQUFLb3lCLEdBSUoxWSxFQUFJM00sWUFPYyxVQUFmbE4sRUFBTTRHLE1BQW9CNUcsRUFBTXl6QixRQUFVLEdBRTdDLEtBQVE1WixJQUFRL2MsS0FBTStjLEVBQU1BLEVBQUkxSSxZQUFjclUsS0FJN0MsR0FBc0IsSUFBakIrYyxFQUFJM00sV0FBb0MsVUFBZmxOLEVBQU00RyxPQUFxQyxJQUFqQmlULEVBQUkvQixVQUFzQixDQUdqRixJQUZBeWIsRUFBa0IsR0FDbEJDLEVBQW1CLEdBQ2JqNkIsRUFBSSxFQUFHQSxFQUFJZzVCLEVBQWVoNUIsU0FNRTBaLElBQTVCdWdCLEVBRkw5VyxHQUhBb1YsRUFBWUMsRUFBVXg0QixJQUdObUUsU0FBVyxPQUcxQjgxQixFQUFrQjlXLEdBQVFvVixFQUFVbk8sYUFDbkNyUyxFQUFRb0wsRUFBSzVmLE1BQU80bkIsTUFBTzdLLElBQVMsRUFDcEN2SSxFQUFPcE0sS0FBTXdYLEVBQUs1ZixLQUFNLEtBQU0sQ0FBRStjLElBQVFoYyxRQUVyQzIxQixFQUFrQjlXLElBQ3RCNlcsRUFBZ0JoMUIsS0FBTXV6QixHQUduQnlCLEVBQWdCMTFCLFFBQ3BCaTFCLEVBQWF2MEIsS0FBTSxDQUFFMFQsS0FBTTRILEVBQUtrWSxTQUFVd0IsSUFZOUMsT0FMQTFaLEVBQU0vYyxLQUNEeTFCLEVBQWdCUixFQUFTbDBCLFFBQzdCaTFCLEVBQWF2MEIsS0FBTSxDQUFFMFQsS0FBTTRILEVBQUtrWSxTQUFVQSxFQUFTajJCLE1BQU95MkIsS0FHcERPLEdBR1JZLFFBQVMsU0FBVTU1QixFQUFNNjVCLEdBQ3hCMTVCLE9BQU9DLGVBQWdCb1gsRUFBT29nQixNQUFNdjJCLFVBQVdyQixFQUFNLENBQ3BESyxZQUFZLEVBQ1o0d0IsY0FBYyxFQUVkM3dCLElBQUswRSxFQUFZNjBCLEdBQ2hCLFdBQ0MsR0FBSzcyQixLQUFLODJCLGNBQ1IsT0FBT0QsRUFBTTcyQixLQUFLODJCLGdCQUdyQixXQUNDLEdBQUs5MkIsS0FBSzgyQixjQUNSLE9BQU85MkIsS0FBSzgyQixjQUFlOTVCLElBSS9Ca3hCLElBQUssU0FBVXh3QixHQUNkUCxPQUFPQyxlQUFnQjRDLEtBQU1oRCxFQUFNLENBQ2xDSyxZQUFZLEVBQ1o0d0IsY0FBYyxFQUNkOEksVUFBVSxFQUNWcjVCLE1BQU9BLFFBTVh1NEIsSUFBSyxTQUFVYSxHQUNkLE9BQU9BLEVBQWV0aUIsRUFBTzRCLFNBQzVCMGdCLEVBQ0EsSUFBSXRpQixFQUFPb2dCLE1BQU9rQyxJQUdwQjVMLFFBQVMsQ0FDUnpiLEtBQU0sQ0FHTHVuQixVQUFVLEdBRVhDLE1BQU8sQ0FHTnZCLE1BQU8sU0FBVS90QixHQUloQixJQUFJOFUsRUFBS3pjLE1BQVEySCxFQVdqQixPQVJLNHBCLEdBQWVyckIsS0FBTXVXLEVBQUczUyxPQUM1QjJTLEVBQUd3YSxPQUFTaGMsRUFBVXdCLEVBQUksVUFHMUI0WCxHQUFnQjVYLEVBQUksUUFBU2tYLEtBSXZCLEdBRVI5dUIsUUFBUyxTQUFVOEMsR0FJbEIsSUFBSThVLEVBQUt6YyxNQUFRMkgsRUFVakIsT0FQSzRwQixHQUFlcnJCLEtBQU11VyxFQUFHM1MsT0FDNUIyUyxFQUFHd2EsT0FBU2hjLEVBQVV3QixFQUFJLFVBRTFCNFgsR0FBZ0I1WCxFQUFJLFVBSWQsR0FLUjJWLFNBQVUsU0FBVWx2QixHQUNuQixJQUFJRyxFQUFTSCxFQUFNRyxPQUNuQixPQUFPa3VCLEdBQWVyckIsS0FBTTdDLEVBQU95RyxPQUNsQ3pHLEVBQU80ekIsT0FBU2hjLEVBQVU1WCxFQUFRLFVBQ2xDZ3JCLEVBQVMvd0IsSUFBSytGLEVBQVEsVUFDdEI0WCxFQUFVNVgsRUFBUSxPQUlyQjZ6QixhQUFjLENBQ2JWLGFBQWMsU0FBVXR6QixRQUlEaVQsSUFBakJqVCxFQUFNNGQsUUFBd0I1ZCxFQUFNNHpCLGdCQUN4QzV6QixFQUFNNHpCLGNBQWNLLFlBQWNqMEIsRUFBTTRkLFlBOEY3Q3RNLEVBQU9zaEIsWUFBYyxTQUFVM2dCLEVBQU1yTCxFQUFNdXJCLEdBR3JDbGdCLEVBQUt3WCxxQkFDVHhYLEVBQUt3WCxvQkFBcUI3aUIsRUFBTXVyQixJQUlsQzdnQixFQUFPb2dCLE1BQVEsU0FBVW5oQixFQUFLMmpCLEdBRzdCLEtBQVFwM0IsZ0JBQWdCd1UsRUFBT29nQixPQUM5QixPQUFPLElBQUlwZ0IsRUFBT29nQixNQUFPbmhCLEVBQUsyakIsR0FJMUIzakIsR0FBT0EsRUFBSTNKLE1BQ2Y5SixLQUFLODJCLGNBQWdCcmpCLEVBQ3JCelQsS0FBSzhKLEtBQU8ySixFQUFJM0osS0FJaEI5SixLQUFLaUYsbUJBQXFCd08sRUFBSTRqQix1QkFDSGxoQixJQUF6QjFDLEVBQUk0akIsbUJBR2dCLElBQXBCNWpCLEVBQUkwakIsWUFDTHhELEdBQ0FDLEdBS0Q1ekIsS0FBS3FELE9BQVdvUSxFQUFJcFEsUUFBa0MsSUFBeEJvUSxFQUFJcFEsT0FBTytNLFNBQ3hDcUQsRUFBSXBRLE9BQU9nUixXQUNYWixFQUFJcFEsT0FFTHJELEtBQUtxMkIsY0FBZ0I1aUIsRUFBSTRpQixjQUN6QnIyQixLQUFLczNCLGNBQWdCN2pCLEVBQUk2akIsZUFJekJ0M0IsS0FBSzhKLEtBQU8ySixFQUlSMmpCLEdBQ0o1aUIsRUFBTzFTLE9BQVE5QixLQUFNbzNCLEdBSXRCcDNCLEtBQUt1M0IsVUFBWTlqQixHQUFPQSxFQUFJOGpCLFdBQWEzMUIsS0FBS3VQLE1BRzlDblIsS0FBTXdVLEVBQU80QixVQUFZLEdBSzFCNUIsRUFBT29nQixNQUFNdjJCLFVBQVksQ0FDeEIwSyxZQUFheUwsRUFBT29nQixNQUNwQjN2QixtQkFBb0IydUIsR0FDcEJ3QyxxQkFBc0J4QyxHQUN0QjBDLDhCQUErQjFDLEdBQy9CNEQsYUFBYSxFQUViN3hCLGVBQWdCLFdBQ2YsSUFBSWxCLEVBQUl6RSxLQUFLODJCLGNBRWI5MkIsS0FBS2lGLG1CQUFxQjB1QixHQUVyQmx2QixJQUFNekUsS0FBS3czQixhQUNmL3lCLEVBQUVrQixrQkFHSit1QixnQkFBaUIsV0FDaEIsSUFBSWp3QixFQUFJekUsS0FBSzgyQixjQUViOTJCLEtBQUtvMkIscUJBQXVCekMsR0FFdkJsdkIsSUFBTXpFLEtBQUt3M0IsYUFDZi95QixFQUFFaXdCLG1CQUdKQyx5QkFBMEIsV0FDekIsSUFBSWx3QixFQUFJekUsS0FBSzgyQixjQUViOTJCLEtBQUtzMkIsOEJBQWdDM0MsR0FFaENsdkIsSUFBTXpFLEtBQUt3M0IsYUFDZi95QixFQUFFa3dCLDJCQUdIMzBCLEtBQUswMEIsb0JBS1BsZ0IsRUFBT3JULEtBQU0sQ0FDWnMyQixRQUFRLEVBQ1JDLFNBQVMsRUFDVEMsWUFBWSxFQUNaQyxnQkFBZ0IsRUFDaEJ6eUIsU0FBUyxFQUNUMHlCLFFBQVEsRUFDUkMsWUFBWSxFQUNaNXlCLFNBQVMsRUFDVDZ5QixPQUFPLEVBQ1BDLE9BQU8sRUFDUEMsVUFBVSxFQUNWQyxNQUFNLEVBQ04sTUFBUSxFQUNScmtCLE1BQU0sRUFDTnNrQixVQUFVLEVBQ1ZuNkIsS0FBSyxFQUNMbzZCLFNBQVMsRUFDVHpCLFFBQVEsRUFDUjBCLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxXQUFXLEVBQ1hDLGFBQWEsRUFDYkMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLGVBQWUsRUFDZkMsV0FBVyxFQUNYQyxTQUFTLEVBRVRDLE1BQU8sU0FBVS8xQixHQUNoQixJQUFJeXpCLEVBQVN6ekIsRUFBTXl6QixPQUduQixPQUFvQixNQUFmenpCLEVBQU0rMUIsT0FBaUJ6RixHQUFVdHRCLEtBQU1oRCxFQUFNNEcsTUFDeEIsTUFBbEI1RyxFQUFNaTFCLFNBQW1CajFCLEVBQU1pMUIsU0FBV2oxQixFQUFNazFCLFNBSWxEbDFCLEVBQU0rMUIsWUFBb0I5aUIsSUFBWHdnQixHQUF3QmxELEdBQVl2dEIsS0FBTWhELEVBQU00RyxNQUN0RCxFQUFUNnNCLEVBQ0csRUFHTSxFQUFUQSxFQUNHLEVBR00sRUFBVEEsRUFDRyxFQUdELEVBR0R6ekIsRUFBTSsxQixRQUVaemtCLEVBQU90UixNQUFNMHpCLFNBRWhCcGlCLEVBQU9yVCxLQUFNLENBQUUrM0IsTUFBTyxVQUFXQyxLQUFNLGFBQWMsU0FBVXJ2QixFQUFNMnFCLEdBQ3BFamdCLEVBQU90UixNQUFNZ29CLFFBQVNwaEIsR0FBUyxDQUc5QjRyQixNQUFPLFdBUU4sT0FIQXJCLEdBQWdCcjBCLEtBQU04SixFQUFNK3BCLEtBR3JCLEdBRVJodkIsUUFBUyxXQU1SLE9BSEF3dkIsR0FBZ0JyMEIsS0FBTThKLElBR2YsR0FHUjJxQixhQUFjQSxNQVloQmpnQixFQUFPclQsS0FBTSxDQUNaaTRCLFdBQVksWUFDWkMsV0FBWSxXQUNaQyxhQUFjLGNBQ2RDLGFBQWMsZUFDWixTQUFVQyxFQUFNdkQsR0FDbEJ6aEIsRUFBT3RSLE1BQU1nb0IsUUFBU3NPLEdBQVMsQ0FDOUIvRSxhQUFjd0IsRUFDZFQsU0FBVVMsRUFFVlosT0FBUSxTQUFVbnlCLEdBQ2pCLElBQUl5SyxFQUNIdEssRUFBU3JELEtBQ1R5NUIsRUFBVXYyQixFQUFNbzBCLGNBQ2hCdEMsRUFBWTl4QixFQUFNOHhCLFVBU25CLE9BTE15RSxJQUFhQSxJQUFZcDJCLEdBQVdtUixFQUFPeUQsU0FBVTVVLEVBQVFvMkIsTUFDbEV2MkIsRUFBTTRHLEtBQU9rckIsRUFBVUcsU0FDdkJ4bkIsRUFBTXFuQixFQUFVcFksUUFBUTFjLE1BQU9GLEtBQU1JLFdBQ3JDOEMsRUFBTTRHLEtBQU9tc0IsR0FFUHRvQixPQUtWNkcsRUFBT0MsR0FBRzNTLE9BQVEsQ0FFakJreUIsR0FBSSxTQUFVQyxFQUFPcnpCLEVBQVUrRyxFQUFNOE0sR0FDcEMsT0FBT3VmLEdBQUloMEIsS0FBTWkwQixFQUFPcnpCLEVBQVUrRyxFQUFNOE0sSUFFekN5ZixJQUFLLFNBQVVELEVBQU9yekIsRUFBVStHLEVBQU04TSxHQUNyQyxPQUFPdWYsR0FBSWgwQixLQUFNaTBCLEVBQU9yekIsRUFBVStHLEVBQU04TSxFQUFJLElBRTdDMmYsSUFBSyxTQUFVSCxFQUFPcnpCLEVBQVU2VCxHQUMvQixJQUFJdWdCLEVBQVdsckIsRUFDZixHQUFLbXFCLEdBQVNBLEVBQU10dUIsZ0JBQWtCc3VCLEVBQU1lLFVBVzNDLE9BUkFBLEVBQVlmLEVBQU1lLFVBQ2xCeGdCLEVBQVF5ZixFQUFNaUMsZ0JBQWlCOUIsSUFDOUJZLEVBQVVodUIsVUFDVGd1QixFQUFVRyxTQUFXLElBQU1ILEVBQVVodUIsVUFDckNndUIsRUFBVUcsU0FDWEgsRUFBVXAwQixTQUNWbzBCLEVBQVVwWSxTQUVKNWMsS0FFUixHQUFzQixpQkFBVmkwQixFQUFxQixDQUdoQyxJQUFNbnFCLEtBQVFtcUIsRUFDYmowQixLQUFLbzBCLElBQUt0cUIsRUFBTWxKLEVBQVVxekIsRUFBT25xQixJQUVsQyxPQUFPOUosS0FXUixPQVRrQixJQUFiWSxHQUEwQyxtQkFBYkEsSUFHakM2VCxFQUFLN1QsRUFDTEEsT0FBV3VWLElBRUEsSUFBUDFCLElBQ0pBLEVBQUttZixJQUVDNXpCLEtBQUttQixNQUFNLFdBQ2pCcVQsRUFBT3RSLE1BQU1xTixPQUFRdlEsS0FBTWkwQixFQUFPeGYsRUFBSTdULFNBTXpDLElBS0M4NEIsR0FBZSx3QkFHZkMsR0FBVyxvQ0FDWEMsR0FBZSwyQ0FHaEIsU0FBU0MsR0FBb0Ixa0IsRUFBTTdILEdBQ2xDLE9BQUsyTixFQUFVOUYsRUFBTSxVQUNwQjhGLEVBQStCLEtBQXJCM04sRUFBUThDLFNBQWtCOUMsRUFBVUEsRUFBUTRTLFdBQVksT0FFM0QxTCxFQUFRVyxHQUFPc1MsU0FBVSxTQUFXLElBR3JDdFMsRUFJUixTQUFTMmtCLEdBQWUza0IsR0FFdkIsT0FEQUEsRUFBS3JMLE1BQXlDLE9BQWhDcUwsRUFBSy9HLGFBQWMsU0FBc0IsSUFBTStHLEVBQUtyTCxLQUMzRHFMLEVBRVIsU0FBUzRrQixHQUFlNWtCLEdBT3ZCLE1BTjJDLFdBQXBDQSxFQUFLckwsTUFBUSxJQUFLOUssTUFBTyxFQUFHLEdBQ2xDbVcsRUFBS3JMLEtBQU9xTCxFQUFLckwsS0FBSzlLLE1BQU8sR0FFN0JtVyxFQUFLa0gsZ0JBQWlCLFFBR2hCbEgsRUFHUixTQUFTNmtCLEdBQWdCdm1CLEVBQUt3bUIsR0FDN0IsSUFBSXg5QixFQUFHQyxFQUFHb04sRUFBZ0Jvd0IsRUFBVUMsRUFBVXBGLEVBRTlDLEdBQXVCLElBQWxCa0YsRUFBSzdwQixTQUFWLENBS0EsR0FBS2llLEVBQVNELFFBQVMzYSxLQUV0QnNoQixFQURXMUcsRUFBUy93QixJQUFLbVcsR0FDUHNoQixRQUtqQixJQUFNanJCLEtBRk51a0IsRUFBUzlkLE9BQVEwcEIsRUFBTSxpQkFFVGxGLEVBQ2IsSUFBTXQ0QixFQUFJLEVBQUdDLEVBQUlxNEIsRUFBUWpyQixHQUFPL0ksT0FBUXRFLEVBQUlDLEVBQUdELElBQzlDK1gsRUFBT3RSLE1BQU00a0IsSUFBS21TLEVBQU1ud0IsRUFBTWlyQixFQUFRanJCLEdBQVFyTixJQU83QzZ4QixFQUFTRixRQUFTM2EsS0FDdEJ5bUIsRUFBVzVMLEVBQVN0QixPQUFRdlosR0FDNUIwbUIsRUFBVzNsQixFQUFPMVMsT0FBUSxHQUFJbzRCLEdBRTlCNUwsRUFBU0osSUFBSytMLEVBQU1FLEtBS3RCLFNBQVNDLEdBQVUzbUIsRUFBS3dtQixHQUN2QixJQUFJaGYsRUFBV2dmLEVBQUtoZixTQUFTblMsY0FHWCxVQUFibVMsR0FBd0JzVyxHQUFlcnJCLEtBQU11TixFQUFJM0osTUFDckRtd0IsRUFBS3pYLFFBQVUvTyxFQUFJK08sUUFHSyxVQUFidkgsR0FBcUMsYUFBYkEsSUFDbkNnZixFQUFLN1QsYUFBZTNTLEVBQUkyUyxjQUkxQixTQUFTaVUsR0FBVUMsRUFBWXo1QixFQUFNZ0ksRUFBVW9xQixHQUc5Q3B5QixFQUFPb1MsRUFBTXBTLEdBRWIsSUFBSXV5QixFQUFVaGUsRUFBTzJkLEVBQVN3SCxFQUFZem1CLEVBQU1DLEVBQy9DdFgsRUFBSSxFQUNKQyxFQUFJNDlCLEVBQVd2NUIsT0FDZnk1QixFQUFXOTlCLEVBQUksRUFDZmdCLEVBQVFtRCxFQUFNLEdBQ2Q0NUIsRUFBa0J6NEIsRUFBWXRFLEdBRy9CLEdBQUsrOEIsR0FDRC85QixFQUFJLEdBQXNCLGlCQUFWZ0IsSUFDaEI0VixFQUFRcWUsWUFBY2dJLEdBQVN6ekIsS0FBTXhJLEdBQ3hDLE9BQU80OEIsRUFBV241QixNQUFNLFNBQVV5bUIsR0FDakMsSUFBSVYsRUFBT29ULEVBQVdqbEIsR0FBSXVTLEdBQ3JCNlMsSUFDSjU1QixFQUFNLEdBQU1uRCxFQUFNZCxLQUFNb0QsS0FBTTRuQixFQUFPVixFQUFLMVosU0FFM0M2c0IsR0FBVW5ULEVBQU1ybUIsRUFBTWdJLEVBQVVvcUIsTUFJbEMsR0FBS3YyQixJQUVKMFksR0FEQWdlLEVBQVdOLEdBQWVqeUIsRUFBTXk1QixFQUFZLEdBQUk1ZSxlQUFlLEVBQU80ZSxFQUFZckgsSUFDakUvUyxXQUVtQixJQUEvQmtULEVBQVNqWSxXQUFXcGEsU0FDeEJxeUIsRUFBV2hlLEdBSVBBLEdBQVM2ZCxHQUFVLENBT3ZCLElBTEFzSCxHQURBeEgsRUFBVXZlLEVBQU9VLElBQUttZCxHQUFRZSxFQUFVLFVBQVkwRyxLQUMvQi80QixPQUtidEUsRUFBSUMsRUFBR0QsSUFDZHFYLEVBQU9zZixFQUVGMzJCLElBQU0rOUIsSUFDVjFtQixFQUFPVSxFQUFPbEUsTUFBT3dELEdBQU0sR0FBTSxHQUc1QnltQixHQUlKL2xCLEVBQU9RLE1BQU8rZCxFQUFTVixHQUFRdmUsRUFBTSxZQUl2Q2pMLEVBQVNqTSxLQUFNMDlCLEVBQVk3OUIsR0FBS3FYLEVBQU1yWCxHQUd2QyxHQUFLODlCLEVBT0osSUFOQXhtQixFQUFNZ2YsRUFBU0EsRUFBUWh5QixPQUFTLEdBQUkyYSxjQUdwQ2xILEVBQU9VLElBQUs2ZCxFQUFTZ0gsSUFHZnQ5QixFQUFJLEVBQUdBLEVBQUk4OUIsRUFBWTk5QixJQUM1QnFYLEVBQU9pZixFQUFTdDJCLEdBQ1hnMUIsR0FBWXZyQixLQUFNNE4sRUFBS2hLLE1BQVEsTUFDbEN1a0IsRUFBU3JCLE9BQVFsWixFQUFNLGVBQ3hCVSxFQUFPeUQsU0FBVWxFLEVBQUtELEtBRWpCQSxFQUFLTCxLQUE4QyxZQUFyQ0ssRUFBS2hLLE1BQVEsSUFBS2hCLGNBRy9CMEwsRUFBT2ttQixXQUFhNW1CLEVBQUtILFVBQzdCYSxFQUFPa21CLFNBQVU1bUIsRUFBS0wsSUFBSyxDQUMxQkMsTUFBT0ksRUFBS0osT0FBU0ksRUFBSzFGLGFBQWMsVUFDdEMyRixHQUdKSCxFQUFTRSxFQUFLbU0sWUFBWXhnQixRQUFTbTZCLEdBQWMsSUFBTTlsQixFQUFNQyxJQVFuRSxPQUFPdW1CLEVBR1IsU0FBUy9wQixHQUFRNEUsRUFBTXZVLEVBQVUrNUIsR0FLaEMsSUFKQSxJQUFJN21CLEVBQ0h1ZixFQUFRenlCLEVBQVc0VCxFQUFPNkosT0FBUXpkLEVBQVV1VSxHQUFTQSxFQUNyRDFZLEVBQUksRUFFNEIsT0FBdkJxWCxFQUFPdWYsRUFBTzUyQixJQUFlQSxJQUNoQ2srQixHQUE4QixJQUFsQjdtQixFQUFLMUQsVUFDdEJvRSxFQUFPb21CLFVBQVd2SSxHQUFRdmUsSUFHdEJBLEVBQUtPLGFBQ0pzbUIsR0FBWTlLLEdBQVkvYixJQUM1QndlLEdBQWVELEdBQVF2ZSxFQUFNLFdBRTlCQSxFQUFLTyxXQUFXQyxZQUFhUixJQUkvQixPQUFPcUIsRUFHUlgsRUFBTzFTLE9BQVEsQ0FDZHd4QixjQUFlLFNBQVU5bEIsR0FDeEIsT0FBT0EsR0FHUjhDLE1BQU8sU0FBVTZFLEVBQU0wbEIsRUFBZUMsR0FDckMsSUFBSXIrQixFQUFHQyxFQUFHcStCLEVBQWFDLEVBQ3RCMXFCLEVBQVE2RSxFQUFLeWMsV0FBVyxHQUN4QnFKLEVBQVNwTCxHQUFZMWEsR0FHdEIsS0FBTTdCLEVBQVF1ZSxnQkFBc0MsSUFBbEIxYyxFQUFLL0UsVUFBb0MsS0FBbEIrRSxFQUFLL0UsVUFDM0RvRSxFQUFPOFIsU0FBVW5SLElBTW5CLElBSEE2bEIsRUFBZTNJLEdBQVEvaEIsR0FHakI3VCxFQUFJLEVBQUdDLEdBRmJxK0IsRUFBYzFJLEdBQVFsZCxJQUVPcFUsT0FBUXRFLEVBQUlDLEVBQUdELElBQzNDMjlCLEdBQVVXLEVBQWF0K0IsR0FBS3UrQixFQUFjditCLElBSzVDLEdBQUtvK0IsRUFDSixHQUFLQyxFQUlKLElBSEFDLEVBQWNBLEdBQWUxSSxHQUFRbGQsR0FDckM2bEIsRUFBZUEsR0FBZ0IzSSxHQUFRL2hCLEdBRWpDN1QsRUFBSSxFQUFHQyxFQUFJcStCLEVBQVloNkIsT0FBUXRFLEVBQUlDLEVBQUdELElBQzNDdTlCLEdBQWdCZSxFQUFhdCtCLEdBQUt1K0IsRUFBY3YrQixTQUdqRHU5QixHQUFnQjdrQixFQUFNN0UsR0FXeEIsT0FOQTBxQixFQUFlM0ksR0FBUS9oQixFQUFPLFdBQ1p2UCxPQUFTLEdBQzFCdXhCLEdBQWUwSSxHQUFlQyxHQUFVNUksR0FBUWxkLEVBQU0sV0FJaEQ3RSxHQUdSc3FCLFVBQVcsU0FBVTdsQixHQUtwQixJQUpBLElBQUlwTixFQUFNd04sRUFBTXJMLEVBQ2ZvaEIsRUFBVTFXLEVBQU90UixNQUFNZ29CLFFBQ3ZCenVCLEVBQUksT0FFNkIwWixLQUF4QmhCLEVBQU9KLEVBQU90WSxJQUFxQkEsSUFDNUMsR0FBS294QixFQUFZMVksR0FBUyxDQUN6QixHQUFPeE4sRUFBT3dOLEVBQU1rWixFQUFTalksU0FBYyxDQUMxQyxHQUFLek8sRUFBS290QixPQUNULElBQU1qckIsS0FBUW5DLEVBQUtvdEIsT0FDYjdKLEVBQVNwaEIsR0FDYjBLLEVBQU90UixNQUFNcU4sT0FBUTRFLEVBQU1yTCxHQUkzQjBLLEVBQU9zaEIsWUFBYTNnQixFQUFNckwsRUFBTW5DLEVBQUswdEIsUUFPeENsZ0IsRUFBTWtaLEVBQVNqWSxjQUFZRCxFQUV2QmhCLEVBQU1tWixFQUFTbFksV0FJbkJqQixFQUFNbVosRUFBU2xZLGNBQVlELE9BT2hDM0IsRUFBT0MsR0FBRzNTLE9BQVEsQ0FDakJvNUIsT0FBUSxTQUFVdDZCLEdBQ2pCLE9BQU8yUCxHQUFRdlEsS0FBTVksR0FBVSxJQUdoQzJQLE9BQVEsU0FBVTNQLEdBQ2pCLE9BQU8yUCxHQUFRdlEsS0FBTVksSUFHdEJxVCxLQUFNLFNBQVV2VyxHQUNmLE9BQU9zdkIsRUFBUWh0QixNQUFNLFNBQVV0QyxHQUM5QixZQUFpQnlZLElBQVZ6WSxFQUNOOFcsRUFBT1AsS0FBTWpVLE1BQ2JBLEtBQUs2cEIsUUFBUTFvQixNQUFNLFdBQ0ssSUFBbEJuQixLQUFLb1EsVUFBb0MsS0FBbEJwUSxLQUFLb1EsVUFBcUMsSUFBbEJwUSxLQUFLb1EsV0FDeERwUSxLQUFLaWdCLFlBQWN2aUIsUUFHcEIsS0FBTUEsRUFBTzBDLFVBQVVXLFNBRzNCaVIsT0FBUSxXQUNQLE9BQU9xb0IsR0FBVXI2QixLQUFNSSxXQUFXLFNBQVUrVSxHQUNwQixJQUFsQm5WLEtBQUtvUSxVQUFvQyxLQUFsQnBRLEtBQUtvUSxVQUFxQyxJQUFsQnBRLEtBQUtvUSxVQUMzQ3lwQixHQUFvQjc1QixLQUFNbVYsR0FDaENmLFlBQWFlLE9BS3ZCakQsUUFBUyxXQUNSLE9BQU9tb0IsR0FBVXI2QixLQUFNSSxXQUFXLFNBQVUrVSxHQUMzQyxHQUF1QixJQUFsQm5WLEtBQUtvUSxVQUFvQyxLQUFsQnBRLEtBQUtvUSxVQUFxQyxJQUFsQnBRLEtBQUtvUSxTQUFpQixDQUN6RSxJQUFJL00sRUFBU3cyQixHQUFvQjc1QixLQUFNbVYsR0FDdkM5UixFQUFPODNCLGFBQWNobUIsRUFBTTlSLEVBQU82YyxpQkFLckNoVyxPQUFRLFdBQ1AsT0FBT213QixHQUFVcjZCLEtBQU1JLFdBQVcsU0FBVStVLEdBQ3RDblYsS0FBS3FVLFlBQ1RyVSxLQUFLcVUsV0FBVzhtQixhQUFjaG1CLEVBQU1uVixVQUt2Q29LLE1BQU8sV0FDTixPQUFPaXdCLEdBQVVyNkIsS0FBTUksV0FBVyxTQUFVK1UsR0FDdENuVixLQUFLcVUsWUFDVHJVLEtBQUtxVSxXQUFXOG1CLGFBQWNobUIsRUFBTW5WLEtBQUtrZCxpQkFLNUMyTSxNQUFPLFdBSU4sSUFIQSxJQUFJMVUsRUFDSDFZLEVBQUksRUFFMkIsT0FBdEIwWSxFQUFPblYsS0FBTXZELElBQWVBLElBQ2QsSUFBbEIwWSxFQUFLL0UsV0FHVG9FLEVBQU9vbUIsVUFBV3ZJLEdBQVFsZCxHQUFNLElBR2hDQSxFQUFLOEssWUFBYyxJQUlyQixPQUFPamdCLE1BR1JzUSxNQUFPLFNBQVV1cUIsRUFBZUMsR0FJL0IsT0FIQUQsRUFBaUMsTUFBakJBLEdBQWdDQSxFQUNoREMsRUFBeUMsTUFBckJBLEVBQTRCRCxFQUFnQkMsRUFFekQ5NkIsS0FBS2tWLEtBQUssV0FDaEIsT0FBT1YsRUFBT2xFLE1BQU90USxLQUFNNjZCLEVBQWVDLE9BSTVDdHRCLEtBQU0sU0FBVTlQLEdBQ2YsT0FBT3N2QixFQUFRaHRCLE1BQU0sU0FBVXRDLEdBQzlCLElBQUl5WCxFQUFPblYsS0FBTSxJQUFPLEdBQ3ZCdkQsRUFBSSxFQUNKQyxFQUFJc0QsS0FBS2UsT0FFVixRQUFlb1YsSUFBVnpZLEdBQXlDLElBQWxCeVgsRUFBSy9FLFNBQ2hDLE9BQU8rRSxFQUFLOUUsVUFJYixHQUFzQixpQkFBVjNTLElBQXVCZzhCLEdBQWF4ekIsS0FBTXhJLEtBQ3BEcTBCLElBQVdQLEdBQVN2b0IsS0FBTXZMLElBQVcsQ0FBRSxHQUFJLEtBQVEsR0FBSW9MLGVBQWtCLENBRTFFcEwsRUFBUThXLEVBQU84ZSxjQUFlNTFCLEdBRTlCLElBQ0MsS0FBUWpCLEVBQUlDLEVBQUdELElBSVMsS0FIdkIwWSxFQUFPblYsS0FBTXZELElBQU8sSUFHVjJULFdBQ1RvRSxFQUFPb21CLFVBQVd2SSxHQUFRbGQsR0FBTSxJQUNoQ0EsRUFBSzlFLFVBQVkzUyxHQUluQnlYLEVBQU8sRUFHTixNQUFRMVEsS0FHTjBRLEdBQ0puVixLQUFLNnBCLFFBQVE3WCxPQUFRdFUsS0FFcEIsS0FBTUEsRUFBTzBDLFVBQVVXLFNBRzNCcTZCLFlBQWEsV0FDWixJQUFJbkksRUFBVSxHQUdkLE9BQU9vSCxHQUFVcjZCLEtBQU1JLFdBQVcsU0FBVStVLEdBQzNDLElBQUl1TSxFQUFTMWhCLEtBQUtxVSxXQUViRyxFQUFPbkosUUFBU3JMLEtBQU1pekIsR0FBWSxJQUN0Q3plLEVBQU9vbUIsVUFBV3ZJLEdBQVFyeUIsT0FDckIwaEIsR0FDSkEsRUFBTzJaLGFBQWNsbUIsRUFBTW5WLFNBSzNCaXpCLE1BSUx6ZSxFQUFPclQsS0FBTSxDQUNaNFEsU0FBVSxTQUNWRSxVQUFXLFVBQ1hrcEIsYUFBYyxTQUNkRyxZQUFhLFFBQ2JDLFdBQVksZ0JBQ1YsU0FBVXYrQixFQUFNdytCLEdBQ2xCaG5CLEVBQU9DLEdBQUl6WCxHQUFTLFNBQVU0RCxHQU83QixJQU5BLElBQUltVSxFQUNIcEgsRUFBTSxHQUNOOHRCLEVBQVNqbkIsRUFBUTVULEdBQ2pCMFUsRUFBT21tQixFQUFPMTZCLE9BQVMsRUFDdkJ0RSxFQUFJLEVBRUdBLEdBQUs2WSxFQUFNN1ksSUFDbEJzWSxFQUFRdFksSUFBTTZZLEVBQU90VixLQUFPQSxLQUFLc1EsT0FBTyxHQUN4Q2tFLEVBQVFpbkIsRUFBUWgvQixJQUFPKytCLEdBQVl6bUIsR0FJbkN0VCxFQUFLdkIsTUFBT3lOLEVBQUtvSCxFQUFNelgsT0FHeEIsT0FBTzBDLEtBQUs4VSxVQUFXbkgsT0FHekIsSUFBSSt0QixHQUFZLElBQUl4eUIsT0FBUSxLQUFPdW1CLEdBQU8sa0JBQW1CLEtBRXpEa00sR0FBWSxTQUFVeG1CLEdBS3hCLElBQUkraUIsRUFBTy9pQixFQUFLdUcsY0FBY29DLFlBTTlCLE9BSk1vYSxHQUFTQSxFQUFLMEQsU0FDbkIxRCxFQUFPMzNCLEdBR0QyM0IsRUFBSzJELGlCQUFrQjFtQixJQUc1QjlILEdBQU8sU0FBVThILEVBQU1oTCxFQUFTdEIsR0FDbkMsSUFBSThFLEVBQUszUSxFQUNSOCtCLEVBQU0sR0FHUCxJQUFNOStCLEtBQVFtTixFQUNiMnhCLEVBQUs5K0IsR0FBU21ZLEVBQUs4YSxNQUFPanpCLEdBQzFCbVksRUFBSzhhLE1BQU9qekIsR0FBU21OLEVBQVNuTixHQU0vQixJQUFNQSxLQUhOMlEsRUFBTTlFLEVBQVNqTSxLQUFNdVksR0FHUGhMLEVBQ2JnTCxFQUFLOGEsTUFBT2p6QixHQUFTOCtCLEVBQUs5K0IsR0FHM0IsT0FBTzJRLEdBSUpvdUIsR0FBWSxJQUFJN3lCLE9BQVEwbUIsR0FBVTlzQixLQUFNLEtBQU8sS0E4SG5ELFNBQVNrNUIsR0FBUTdtQixFQUFNblksRUFBTWkvQixHQUM1QixJQUFJQyxFQUFPQyxFQUFVQyxFQUFVenVCLEVBTTlCc2lCLEVBQVE5YSxFQUFLOGEsTUFxQ2QsT0FuQ0FnTSxFQUFXQSxHQUFZTixHQUFXeG1CLE1BUXBCLE1BRmJ4SCxFQUFNc3VCLEVBQVNJLGlCQUFrQnIvQixJQUFVaS9CLEVBQVVqL0IsS0FFakM2eUIsR0FBWTFhLEtBQy9CeEgsRUFBTTZHLEVBQU95YixNQUFPOWEsRUFBTW5ZLEtBUXJCc1csRUFBUWdwQixrQkFBb0JaLEdBQVV4MUIsS0FBTXlILElBQVNvdUIsR0FBVTcxQixLQUFNbEosS0FHMUVrL0IsRUFBUWpNLEVBQU1pTSxNQUNkQyxFQUFXbE0sRUFBTWtNLFNBQ2pCQyxFQUFXbk0sRUFBTW1NLFNBR2pCbk0sRUFBTWtNLFNBQVdsTSxFQUFNbU0sU0FBV25NLEVBQU1pTSxNQUFRdnVCLEVBQ2hEQSxFQUFNc3VCLEVBQVNDLE1BR2ZqTSxFQUFNaU0sTUFBUUEsRUFDZGpNLEVBQU1rTSxTQUFXQSxFQUNqQmxNLEVBQU1tTSxTQUFXQSxTQUlKam1CLElBQVJ4SSxFQUlOQSxFQUFNLEdBQ05BLEVBSUYsU0FBUzR1QixHQUFjQyxFQUFhQyxHQUduQyxNQUFPLENBQ05uL0IsSUFBSyxXQUNKLElBQUtrL0IsSUFTTCxPQUFTeDhCLEtBQUsxQyxJQUFNbS9CLEdBQVN2OEIsTUFBT0YsS0FBTUksa0JBTGxDSixLQUFLMUMsT0F4TGhCLFdBSUMsU0FBU28vQixJQUdSLEdBQU1wTCxFQUFOLENBSUFxTCxFQUFVMU0sTUFBTTJNLFFBQVUsK0VBRTFCdEwsRUFBSXJCLE1BQU0yTSxRQUNULDRIQUdEamYsR0FBZ0J2SixZQUFhdW9CLEdBQVl2b0IsWUFBYWtkLEdBRXRELElBQUl1TCxFQUFXdDhCLEVBQU9zN0IsaUJBQWtCdkssR0FDeEN3TCxFQUFvQyxPQUFqQkQsRUFBU3A1QixJQUc1QnM1QixFQUFzRSxLQUE5Q0MsRUFBb0JILEVBQVNJLFlBSXJEM0wsRUFBSXJCLE1BQU1pTixNQUFRLE1BQ2xCQyxFQUE2RCxLQUF6Q0gsRUFBb0JILEVBQVNLLE9BSWpERSxFQUFnRSxLQUF6Q0osRUFBb0JILEVBQVNYLE9BTXBENUssRUFBSXJCLE1BQU1vTixTQUFXLFdBQ3JCQyxFQUFpRSxLQUE5Q04sRUFBb0IxTCxFQUFJaU0sWUFBYyxHQUV6RDVmLEdBQWdCckosWUFBYXFvQixHQUk3QnJMLEVBQU0sTUFHUCxTQUFTMEwsRUFBb0JRLEdBQzVCLE9BQU9yMkIsS0FBS3MyQixNQUFPQyxXQUFZRixJQUdoQyxJQUFJVixFQUFrQk0sRUFBc0JFLEVBQWtCSCxFQUM3RFEsRUFBeUJaLEVBQ3pCSixFQUFZNTNCLEVBQVNRLGNBQWUsT0FDcEMrckIsRUFBTXZzQixFQUFTUSxjQUFlLE9BR3pCK3JCLEVBQUlyQixRQU1WcUIsRUFBSXJCLE1BQU0yTixlQUFpQixjQUMzQnRNLEVBQUlNLFdBQVcsR0FBTzNCLE1BQU0yTixlQUFpQixHQUM3Q3RxQixFQUFRdXFCLGdCQUErQyxnQkFBN0J2TSxFQUFJckIsTUFBTTJOLGVBRXBDcHBCLEVBQU8xUyxPQUFRd1IsRUFBUyxDQUN2QndxQixrQkFBbUIsV0FFbEIsT0FEQXBCLElBQ09VLEdBRVJkLGVBQWdCLFdBRWYsT0FEQUksSUFDT1MsR0FFUlksY0FBZSxXQUVkLE9BREFyQixJQUNPSSxHQUVSa0IsbUJBQW9CLFdBRW5CLE9BREF0QixJQUNPSyxHQUVSa0IsY0FBZSxXQUVkLE9BREF2QixJQUNPWSxHQVFSWSxxQkFBc0IsV0FDckIsSUFBSUMsRUFBT2pNLEVBQUlrTSxFQUFTQyxFQW9CeEIsT0FuQmdDLE1BQTNCVixJQUNKUSxFQUFRcDVCLEVBQVNRLGNBQWUsU0FDaEMyc0IsRUFBS250QixFQUFTUSxjQUFlLE1BQzdCNjRCLEVBQVVyNUIsRUFBU1EsY0FBZSxPQUVsQzQ0QixFQUFNbE8sTUFBTTJNLFFBQVUsa0NBQ3RCMUssRUFBR2pDLE1BQU1xTyxPQUFTLE1BQ2xCRixFQUFRbk8sTUFBTXFPLE9BQVMsTUFFdkIzZ0IsR0FDRXZKLFlBQWErcEIsR0FDYi9wQixZQUFhOGQsR0FDYjlkLFlBQWFncUIsR0FFZkMsRUFBVTk5QixFQUFPczdCLGlCQUFrQjNKLEdBQ25DeUwsRUFBMEJ6MkIsU0FBVW0zQixFQUFRQyxRQUFXLEVBRXZEM2dCLEdBQWdCckosWUFBYTZwQixJQUV2QlIsTUFwSFYsR0FtTUEsSUFBSVksR0FBYyxDQUFFLFNBQVUsTUFBTyxNQUNwQ0MsR0FBYXo1QixFQUFTUSxjQUFlLE9BQVEwcUIsTUFDN0N3TyxHQUFjLEdBa0JmLFNBQVNDLEdBQWUxaEMsR0FDdkIsSUFBSTJoQyxFQUFRbnFCLEVBQU9vcUIsU0FBVTVoQyxJQUFVeWhDLEdBQWF6aEMsR0FFcEQsT0FBSzJoQyxJQUdBM2hDLEtBQVF3aEMsR0FDTHhoQyxFQUVEeWhDLEdBQWF6aEMsR0F4QnJCLFNBQXlCQSxHQU14QixJQUhBLElBQUk2aEMsRUFBVTdoQyxFQUFNLEdBQUkyd0IsY0FBZ0Izd0IsRUFBS2dDLE1BQU8sR0FDbkR2QyxFQUFJOGhDLEdBQVl4OUIsT0FFVHRFLEtBRVAsSUFEQU8sRUFBT3VoQyxHQUFhOWhDLEdBQU1vaUMsS0FDYkwsR0FDWixPQUFPeGhDLEVBZW9COGhDLENBQWdCOWhDLElBQVVBLEdBSXhELElBS0MraEMsR0FBZSw0QkFDZkMsR0FBYyxNQUNkQyxHQUFVLENBQUU1QixTQUFVLFdBQVk2QixXQUFZLFNBQVV6OEIsUUFBUyxTQUNqRTA4QixHQUFxQixDQUNwQkMsY0FBZSxJQUNmQyxXQUFZLE9BR2QsU0FBU0MsR0FBbUI3cEIsRUFBTy9YLEVBQU82aEMsR0FJekMsSUFBSXQ3QixFQUFVMHJCLEdBQVExbUIsS0FBTXZMLEdBQzVCLE9BQU91RyxFQUdOa0QsS0FBS3E0QixJQUFLLEVBQUd2N0IsRUFBUyxJQUFRczdCLEdBQVksS0FBVXQ3QixFQUFTLElBQU8sTUFDcEV2RyxFQUdGLFNBQVMraEMsR0FBb0J0cUIsRUFBTXVxQixFQUFXQyxFQUFLQyxFQUFhQyxFQUFRQyxHQUN2RSxJQUFJcmpDLEVBQWtCLFVBQWRpakMsRUFBd0IsRUFBSSxFQUNuQ0ssRUFBUSxFQUNSQyxFQUFRLEVBR1QsR0FBS0wsS0FBVUMsRUFBYyxTQUFXLFdBQ3ZDLE9BQU8sRUFHUixLQUFRbmpDLEVBQUksRUFBR0EsR0FBSyxFQUdOLFdBQVJrakMsSUFDSkssR0FBU3hyQixFQUFPMGIsSUFBSy9hLEVBQU13cUIsRUFBTS9QLEdBQVduekIsSUFBSyxFQUFNb2pDLElBSWxERCxHQW1CUSxZQUFSRCxJQUNKSyxHQUFTeHJCLEVBQU8wYixJQUFLL2EsRUFBTSxVQUFZeWEsR0FBV256QixJQUFLLEVBQU1vakMsSUFJakQsV0FBUkYsSUFDSkssR0FBU3hyQixFQUFPMGIsSUFBSy9hLEVBQU0sU0FBV3lhLEdBQVduekIsR0FBTSxTQUFTLEVBQU1vakMsTUF0QnZFRyxHQUFTeHJCLEVBQU8wYixJQUFLL2EsRUFBTSxVQUFZeWEsR0FBV256QixJQUFLLEVBQU1vakMsR0FHaEQsWUFBUkYsRUFDSkssR0FBU3hyQixFQUFPMGIsSUFBSy9hLEVBQU0sU0FBV3lhLEdBQVduekIsR0FBTSxTQUFTLEVBQU1vakMsR0FJdEVFLEdBQVN2ckIsRUFBTzBiLElBQUsvYSxFQUFNLFNBQVd5YSxHQUFXbnpCLEdBQU0sU0FBUyxFQUFNb2pDLElBb0N6RSxPQWhCTUQsR0FBZUUsR0FBZSxJQUluQ0UsR0FBUzc0QixLQUFLcTRCLElBQUssRUFBR3I0QixLQUFLODRCLEtBQzFCOXFCLEVBQU0sU0FBV3VxQixFQUFXLEdBQUkvUixjQUFnQitSLEVBQVUxZ0MsTUFBTyxJQUNqRThnQyxFQUNBRSxFQUNBRCxFQUNBLE1BSU0sR0FHREMsRUFHUixTQUFTRSxHQUFrQi9xQixFQUFNdXFCLEVBQVdLLEdBRzNDLElBQUlGLEVBQVNsRSxHQUFXeG1CLEdBS3ZCeXFCLElBRG1CdHNCLEVBQVF3cUIscUJBQXVCaUMsSUFFRSxlQUFuRHZyQixFQUFPMGIsSUFBSy9hLEVBQU0sYUFBYSxFQUFPMHFCLEdBQ3ZDTSxFQUFtQlAsRUFFbkJ6eEIsRUFBTTZ0QixHQUFRN21CLEVBQU11cUIsRUFBV0csR0FDL0JPLEVBQWEsU0FBV1YsRUFBVyxHQUFJL1IsY0FBZ0IrUixFQUFVMWdDLE1BQU8sR0FJekUsR0FBSzA4QixHQUFVeDFCLEtBQU1pSSxHQUFRLENBQzVCLElBQU00eEIsRUFDTCxPQUFPNXhCLEVBRVJBLEVBQU0sT0F5Q1AsUUFsQ1FtRixFQUFRd3FCLHFCQUF1QjhCLElBTXJDdHNCLEVBQVE0cUIsd0JBQTBCampCLEVBQVU5RixFQUFNLE9BSTNDLFNBQVJoSCxJQUlDdXZCLFdBQVl2dkIsSUFBMEQsV0FBakRxRyxFQUFPMGIsSUFBSy9hLEVBQU0sV0FBVyxFQUFPMHFCLEtBRzFEMXFCLEVBQUtrckIsaUJBQWlCdC9CLFNBRXRCNitCLEVBQWlFLGVBQW5EcHJCLEVBQU8wYixJQUFLL2EsRUFBTSxhQUFhLEVBQU8wcUIsSUFLcERNLEVBQW1CQyxLQUFjanJCLEtBRWhDaEgsRUFBTWdILEVBQU1pckIsTUFLZGp5QixFQUFNdXZCLFdBQVl2dkIsSUFBUyxHQUkxQnN4QixHQUNDdHFCLEVBQ0F1cUIsRUFDQUssSUFBV0gsRUFBYyxTQUFXLFdBQ3BDTyxFQUNBTixFQUdBMXhCLEdBRUUsS0ErU0wsU0FBU215QixHQUFPbnJCLEVBQU1oTCxFQUFTZ2tCLEVBQU12WSxFQUFLMnFCLEdBQ3pDLE9BQU8sSUFBSUQsR0FBTWppQyxVQUFVcVcsS0FBTVMsRUFBTWhMLEVBQVNna0IsRUFBTXZZLEVBQUsycUIsR0E3UzVEL3JCLEVBQU8xUyxPQUFRLENBSWQwK0IsU0FBVSxDQUNUQyxRQUFTLENBQ1JuakMsSUFBSyxTQUFVNlgsRUFBTThtQixHQUNwQixHQUFLQSxFQUFXLENBR2YsSUFBSXR1QixFQUFNcXVCLEdBQVE3bUIsRUFBTSxXQUN4QixNQUFlLEtBQVJ4SCxFQUFhLElBQU1BLE1BTzlCaWpCLFVBQVcsQ0FDVix5QkFBMkIsRUFDM0IsYUFBZSxFQUNmLGFBQWUsRUFDZixVQUFZLEVBQ1osWUFBYyxFQUNkLFlBQWMsRUFDZCxVQUFZLEVBQ1osWUFBYyxFQUNkLGVBQWlCLEVBQ2pCLGlCQUFtQixFQUNuQixTQUFXLEVBQ1gsWUFBYyxFQUNkLGNBQWdCLEVBQ2hCLFlBQWMsRUFDZCxTQUFXLEVBQ1gsT0FBUyxFQUNULFNBQVcsRUFDWCxRQUFVLEVBQ1YsUUFBVSxFQUNWLE1BQVEsR0FLVGdPLFNBQVUsR0FHVjNPLE1BQU8sU0FBVTlhLEVBQU1uWSxFQUFNVSxFQUFPcWlDLEdBR25DLEdBQU01cUIsR0FBMEIsSUFBbEJBLEVBQUsvRSxVQUFvQyxJQUFsQitFLEVBQUsvRSxVQUFtQitFLEVBQUs4YSxNQUFsRSxDQUtBLElBQUl0aUIsRUFBSzdELEVBQU1vbEIsRUFDZHdSLEVBQVc5UyxFQUFXNXdCLEdBQ3RCMmpDLEVBQWUzQixHQUFZOTRCLEtBQU1sSixHQUNqQ2l6QixFQUFROWEsRUFBSzhhLE1BYWQsR0FSTTBRLElBQ0wzakMsRUFBTzBoQyxHQUFlZ0MsSUFJdkJ4UixFQUFRMWEsRUFBT2dzQixTQUFVeGpDLElBQVV3WCxFQUFPZ3NCLFNBQVVFLFFBR3JDdnFCLElBQVZ6WSxFQTBDSixPQUFLd3hCLEdBQVMsUUFBU0EsUUFDd0IvWSxLQUE1Q3hJLEVBQU11aEIsRUFBTTV4QixJQUFLNlgsR0FBTSxFQUFPNHFCLElBRXpCcHlCLEVBSURzaUIsRUFBT2p6QixHQTdDQSxZQUhkOE0sU0FBY3BNLEtBR2NpUSxFQUFNZ2lCLEdBQVExbUIsS0FBTXZMLEtBQWFpUSxFQUFLLEtBQ2pFalEsRUFBUXl5QixHQUFXaGIsRUFBTW5ZLEVBQU0yUSxHQUcvQjdELEVBQU8sVUFJTSxNQUFUcE0sR0FBaUJBLEdBQVVBLElBT2xCLFdBQVRvTSxHQUFzQjYyQixJQUMxQmpqQyxHQUFTaVEsR0FBT0EsRUFBSyxLQUFTNkcsRUFBT29jLFVBQVc4UCxHQUFhLEdBQUssT0FJN0RwdEIsRUFBUXVxQixpQkFBNkIsS0FBVm5nQyxHQUFpRCxJQUFqQ1YsRUFBS29RLFFBQVMsZ0JBQzlENmlCLEVBQU9qekIsR0FBUyxXQUlYa3lCLEdBQVksUUFBU0EsUUFDc0IvWSxLQUE5Q3pZLEVBQVF3eEIsRUFBTWhCLElBQUsvWSxFQUFNelgsRUFBT3FpQyxNQUU3QlksRUFDSjFRLEVBQU0yUSxZQUFhNWpDLEVBQU1VLEdBRXpCdXlCLEVBQU9qekIsR0FBU1UsTUFrQnBCd3lCLElBQUssU0FBVS9hLEVBQU1uWSxFQUFNK2lDLEVBQU9GLEdBQ2pDLElBQUkxeEIsRUFBSzBHLEVBQUtxYSxFQUNid1IsRUFBVzlTLEVBQVc1d0IsR0E2QnZCLE9BNUJnQmdpQyxHQUFZOTRCLEtBQU1sSixLQU1qQ0EsRUFBTzBoQyxHQUFlZ0MsS0FJdkJ4UixFQUFRMWEsRUFBT2dzQixTQUFVeGpDLElBQVV3WCxFQUFPZ3NCLFNBQVVFLEtBR3RDLFFBQVN4UixJQUN0Qi9nQixFQUFNK2dCLEVBQU01eEIsSUFBSzZYLEdBQU0sRUFBTTRxQixTQUlqQjVwQixJQUFSaEksSUFDSkEsRUFBTTZ0QixHQUFRN21CLEVBQU1uWSxFQUFNNmlDLElBSWQsV0FBUjF4QixHQUFvQm5SLEtBQVFtaUMsS0FDaENoeEIsRUFBTWd4QixHQUFvQm5pQyxJQUlaLEtBQVYraUMsR0FBZ0JBLEdBQ3BCbHJCLEVBQU02b0IsV0FBWXZ2QixJQUNELElBQVY0eEIsR0FBa0JjLFNBQVVoc0IsR0FBUUEsR0FBTyxFQUFJMUcsR0FHaERBLEtBSVRxRyxFQUFPclQsS0FBTSxDQUFFLFNBQVUsVUFBVyxTQUFVOFYsRUFBSXlvQixHQUNqRGxyQixFQUFPZ3NCLFNBQVVkLEdBQWMsQ0FDOUJwaUMsSUFBSyxTQUFVNlgsRUFBTThtQixFQUFVOEQsR0FDOUIsR0FBSzlELEVBSUosT0FBTzhDLEdBQWE3NEIsS0FBTXNPLEVBQU8wYixJQUFLL2EsRUFBTSxhQVF4Q0EsRUFBS2tyQixpQkFBaUJ0L0IsUUFBV29VLEVBQUsyckIsd0JBQXdCNUUsTUFJaEVnRSxHQUFrQi9xQixFQUFNdXFCLEVBQVdLLEdBSG5DMXlCLEdBQU04SCxFQUFNOHBCLElBQVMsV0FDcEIsT0FBT2lCLEdBQWtCL3FCLEVBQU11cUIsRUFBV0ssT0FNL0M3UixJQUFLLFNBQVUvWSxFQUFNelgsRUFBT3FpQyxHQUMzQixJQUFJOTdCLEVBQ0g0N0IsRUFBU2xFLEdBQVd4bUIsR0FJcEI0ckIsR0FBc0J6dEIsRUFBUTJxQixpQkFDVCxhQUFwQjRCLEVBQU94QyxTQUlSdUMsR0FEa0JtQixHQUFzQmhCLElBRVksZUFBbkR2ckIsRUFBTzBiLElBQUsvYSxFQUFNLGFBQWEsRUFBTzBxQixHQUN2Q04sRUFBV1EsRUFDVk4sR0FDQ3RxQixFQUNBdXFCLEVBQ0FLLEVBQ0FILEVBQ0FDLEdBRUQsRUFxQkYsT0FqQktELEdBQWVtQixJQUNuQnhCLEdBQVlwNEIsS0FBSzg0QixLQUNoQjlxQixFQUFNLFNBQVd1cUIsRUFBVyxHQUFJL1IsY0FBZ0IrUixFQUFVMWdDLE1BQU8sSUFDakUwK0IsV0FBWW1DLEVBQVFILElBQ3BCRCxHQUFvQnRxQixFQUFNdXFCLEVBQVcsVUFBVSxFQUFPRyxHQUN0RCxLQUtHTixJQUFjdDdCLEVBQVUwckIsR0FBUTFtQixLQUFNdkwsS0FDYixRQUEzQnVHLEVBQVMsSUFBTyxRQUVsQmtSLEVBQUs4YSxNQUFPeVAsR0FBY2hpQyxFQUMxQkEsRUFBUThXLEVBQU8wYixJQUFLL2EsRUFBTXVxQixJQUdwQkosR0FBbUJucUIsRUFBTXpYLEVBQU82aEMsUUFLMUMvcUIsRUFBT2dzQixTQUFTdkQsV0FBYVYsR0FBY2pwQixFQUFRMHFCLG9CQUNsRCxTQUFVN29CLEVBQU04bUIsR0FDZixHQUFLQSxFQUNKLE9BQVN5QixXQUFZMUIsR0FBUTdtQixFQUFNLGdCQUNsQ0EsRUFBSzJyQix3QkFBd0JFLEtBQzVCM3pCLEdBQU04SCxFQUFNLENBQUU4bkIsV0FBWSxJQUFLLFdBQzlCLE9BQU85bkIsRUFBSzJyQix3QkFBd0JFLFNBRWxDLFFBTVJ4c0IsRUFBT3JULEtBQU0sQ0FDWjgvQixPQUFRLEdBQ1JDLFFBQVMsR0FDVEMsT0FBUSxVQUNOLFNBQVVDLEVBQVFDLEdBQ3BCN3NCLEVBQU9nc0IsU0FBVVksRUFBU0MsR0FBVyxDQUNwQ0MsT0FBUSxTQUFVNWpDLEdBT2pCLElBTkEsSUFBSWpCLEVBQUksRUFDUDhrQyxFQUFXLEdBR1gxeUIsRUFBeUIsaUJBQVZuUixFQUFxQkEsRUFBTXNSLE1BQU8sS0FBUSxDQUFFdFIsR0FFcERqQixFQUFJLEVBQUdBLElBQ2Q4a0MsRUFBVUgsRUFBU3hSLEdBQVduekIsR0FBTTRrQyxHQUNuQ3h5QixFQUFPcFMsSUFBT29TLEVBQU9wUyxFQUFJLElBQU9vUyxFQUFPLEdBR3pDLE9BQU8weUIsSUFJTyxXQUFYSCxJQUNKNXNCLEVBQU9nc0IsU0FBVVksRUFBU0MsR0FBU25ULElBQU1vUixPQUkzQzlxQixFQUFPQyxHQUFHM1MsT0FBUSxDQUNqQm91QixJQUFLLFNBQVVsekIsRUFBTVUsR0FDcEIsT0FBT3N2QixFQUFRaHRCLE1BQU0sU0FBVW1WLEVBQU1uWSxFQUFNVSxHQUMxQyxJQUFJbWlDLEVBQVEveUIsRUFDWG9JLEVBQU0sR0FDTnpZLEVBQUksRUFFTCxHQUFLc0MsTUFBTWtELFFBQVNqRixHQUFTLENBSTVCLElBSEE2aUMsRUFBU2xFLEdBQVd4bUIsR0FDcEJySSxFQUFNOVAsRUFBSytELE9BRUh0RSxFQUFJcVEsRUFBS3JRLElBQ2hCeVksRUFBS2xZLEVBQU1QLElBQVErWCxFQUFPMGIsSUFBSy9hLEVBQU1uWSxFQUFNUCxJQUFLLEVBQU9vakMsR0FHeEQsT0FBTzNxQixFQUdSLFlBQWlCaUIsSUFBVnpZLEVBQ044VyxFQUFPeWIsTUFBTzlhLEVBQU1uWSxFQUFNVSxHQUMxQjhXLEVBQU8wYixJQUFLL2EsRUFBTW5ZLEtBQ2pCQSxFQUFNVSxFQUFPMEMsVUFBVVcsT0FBUyxNQVFyQ3lULEVBQU84ckIsTUFBUUEsR0FFZkEsR0FBTWppQyxVQUFZLENBQ2pCMEssWUFBYXUzQixHQUNiNXJCLEtBQU0sU0FBVVMsRUFBTWhMLEVBQVNna0IsRUFBTXZZLEVBQUsycUIsRUFBUTVQLEdBQ2pEM3dCLEtBQUttVixLQUFPQSxFQUNablYsS0FBS211QixLQUFPQSxFQUNabnVCLEtBQUt1Z0MsT0FBU0EsR0FBVS9yQixFQUFPK3JCLE9BQU9uTyxTQUN0Q3B5QixLQUFLbUssUUFBVUEsRUFDZm5LLEtBQUt5aEIsTUFBUXpoQixLQUFLbVIsSUFBTW5SLEtBQUsrYyxNQUM3Qi9jLEtBQUs0VixJQUFNQSxFQUNYNVYsS0FBSzJ3QixLQUFPQSxJQUFVbmMsRUFBT29jLFVBQVd6QyxHQUFTLEdBQUssT0FFdkRwUixJQUFLLFdBQ0osSUFBSW1TLEVBQVFvUixHQUFNa0IsVUFBV3hoQyxLQUFLbXVCLE1BRWxDLE9BQU9lLEdBQVNBLEVBQU01eEIsSUFDckI0eEIsRUFBTTV4QixJQUFLMEMsTUFDWHNnQyxHQUFNa0IsVUFBVXBQLFNBQVM5MEIsSUFBSzBDLE9BRWhDNEssSUFBSyxTQUFVNjJCLEdBQ2QsSUFBSUMsRUFDSHhTLEVBQVFvUixHQUFNa0IsVUFBV3hoQyxLQUFLbXVCLE1Bb0IvQixPQWxCS251QixLQUFLbUssUUFBUXczQixTQUNqQjNoQyxLQUFLNGhDLElBQU1GLEVBQVFsdEIsRUFBTytyQixPQUFRdmdDLEtBQUt1Z0MsUUFDdENrQixFQUFTemhDLEtBQUttSyxRQUFRdzNCLFNBQVdGLEVBQVMsRUFBRyxFQUFHemhDLEtBQUttSyxRQUFRdzNCLFVBRzlEM2hDLEtBQUs0aEMsSUFBTUYsRUFBUUQsRUFFcEJ6aEMsS0FBS21SLEtBQVFuUixLQUFLNFYsSUFBTTVWLEtBQUt5aEIsT0FBVWlnQixFQUFRMWhDLEtBQUt5aEIsTUFFL0N6aEIsS0FBS21LLFFBQVEwM0IsTUFDakI3aEMsS0FBS21LLFFBQVEwM0IsS0FBS2psQyxLQUFNb0QsS0FBS21WLEtBQU1uVixLQUFLbVIsSUFBS25SLE1BR3pDa3ZCLEdBQVNBLEVBQU1oQixJQUNuQmdCLEVBQU1oQixJQUFLbHVCLE1BRVhzZ0MsR0FBTWtCLFVBQVVwUCxTQUFTbEUsSUFBS2x1QixNQUV4QkEsT0FJVHNnQyxHQUFNamlDLFVBQVVxVyxLQUFLclcsVUFBWWlpQyxHQUFNamlDLFVBRXZDaWlDLEdBQU1rQixVQUFZLENBQ2pCcFAsU0FBVSxDQUNUOTBCLElBQUssU0FBVSt5QixHQUNkLElBQUl2UCxFQUlKLE9BQTZCLElBQXhCdVAsRUFBTWxiLEtBQUsvRSxVQUNhLE1BQTVCaWdCLEVBQU1sYixLQUFNa2IsRUFBTWxDLE9BQW9ELE1BQWxDa0MsRUFBTWxiLEtBQUs4YSxNQUFPSSxFQUFNbEMsTUFDckRrQyxFQUFNbGIsS0FBTWtiLEVBQU1sQyxPQU8xQnJOLEVBQVN0TSxFQUFPMGIsSUFBS0csRUFBTWxiLEtBQU1rYixFQUFNbEMsS0FBTSxNQUdoQixTQUFYck4sRUFBd0JBLEVBQUosR0FFdkNvTixJQUFLLFNBQVVtQyxHQUtUN2IsRUFBT3N0QixHQUFHRCxLQUFNeFIsRUFBTWxDLE1BQzFCM1osRUFBT3N0QixHQUFHRCxLQUFNeFIsRUFBTWxDLE1BQVFrQyxHQUNLLElBQXhCQSxFQUFNbGIsS0FBSy9FLFdBQ3JCb0UsRUFBT2dzQixTQUFVblEsRUFBTWxDLE9BQzRCLE1BQW5Ea0MsRUFBTWxiLEtBQUs4YSxNQUFPeU8sR0FBZXJPLEVBQU1sQyxPQUd4Q2tDLEVBQU1sYixLQUFNa2IsRUFBTWxDLE1BQVNrQyxFQUFNbGYsSUFGakNxRCxFQUFPeWIsTUFBT0ksRUFBTWxiLEtBQU1rYixFQUFNbEMsS0FBTWtDLEVBQU1sZixJQUFNa2YsRUFBTU0sU0FVNUQyUCxHQUFNa0IsVUFBVU8sVUFBWXpCLEdBQU1rQixVQUFVUSxXQUFhLENBQ3hEOVQsSUFBSyxTQUFVbUMsR0FDVEEsRUFBTWxiLEtBQUsvRSxVQUFZaWdCLEVBQU1sYixLQUFLZCxhQUN0Q2djLEVBQU1sYixLQUFNa2IsRUFBTWxDLE1BQVNrQyxFQUFNbGYsT0FLcENxRCxFQUFPK3JCLE9BQVMsQ0FDZjBCLE9BQVEsU0FBVTFqQyxHQUNqQixPQUFPQSxHQUVSMmpDLE1BQU8sU0FBVTNqQyxHQUNoQixNQUFPLEdBQU00SSxLQUFLZzdCLElBQUs1akMsRUFBSTRJLEtBQUtpN0IsSUFBTyxHQUV4Q2hRLFNBQVUsU0FHWDVkLEVBQU9zdEIsR0FBS3hCLEdBQU1qaUMsVUFBVXFXLEtBRzVCRixFQUFPc3RCLEdBQUdELEtBQU8sR0FLakIsSUFDQ1EsR0FBT0MsR0FDUEMsR0FBVyx5QkFDWEMsR0FBTyxjQUVSLFNBQVNDLEtBQ0hILE1BQ3FCLElBQXBCdjlCLEVBQVMyOUIsUUFBb0JuaUMsRUFBT29pQyxzQkFDeENwaUMsRUFBT29pQyxzQkFBdUJGLElBRTlCbGlDLEVBQU9rRyxXQUFZZzhCLEdBQVVqdUIsRUFBT3N0QixHQUFHYyxVQUd4Q3B1QixFQUFPc3RCLEdBQUdlLFFBS1osU0FBU0MsS0FJUixPQUhBdmlDLEVBQU9rRyxZQUFZLFdBQ2xCNDdCLFFBQVFsc0IsS0FFQWtzQixHQUFRemdDLEtBQUt1UCxNQUl2QixTQUFTNHhCLEdBQU9qNUIsRUFBTWs1QixHQUNyQixJQUFJL0osRUFDSHg4QixFQUFJLEVBQ0prZ0IsRUFBUSxDQUFFMmhCLE9BQVF4MEIsR0FLbkIsSUFEQWs1QixFQUFlQSxFQUFlLEVBQUksRUFDMUJ2bUMsRUFBSSxFQUFHQSxHQUFLLEVBQUl1bUMsRUFFdkJybUIsRUFBTyxVQURQc2MsRUFBUXJKLEdBQVduekIsS0FDU2tnQixFQUFPLFVBQVlzYyxHQUFVbnZCLEVBTzFELE9BSktrNUIsSUFDSnJtQixFQUFNOGpCLFFBQVU5akIsRUFBTXVmLE1BQVFweUIsR0FHeEI2UyxFQUdSLFNBQVNzbUIsR0FBYXZsQyxFQUFPeXdCLEVBQU0rVSxHQUtsQyxJQUpBLElBQUk3UyxFQUNIaUssR0FBZTZJLEdBQVVDLFNBQVVqVixJQUFVLElBQUtodUIsT0FBUWdqQyxHQUFVQyxTQUFVLE1BQzlFeGIsRUFBUSxFQUNSN21CLEVBQVN1NUIsRUFBV3Y1QixPQUNiNm1CLEVBQVE3bUIsRUFBUTZtQixJQUN2QixHQUFPeUksRUFBUWlLLEVBQVkxUyxHQUFRaHJCLEtBQU1zbUMsRUFBVy9VLEVBQU16d0IsR0FHekQsT0FBTzJ5QixFQXNOVixTQUFTOFMsR0FBV2h1QixFQUFNa3VCLEVBQVlsNUIsR0FDckMsSUFBSTJXLEVBQ0h3aUIsRUFDQTFiLEVBQVEsRUFDUjdtQixFQUFTb2lDLEdBQVVJLFdBQVd4aUMsT0FDOUJ1cEIsRUFBVzlWLEVBQU95VixXQUFXSSxRQUFRLGtCQUc3QndZLEVBQUsxdEIsUUFFYjB0QixFQUFPLFdBQ04sR0FBS1MsRUFDSixPQUFPLEVBWVIsSUFWQSxJQUFJRSxFQUFjbkIsSUFBU1MsS0FDMUI5VyxFQUFZN2tCLEtBQUtxNEIsSUFBSyxFQUFHMEQsRUFBVU8sVUFBWVAsRUFBVXZCLFNBQVc2QixHQUtwRS9CLEVBQVUsR0FESHpWLEVBQVlrWCxFQUFVdkIsVUFBWSxHQUV6Qy9aLEVBQVEsRUFDUjdtQixFQUFTbWlDLEVBQVVRLE9BQU8zaUMsT0FFbkI2bUIsRUFBUTdtQixFQUFRNm1CLElBQ3ZCc2IsRUFBVVEsT0FBUTliLEdBQVFoZCxJQUFLNjJCLEdBTWhDLE9BSEFuWCxFQUFTZ0IsV0FBWW5XLEVBQU0sQ0FBRSt0QixFQUFXekIsRUFBU3pWLElBRzVDeVYsRUFBVSxHQUFLMWdDLEVBQ1ppckIsR0FJRmpyQixHQUNMdXBCLEVBQVNnQixXQUFZblcsRUFBTSxDQUFFK3RCLEVBQVcsRUFBRyxJQUk1QzVZLEVBQVNpQixZQUFhcFcsRUFBTSxDQUFFK3RCLEtBQ3ZCLElBRVJBLEVBQVk1WSxFQUFTeEIsUUFBUyxDQUM3QjNULEtBQU1BLEVBQ05paUIsTUFBTzVpQixFQUFPMVMsT0FBUSxHQUFJdWhDLEdBQzFCeDJCLEtBQU0ySCxFQUFPMVMsUUFBUSxFQUFNLENBQzFCNmhDLGNBQWUsR0FDZnBELE9BQVEvckIsRUFBTytyQixPQUFPbk8sVUFDcEJqb0IsR0FDSHk1QixtQkFBb0JQLEVBQ3BCUSxnQkFBaUIxNUIsRUFDakJzNUIsVUFBV3BCLElBQVNTLEtBQ3BCbkIsU0FBVXgzQixFQUFRdzNCLFNBQ2xCK0IsT0FBUSxHQUNSVCxZQUFhLFNBQVU5VSxFQUFNdlksR0FDNUIsSUFBSXlhLEVBQVE3YixFQUFPOHJCLE1BQU9uckIsRUFBTSt0QixFQUFVcjJCLEtBQU1zaEIsRUFBTXZZLEVBQ3BEc3RCLEVBQVVyMkIsS0FBSzgyQixjQUFleFYsSUFBVStVLEVBQVVyMkIsS0FBSzB6QixRQUV6RCxPQURBMkMsRUFBVVEsT0FBT2ppQyxLQUFNNHVCLEdBQ2hCQSxHQUVSakIsS0FBTSxTQUFVMFUsR0FDZixJQUFJbGMsRUFBUSxFQUlYN21CLEVBQVMraUMsRUFBVVosRUFBVVEsT0FBTzNpQyxPQUFTLEVBQzlDLEdBQUt1aUMsRUFDSixPQUFPdGpDLEtBR1IsSUFEQXNqQyxHQUFVLEVBQ0YxYixFQUFRN21CLEVBQVE2bUIsSUFDdkJzYixFQUFVUSxPQUFROWIsR0FBUWhkLElBQUssR0FVaEMsT0FOS2s1QixHQUNKeFosRUFBU2dCLFdBQVluVyxFQUFNLENBQUUrdEIsRUFBVyxFQUFHLElBQzNDNVksRUFBU2lCLFlBQWFwVyxFQUFNLENBQUUrdEIsRUFBV1ksS0FFekN4WixFQUFTcUIsV0FBWXhXLEVBQU0sQ0FBRSt0QixFQUFXWSxJQUVsQzlqQyxRQUdUbzNCLEVBQVE4TCxFQUFVOUwsTUFJbkIsS0EvSEQsU0FBcUJBLEVBQU91TSxHQUMzQixJQUFJL2IsRUFBTzVxQixFQUFNdWpDLEVBQVE3aUMsRUFBT3d4QixFQUdoQyxJQUFNdEgsS0FBU3dQLEVBZWQsR0FiQW1KLEVBQVNvRCxFQURUM21DLEVBQU80d0IsRUFBV2hHLElBRWxCbHFCLEVBQVEwNUIsRUFBT3hQLEdBQ1Y3b0IsTUFBTWtELFFBQVN2RSxLQUNuQjZpQyxFQUFTN2lDLEVBQU8sR0FDaEJBLEVBQVEwNUIsRUFBT3hQLEdBQVVscUIsRUFBTyxJQUc1QmtxQixJQUFVNXFCLElBQ2RvNkIsRUFBT3A2QixHQUFTVSxTQUNUMDVCLEVBQU94UCxLQUdmc0gsRUFBUTFhLEVBQU9nc0IsU0FBVXhqQyxLQUNYLFdBQVlreUIsRUFNekIsSUFBTXRILEtBTE5scUIsRUFBUXd4QixFQUFNb1MsT0FBUTVqQyxVQUNmMDVCLEVBQU9wNkIsR0FJQ1UsRUFDTmtxQixLQUFTd1AsSUFDaEJBLEVBQU94UCxHQUFVbHFCLEVBQU9rcUIsR0FDeEIrYixFQUFlL2IsR0FBVTJZLFFBSTNCb0QsRUFBZTNtQyxHQUFTdWpDLEVBNkYxQndELENBQVkzTSxFQUFPOEwsRUFBVXIyQixLQUFLODJCLGVBRTFCL2IsRUFBUTdtQixFQUFRNm1CLElBRXZCLEdBREE5RyxFQUFTcWlCLEdBQVVJLFdBQVkzYixHQUFRaHJCLEtBQU1zbUMsRUFBVy90QixFQUFNaWlCLEVBQU84TCxFQUFVcjJCLE1BTTlFLE9BSks3SyxFQUFZOGUsRUFBT3NPLFFBQ3ZCNWEsRUFBTzJhLFlBQWErVCxFQUFVL3RCLEtBQU0rdEIsRUFBVXIyQixLQUFLMmMsT0FBUTRGLEtBQzFEdE8sRUFBT3NPLEtBQUtueEIsS0FBTTZpQixJQUViQSxFQXlCVCxPQXJCQXRNLEVBQU9VLElBQUtraUIsRUFBTzZMLEdBQWFDLEdBRTNCbGhDLEVBQVlraEMsRUFBVXIyQixLQUFLNFUsUUFDL0J5aEIsRUFBVXIyQixLQUFLNFUsTUFBTTdrQixLQUFNdVksRUFBTSt0QixHQUlsQ0EsRUFDRXZZLFNBQVV1WSxFQUFVcjJCLEtBQUs4ZCxVQUN6QnZTLEtBQU04cUIsRUFBVXIyQixLQUFLdUwsS0FBTThxQixFQUFVcjJCLEtBQUttM0IsVUFDMUNqYixLQUFNbWEsRUFBVXIyQixLQUFLa2MsTUFDckJzQixPQUFRNlksRUFBVXIyQixLQUFLd2QsUUFFekI3VixFQUFPc3RCLEdBQUdtQyxNQUNUenZCLEVBQU8xUyxPQUFRK2dDLEVBQU0sQ0FDcEIxdEIsS0FBTUEsRUFDTit1QixLQUFNaEIsRUFDTjFaLE1BQU8wWixFQUFVcjJCLEtBQUsyYyxTQUlqQjBaLEVBR1IxdUIsRUFBTzJ1QixVQUFZM3VCLEVBQU8xUyxPQUFRcWhDLEdBQVcsQ0FFNUNDLFNBQVUsQ0FDVCxJQUFLLENBQUUsU0FBVWpWLEVBQU16d0IsR0FDdEIsSUFBSTJ5QixFQUFRcndCLEtBQUtpakMsWUFBYTlVLEVBQU16d0IsR0FFcEMsT0FEQXl5QixHQUFXRSxFQUFNbGIsS0FBTWdaLEVBQU13QixHQUFRMW1CLEtBQU12TCxHQUFTMnlCLEdBQzdDQSxLQUlUOFQsUUFBUyxTQUFVL00sRUFBT3Z1QixHQUNwQjdHLEVBQVlvMUIsSUFDaEJ2dUIsRUFBV3V1QixFQUNYQSxFQUFRLENBQUUsTUFFVkEsRUFBUUEsRUFBTWx6QixNQUFPb2tCLEdBT3RCLElBSkEsSUFBSTZGLEVBQ0h2RyxFQUFRLEVBQ1I3bUIsRUFBU3EyQixFQUFNcjJCLE9BRVI2bUIsRUFBUTdtQixFQUFRNm1CLElBQ3ZCdUcsRUFBT2lKLEVBQU94UCxHQUNkdWIsR0FBVUMsU0FBVWpWLEdBQVNnVixHQUFVQyxTQUFValYsSUFBVSxHQUMzRGdWLEdBQVVDLFNBQVVqVixHQUFPeHNCLFFBQVNrSCxJQUl0QzA2QixXQUFZLENBM1diLFNBQTJCcHVCLEVBQU1paUIsRUFBT3ZxQixHQUN2QyxJQUFJc2hCLEVBQU16d0IsRUFBTzJ6QixFQUFRbkMsRUFBT2tWLEVBQVNDLEVBQVdDLEVBQWdCN2hDLEVBQ25FOGhDLEVBQVEsVUFBV25OLEdBQVMsV0FBWUEsRUFDeEM4TSxFQUFPbGtDLEtBQ1B3NUIsRUFBTyxHQUNQdkosRUFBUTlhLEVBQUs4YSxNQUNieVMsRUFBU3Z0QixFQUFLL0UsVUFBWTRmLEdBQW9CN2EsR0FDOUNxdkIsRUFBV25XLEVBQVMvd0IsSUFBSzZYLEVBQU0sVUE2QmhDLElBQU1nWixLQTFCQXRoQixFQUFLMmMsUUFFYSxPQUR2QjBGLEVBQVExYSxFQUFPMmEsWUFBYWhhLEVBQU0sT0FDdkJzdkIsV0FDVnZWLEVBQU11VixTQUFXLEVBQ2pCTCxFQUFVbFYsRUFBTXJGLE1BQU1ILEtBQ3RCd0YsRUFBTXJGLE1BQU1ILEtBQU8sV0FDWndGLEVBQU11VixVQUNYTCxNQUlIbFYsRUFBTXVWLFdBRU5QLEVBQUs3WixRQUFRLFdBR1o2WixFQUFLN1osUUFBUSxXQUNaNkUsRUFBTXVWLFdBQ0Fqd0IsRUFBT2dWLE1BQU9yVSxFQUFNLE1BQU9wVSxRQUNoQ211QixFQUFNckYsTUFBTUgsY0FPRjBOLEVBRWIsR0FEQTE1QixFQUFRMDVCLEVBQU9qSixHQUNWb1UsR0FBU3I4QixLQUFNeEksR0FBVSxDQUc3QixVQUZPMDVCLEVBQU9qSixHQUNka0QsRUFBU0EsR0FBb0IsV0FBVjN6QixFQUNkQSxLQUFZZ2xDLEVBQVMsT0FBUyxRQUFXLENBSTdDLEdBQWUsU0FBVmhsQyxJQUFvQjhtQyxRQUFpQ3J1QixJQUFyQnF1QixFQUFVclcsR0FLOUMsU0FKQXVVLEdBQVMsRUFPWGxKLEVBQU1yTCxHQUFTcVcsR0FBWUEsRUFBVXJXLElBQVUzWixFQUFPeWIsTUFBTzlhLEVBQU1nWixHQU1yRSxJQURBa1csR0FBYTd2QixFQUFPOUgsY0FBZTBxQixNQUNoQjVpQixFQUFPOUgsY0FBZThzQixHQThEekMsSUFBTXJMLEtBekREb1csR0FBMkIsSUFBbEJwdkIsRUFBSy9FLFdBTWxCdkQsRUFBSzYzQixTQUFXLENBQUV6VSxFQUFNeVUsU0FBVXpVLEVBQU0wVSxVQUFXMVUsRUFBTTJVLFdBSWxDLE9BRHZCTixFQUFpQkUsR0FBWUEsRUFBUy9oQyxXQUVyQzZoQyxFQUFpQmpXLEVBQVMvd0IsSUFBSzZYLEVBQU0sWUFHckIsVUFEakIxUyxFQUFVK1IsRUFBTzBiLElBQUsvYSxFQUFNLGNBRXRCbXZCLEVBQ0o3aEMsRUFBVTZoQyxHQUlWclQsR0FBVSxDQUFFOWIsSUFBUSxHQUNwQm12QixFQUFpQm52QixFQUFLOGEsTUFBTXh0QixTQUFXNmhDLEVBQ3ZDN2hDLEVBQVUrUixFQUFPMGIsSUFBSy9hLEVBQU0sV0FDNUI4YixHQUFVLENBQUU5YixPQUtHLFdBQVoxUyxHQUFvQyxpQkFBWkEsR0FBZ0QsTUFBbEI2aEMsSUFDckIsU0FBaEM5dkIsRUFBTzBiLElBQUsvYSxFQUFNLFdBR2hCa3ZCLElBQ0xILEVBQUs5ckIsTUFBTSxXQUNWNlgsRUFBTXh0QixRQUFVNmhDLEtBRU0sTUFBbEJBLElBQ0o3aEMsRUFBVXd0QixFQUFNeHRCLFFBQ2hCNmhDLEVBQTZCLFNBQVo3aEMsRUFBcUIsR0FBS0EsSUFHN0N3dEIsRUFBTXh0QixRQUFVLGlCQUtkb0ssRUFBSzYzQixXQUNUelUsRUFBTXlVLFNBQVcsU0FDakJSLEVBQUs3WixRQUFRLFdBQ1o0RixFQUFNeVUsU0FBVzczQixFQUFLNjNCLFNBQVUsR0FDaEN6VSxFQUFNMFUsVUFBWTkzQixFQUFLNjNCLFNBQVUsR0FDakN6VSxFQUFNMlUsVUFBWS8zQixFQUFLNjNCLFNBQVUsT0FLbkNMLEdBQVksRUFDRTdLLEVBR1A2SyxJQUNBRyxFQUNDLFdBQVlBLElBQ2hCOUIsRUFBUzhCLEVBQVM5QixRQUduQjhCLEVBQVduVyxFQUFTckIsT0FBUTdYLEVBQU0sU0FBVSxDQUFFMVMsUUFBUzZoQyxJQUluRGpULElBQ0ptVCxFQUFTOUIsUUFBVUEsR0FJZkEsR0FDSnpSLEdBQVUsQ0FBRTliLElBQVEsR0FLckIrdUIsRUFBSzlyQixNQUFNLFdBU1YsSUFBTStWLEtBSkF1VSxHQUNMelIsR0FBVSxDQUFFOWIsSUFFYmtaLEVBQVM5ZCxPQUFRNEUsRUFBTSxVQUNUcWtCLEVBQ2JobEIsRUFBT3liLE1BQU85YSxFQUFNZ1osRUFBTXFMLEVBQU1yTCxRQU1uQ2tXLEVBQVlwQixHQUFhUCxFQUFTOEIsRUFBVXJXLEdBQVMsRUFBR0EsRUFBTStWLEdBQ3REL1YsS0FBUXFXLElBQ2ZBLEVBQVVyVyxHQUFTa1csRUFBVTVpQixNQUN4QmloQixJQUNKMkIsRUFBVXp1QixJQUFNeXVCLEVBQVU1aUIsTUFDMUI0aUIsRUFBVTVpQixNQUFRLE1BdU1yQm9qQixVQUFXLFNBQVVoOEIsRUFBVXFKLEdBQ3pCQSxFQUNKaXhCLEdBQVVJLFdBQVc1aEMsUUFBU2tILEdBRTlCczZCLEdBQVVJLFdBQVc5aEMsS0FBTW9ILE1BSzlCMkwsRUFBT3N3QixNQUFRLFNBQVVBLEVBQU92RSxFQUFROXJCLEdBQ3ZDLElBQUlzd0IsRUFBTUQsR0FBMEIsaUJBQVZBLEVBQXFCdHdCLEVBQU8xUyxPQUFRLEdBQUlnakMsR0FBVSxDQUMzRWQsU0FBVXZ2QixJQUFPQSxHQUFNOHJCLEdBQ3RCditCLEVBQVk4aUMsSUFBV0EsRUFDeEJuRCxTQUFVbUQsRUFDVnZFLE9BQVE5ckIsR0FBTThyQixHQUFVQSxJQUFXditCLEVBQVl1K0IsSUFBWUEsR0FvQzVELE9BaENLL3JCLEVBQU9zdEIsR0FBRzFOLElBQ2QyUSxFQUFJcEQsU0FBVyxFQUdjLGlCQUFqQm9ELEVBQUlwRCxXQUNWb0QsRUFBSXBELFlBQVludEIsRUFBT3N0QixHQUFHa0QsT0FDOUJELEVBQUlwRCxTQUFXbnRCLEVBQU9zdEIsR0FBR2tELE9BQVFELEVBQUlwRCxVQUdyQ29ELEVBQUlwRCxTQUFXbnRCLEVBQU9zdEIsR0FBR2tELE9BQU81UyxVQU1qQixNQUFiMlMsRUFBSXZiLFFBQStCLElBQWR1YixFQUFJdmIsUUFDN0J1YixFQUFJdmIsTUFBUSxNQUlidWIsRUFBSWpKLElBQU1pSixFQUFJZixTQUVkZSxFQUFJZixTQUFXLFdBQ1RoaUMsRUFBWStpQyxFQUFJakosTUFDcEJpSixFQUFJakosSUFBSWwvQixLQUFNb0QsTUFHVitrQyxFQUFJdmIsT0FDUmhWLEVBQU93YSxRQUFTaHZCLEtBQU0ra0MsRUFBSXZiLFFBSXJCdWIsR0FHUnZ3QixFQUFPQyxHQUFHM1MsT0FBUSxDQUNqQm1qQyxPQUFRLFNBQVVILEVBQU96eUIsRUFBSWt1QixFQUFRMTNCLEdBR3BDLE9BQU83SSxLQUFLcWUsT0FBUTJSLElBQXFCRSxJQUFLLFVBQVcsR0FBSWdCLE9BRzNEdGIsTUFBTXN2QixRQUFTLENBQUV6RSxRQUFTcHVCLEdBQU15eUIsRUFBT3ZFLEVBQVExM0IsSUFFbERxOEIsUUFBUyxTQUFVL1csRUFBTTJXLEVBQU92RSxFQUFRMTNCLEdBQ3ZDLElBQUlnaEIsRUFBUXJWLEVBQU85SCxjQUFleWhCLEdBQ2pDZ1gsRUFBUzN3QixFQUFPc3dCLE1BQU9BLEVBQU92RSxFQUFRMTNCLEdBQ3RDdThCLEVBQWMsV0FHYixJQUFJbEIsRUFBT2YsR0FBV25qQyxLQUFNd1UsRUFBTzFTLE9BQVEsR0FBSXFzQixHQUFRZ1gsSUFHbER0YixHQUFTd0UsRUFBUy93QixJQUFLMEMsS0FBTSxZQUNqQ2trQyxFQUFLOVUsTUFBTSxJQUtkLE9BRkNnVyxFQUFZQyxPQUFTRCxFQUVmdmIsSUFBMEIsSUFBakJzYixFQUFPM2IsTUFDdEJ4cEIsS0FBS21CLEtBQU1pa0MsR0FDWHBsQyxLQUFLd3BCLE1BQU8yYixFQUFPM2IsTUFBTzRiLElBRTVCaFcsS0FBTSxTQUFVdGxCLEVBQU13bEIsRUFBWXdVLEdBQ2pDLElBQUl3QixFQUFZLFNBQVVwVyxHQUN6QixJQUFJRSxFQUFPRixFQUFNRSxZQUNWRixFQUFNRSxLQUNiQSxFQUFNMFUsSUFZUCxNQVRxQixpQkFBVGg2QixJQUNYZzZCLEVBQVV4VSxFQUNWQSxFQUFheGxCLEVBQ2JBLE9BQU9xTSxHQUVIbVosR0FDSnR2QixLQUFLd3BCLE1BQU8xZixHQUFRLEtBQU0sSUFHcEI5SixLQUFLbUIsTUFBTSxXQUNqQixJQUFJNnRCLEdBQVUsRUFDYnBILEVBQWdCLE1BQVI5ZCxHQUFnQkEsRUFBTyxhQUMvQnk3QixFQUFTL3dCLEVBQU8rd0IsT0FDaEI1OUIsRUFBTzBtQixFQUFTL3dCLElBQUswQyxNQUV0QixHQUFLNG5CLEVBQ0NqZ0IsRUFBTWlnQixJQUFXamdCLEVBQU1pZ0IsR0FBUXdILE1BQ25Da1csRUFBVzM5QixFQUFNaWdCLFNBR2xCLElBQU1BLEtBQVNqZ0IsRUFDVEEsRUFBTWlnQixJQUFXamdCLEVBQU1pZ0IsR0FBUXdILE1BQVFvVCxHQUFLdDhCLEtBQU0waEIsSUFDdEQwZCxFQUFXMzlCLEVBQU1pZ0IsSUFLcEIsSUFBTUEsRUFBUTJkLEVBQU94a0MsT0FBUTZtQixLQUN2QjJkLEVBQVEzZCxHQUFRelMsT0FBU25WLE1BQ25CLE1BQVI4SixHQUFnQnk3QixFQUFRM2QsR0FBUTRCLFFBQVUxZixJQUU1Q3k3QixFQUFRM2QsR0FBUXNjLEtBQUs5VSxLQUFNMFUsR0FDM0I5VSxHQUFVLEVBQ1Z1VyxFQUFPenZCLE9BQVE4UixFQUFPLEtBT25Cb0gsR0FBWThVLEdBQ2hCdHZCLEVBQU93YSxRQUFTaHZCLEtBQU04SixPQUl6QnU3QixPQUFRLFNBQVV2N0IsR0FJakIsT0FIYyxJQUFUQSxJQUNKQSxFQUFPQSxHQUFRLE1BRVQ5SixLQUFLbUIsTUFBTSxXQUNqQixJQUFJeW1CLEVBQ0hqZ0IsRUFBTzBtQixFQUFTL3dCLElBQUswQyxNQUNyQndwQixFQUFRN2hCLEVBQU1tQyxFQUFPLFNBQ3JCb2xCLEVBQVF2bkIsRUFBTW1DLEVBQU8sY0FDckJ5N0IsRUFBUy93QixFQUFPK3dCLE9BQ2hCeGtDLEVBQVN5b0IsRUFBUUEsRUFBTXpvQixPQUFTLEVBYWpDLElBVkE0RyxFQUFLMDlCLFFBQVMsRUFHZDd3QixFQUFPZ1YsTUFBT3hwQixLQUFNOEosRUFBTSxJQUVyQm9sQixHQUFTQSxFQUFNRSxNQUNuQkYsRUFBTUUsS0FBS3h5QixLQUFNb0QsTUFBTSxHQUlsQjRuQixFQUFRMmQsRUFBT3hrQyxPQUFRNm1CLEtBQ3ZCMmQsRUFBUTNkLEdBQVF6UyxPQUFTblYsTUFBUXVsQyxFQUFRM2QsR0FBUTRCLFFBQVUxZixJQUMvRHk3QixFQUFRM2QsR0FBUXNjLEtBQUs5VSxNQUFNLEdBQzNCbVcsRUFBT3p2QixPQUFROFIsRUFBTyxJQUt4QixJQUFNQSxFQUFRLEVBQUdBLEVBQVE3bUIsRUFBUTZtQixJQUMzQjRCLEVBQU81QixJQUFXNEIsRUFBTzVCLEdBQVF5ZCxRQUNyQzdiLEVBQU81QixHQUFReWQsT0FBT3pvQyxLQUFNb0QsYUFLdkIySCxFQUFLMDlCLGFBS2Y3d0IsRUFBT3JULEtBQU0sQ0FBRSxTQUFVLE9BQVEsU0FBVSxTQUFVOFYsRUFBSWphLEdBQ3hELElBQUl3b0MsRUFBUWh4QixFQUFPQyxHQUFJelgsR0FDdkJ3WCxFQUFPQyxHQUFJelgsR0FBUyxTQUFVOG5DLEVBQU92RSxFQUFRMTNCLEdBQzVDLE9BQWdCLE1BQVRpOEIsR0FBa0Msa0JBQVZBLEVBQzlCVSxFQUFNdGxDLE1BQU9GLEtBQU1JLFdBQ25CSixLQUFLa2xDLFFBQVNuQyxHQUFPL2xDLEdBQU0sR0FBUThuQyxFQUFPdkUsRUFBUTEzQixPQUtyRDJMLEVBQU9yVCxLQUFNLENBQ1pza0MsVUFBVzFDLEdBQU8sUUFDbEIyQyxRQUFTM0MsR0FBTyxRQUNoQjRDLFlBQWE1QyxHQUFPLFVBQ3BCNkMsT0FBUSxDQUFFbkYsUUFBUyxRQUNuQm9GLFFBQVMsQ0FBRXBGLFFBQVMsUUFDcEJxRixXQUFZLENBQUVyRixRQUFTLFlBQ3JCLFNBQVV6akMsRUFBTW82QixHQUNsQjVpQixFQUFPQyxHQUFJelgsR0FBUyxTQUFVOG5DLEVBQU92RSxFQUFRMTNCLEdBQzVDLE9BQU83SSxLQUFLa2xDLFFBQVM5TixFQUFPME4sRUFBT3ZFLEVBQVExM0IsT0FJN0MyTCxFQUFPK3dCLE9BQVMsR0FDaEIvd0IsRUFBT3N0QixHQUFHZSxLQUFPLFdBQ2hCLElBQUlvQixFQUNIeG5DLEVBQUksRUFDSjhvQyxFQUFTL3dCLEVBQU8rd0IsT0FJakIsSUFGQWxELEdBQVF6Z0MsS0FBS3VQLE1BRUwxVSxFQUFJOG9DLEVBQU94a0MsT0FBUXRFLEtBQzFCd25DLEVBQVFzQixFQUFROW9DLE9BR0M4b0MsRUFBUTlvQyxLQUFRd25DLEdBQ2hDc0IsRUFBT3p2QixPQUFRclosSUFBSyxHQUloQjhvQyxFQUFPeGtDLFFBQ1p5VCxFQUFPc3RCLEdBQUcxUyxPQUVYaVQsUUFBUWxzQixHQUdUM0IsRUFBT3N0QixHQUFHbUMsTUFBUSxTQUFVQSxHQUMzQnp2QixFQUFPK3dCLE9BQU85akMsS0FBTXdpQyxHQUNwQnp2QixFQUFPc3RCLEdBQUdyZ0IsU0FHWGpOLEVBQU9zdEIsR0FBR2MsU0FBVyxHQUNyQnB1QixFQUFPc3RCLEdBQUdyZ0IsTUFBUSxXQUNaNmdCLEtBSUxBLElBQWEsRUFDYkcsT0FHRGp1QixFQUFPc3RCLEdBQUcxUyxLQUFPLFdBQ2hCa1QsR0FBYSxNQUdkOXRCLEVBQU9zdEIsR0FBR2tELE9BQVMsQ0FDbEJlLEtBQU0sSUFDTkMsS0FBTSxJQUdONVQsU0FBVSxLQU1YNWQsRUFBT0MsR0FBR3d4QixNQUFRLFNBQVVDLEVBQU1wOEIsR0FJakMsT0FIQW84QixFQUFPMXhCLEVBQU9zdEIsSUFBS3R0QixFQUFPc3RCLEdBQUdrRCxPQUFRa0IsSUFBaUJBLEVBQ3REcDhCLEVBQU9BLEdBQVEsS0FFUjlKLEtBQUt3cEIsTUFBTzFmLEdBQU0sU0FBVTBGLEVBQU0wZixHQUN4QyxJQUFJaVgsRUFBVTVsQyxFQUFPa0csV0FBWStJLEVBQU0wMkIsR0FDdkNoWCxFQUFNRSxLQUFPLFdBQ1o3dUIsRUFBTzZsQyxhQUFjRCxRQU14QixXQUNDLElBQUl6bkIsRUFBUTNaLEVBQVNRLGNBQWUsU0FFbkN3L0IsRUFEU2hnQyxFQUFTUSxjQUFlLFVBQ3BCNk8sWUFBYXJQLEVBQVNRLGNBQWUsV0FFbkRtWixFQUFNNVUsS0FBTyxXQUlid0osRUFBUSt5QixRQUEwQixLQUFoQjNuQixFQUFNaGhCLE1BSXhCNFYsRUFBUWd6QixZQUFjdkIsRUFBSXRpQixVQUkxQi9ELEVBQVEzWixFQUFTUSxjQUFlLFVBQzFCN0gsTUFBUSxJQUNkZ2hCLEVBQU01VSxLQUFPLFFBQ2J3SixFQUFRaXpCLFdBQTZCLE1BQWhCN25CLEVBQU1oaEIsTUFwQjVCLEdBd0JBLElBQUk4b0MsR0FDSDNwQixHQUFhckksRUFBT2lMLEtBQUs1QyxXQUUxQnJJLEVBQU9DLEdBQUczUyxPQUFRLENBQ2pCMEIsS0FBTSxTQUFVeEcsRUFBTVUsR0FDckIsT0FBT3N2QixFQUFRaHRCLEtBQU13VSxFQUFPaFIsS0FBTXhHLEVBQU1VLEVBQU8wQyxVQUFVVyxPQUFTLElBR25FMGxDLFdBQVksU0FBVXpwQyxHQUNyQixPQUFPZ0QsS0FBS21CLE1BQU0sV0FDakJxVCxFQUFPaXlCLFdBQVl6bUMsS0FBTWhELFNBSzVCd1gsRUFBTzFTLE9BQVEsQ0FDZDBCLEtBQU0sU0FBVTJSLEVBQU1uWSxFQUFNVSxHQUMzQixJQUFJaVEsRUFBS3VoQixFQUNSd1gsRUFBUXZ4QixFQUFLL0UsU0FHZCxHQUFlLElBQVZzMkIsR0FBeUIsSUFBVkEsR0FBeUIsSUFBVkEsRUFLbkMsWUFBa0MsSUFBdEJ2eEIsRUFBSy9HLGFBQ1RvRyxFQUFPMlosS0FBTWhaLEVBQU1uWSxFQUFNVSxJQUtsQixJQUFWZ3BDLEdBQWdCbHlCLEVBQU84UixTQUFVblIsS0FDckMrWixFQUFRMWEsRUFBT215QixVQUFXM3BDLEVBQUs4TCxpQkFDNUIwTCxFQUFPaUwsS0FBS3ZiLE1BQU0waUMsS0FBSzFnQyxLQUFNbEosR0FBU3dwQyxRQUFXcndCLFNBR3RDQSxJQUFWelksRUFDVyxPQUFWQSxPQUNKOFcsRUFBT2l5QixXQUFZdHhCLEVBQU1uWSxHQUlyQmt5QixHQUFTLFFBQVNBLFFBQ3VCL1ksS0FBM0N4SSxFQUFNdWhCLEVBQU1oQixJQUFLL1ksRUFBTXpYLEVBQU9WLElBQ3pCMlEsR0FHUndILEVBQUtqQixhQUFjbFgsRUFBTVUsRUFBUSxJQUMxQkEsR0FHSHd4QixHQUFTLFFBQVNBLEdBQStDLFFBQXBDdmhCLEVBQU11aEIsRUFBTTV4QixJQUFLNlgsRUFBTW5ZLElBQ2pEMlEsRUFNTSxPQUhkQSxFQUFNNkcsRUFBT3BNLEtBQUs1RSxLQUFNMlIsRUFBTW5ZLFNBR1RtWixFQUFZeEksSUFHbENnNUIsVUFBVyxDQUNWNzhCLEtBQU0sQ0FDTG9rQixJQUFLLFNBQVUvWSxFQUFNelgsR0FDcEIsSUFBTTRWLEVBQVFpekIsWUFBd0IsVUFBVjdvQyxHQUMzQnVkLEVBQVU5RixFQUFNLFNBQVksQ0FDNUIsSUFBSWhILEVBQU1nSCxFQUFLelgsTUFLZixPQUpBeVgsRUFBS2pCLGFBQWMsT0FBUXhXLEdBQ3RCeVEsSUFDSmdILEVBQUt6WCxNQUFReVEsR0FFUHpRLE1BTVgrb0MsV0FBWSxTQUFVdHhCLEVBQU16WCxHQUMzQixJQUFJVixFQUNIUCxFQUFJLEVBSUpvcUMsRUFBWW5wQyxHQUFTQSxFQUFNd0csTUFBT29rQixHQUVuQyxHQUFLdWUsR0FBK0IsSUFBbEIxeEIsRUFBSy9FLFNBQ3RCLEtBQVVwVCxFQUFPNnBDLEVBQVdwcUMsTUFDM0IwWSxFQUFLa0gsZ0JBQWlCcmYsTUFPMUJ3cEMsR0FBVyxDQUNWdFksSUFBSyxTQUFVL1ksRUFBTXpYLEVBQU9WLEdBUTNCLE9BUGUsSUFBVlUsRUFHSjhXLEVBQU9peUIsV0FBWXR4QixFQUFNblksR0FFekJtWSxFQUFLakIsYUFBY2xYLEVBQU1BLEdBRW5CQSxJQUlUd1gsRUFBT3JULEtBQU1xVCxFQUFPaUwsS0FBS3ZiLE1BQU0waUMsS0FBS2xYLE9BQU94ckIsTUFBTyxTQUFVLFNBQVUrUyxFQUFJamEsR0FDekUsSUFBSUMsRUFBUzRmLEdBQVk3ZixJQUFVd1gsRUFBT3BNLEtBQUs1RSxLQUUvQ3FaLEdBQVk3ZixHQUFTLFNBQVVtWSxFQUFNblksRUFBTXFhLEdBQzFDLElBQUkxSixFQUFLMG5CLEVBQ1J5UixFQUFnQjlwQyxFQUFLOEwsY0FZdEIsT0FWTXVPLElBR0xnZSxFQUFTeFksR0FBWWlxQixHQUNyQmpxQixHQUFZaXFCLEdBQWtCbjVCLEVBQzlCQSxFQUFxQyxNQUEvQjFRLEVBQVFrWSxFQUFNblksRUFBTXFhLEdBQ3pCeXZCLEVBQ0EsS0FDRGpxQixHQUFZaXFCLEdBQWtCelIsR0FFeEIxbkIsTUFPVCxJQUFJbzVCLEdBQWEsc0NBQ2hCQyxHQUFhLGdCQXlJYixTQUFTQyxHQUFrQnZwQyxHQUUxQixPQURhQSxFQUFNd0csTUFBT29rQixJQUFtQixJQUMvQnhsQixLQUFNLEtBSXRCLFNBQVNva0MsR0FBVS94QixHQUNsQixPQUFPQSxFQUFLL0csY0FBZ0IrRyxFQUFLL0csYUFBYyxVQUFhLEdBRzdELFNBQVMrNEIsR0FBZ0J6cEMsR0FDeEIsT0FBS3FCLE1BQU1rRCxRQUFTdkUsR0FDWkEsRUFFYyxpQkFBVkEsR0FDSkEsRUFBTXdHLE1BQU9va0IsSUFFZCxHQXhKUjlULEVBQU9DLEdBQUczUyxPQUFRLENBQ2pCcXNCLEtBQU0sU0FBVW54QixFQUFNVSxHQUNyQixPQUFPc3ZCLEVBQVFodEIsS0FBTXdVLEVBQU8yWixLQUFNbnhCLEVBQU1VLEVBQU8wQyxVQUFVVyxPQUFTLElBR25FcW1DLFdBQVksU0FBVXBxQyxHQUNyQixPQUFPZ0QsS0FBS21CLE1BQU0sa0JBQ1ZuQixLQUFNd1UsRUFBTzZ5QixRQUFTcnFDLElBQVVBLFNBSzFDd1gsRUFBTzFTLE9BQVEsQ0FDZHFzQixLQUFNLFNBQVVoWixFQUFNblksRUFBTVUsR0FDM0IsSUFBSWlRLEVBQUt1aEIsRUFDUndYLEVBQVF2eEIsRUFBSy9FLFNBR2QsR0FBZSxJQUFWczJCLEdBQXlCLElBQVZBLEdBQXlCLElBQVZBLEVBV25DLE9BUGUsSUFBVkEsR0FBZ0JseUIsRUFBTzhSLFNBQVVuUixLQUdyQ25ZLEVBQU93WCxFQUFPNnlCLFFBQVNycUMsSUFBVUEsRUFDakNreUIsRUFBUTFhLEVBQU9ndEIsVUFBV3hrQyxTQUdabVosSUFBVnpZLEVBQ0N3eEIsR0FBUyxRQUFTQSxRQUN1Qi9ZLEtBQTNDeEksRUFBTXVoQixFQUFNaEIsSUFBSy9ZLEVBQU16WCxFQUFPVixJQUN6QjJRLEVBR0N3SCxFQUFNblksR0FBU1UsRUFHcEJ3eEIsR0FBUyxRQUFTQSxHQUErQyxRQUFwQ3ZoQixFQUFNdWhCLEVBQU01eEIsSUFBSzZYLEVBQU1uWSxJQUNqRDJRLEVBR0R3SCxFQUFNblksSUFHZHdrQyxVQUFXLENBQ1ZqZixTQUFVLENBQ1RqbEIsSUFBSyxTQUFVNlgsR0FPZCxJQUFJbXlCLEVBQVc5eUIsRUFBT3BNLEtBQUs1RSxLQUFNMlIsRUFBTSxZQUV2QyxPQUFLbXlCLEVBQ0dwZ0MsU0FBVW9nQyxFQUFVLElBSTNCUCxHQUFXN2dDLEtBQU1pUCxFQUFLOEYsV0FDdEIrckIsR0FBVzlnQyxLQUFNaVAsRUFBSzhGLFdBQ3RCOUYsRUFBSzNQLEtBRUUsR0FHQSxLQUtYNmhDLFFBQVMsQ0FDUixJQUFPLFVBQ1AsTUFBUyxlQVlML3pCLEVBQVFnekIsY0FDYjl4QixFQUFPZ3RCLFVBQVUvZSxTQUFXLENBQzNCbmxCLElBQUssU0FBVTZYLEdBSWQsSUFBSXVNLEVBQVN2TSxFQUFLZCxXQUlsQixPQUhLcU4sR0FBVUEsRUFBT3JOLFlBQ3JCcU4sRUFBT3JOLFdBQVdxTyxjQUVaLE1BRVJ3TCxJQUFLLFNBQVUvWSxHQUlkLElBQUl1TSxFQUFTdk0sRUFBS2QsV0FDYnFOLElBQ0pBLEVBQU9nQixjQUVGaEIsRUFBT3JOLFlBQ1hxTixFQUFPck4sV0FBV3FPLGtCQU92QmxPLEVBQU9yVCxLQUFNLENBQ1osV0FDQSxXQUNBLFlBQ0EsY0FDQSxjQUNBLFVBQ0EsVUFDQSxTQUNBLGNBQ0Esb0JBQ0UsV0FDRnFULEVBQU82eUIsUUFBU3JuQyxLQUFLOEksZUFBa0I5SSxRQTRCeEN3VSxFQUFPQyxHQUFHM1MsT0FBUSxDQUNqQnlsQyxTQUFVLFNBQVU3cEMsR0FDbkIsSUFBSThwQyxFQUFTcnlCLEVBQU00SCxFQUFLMHFCLEVBQVVDLEVBQU8veEIsRUFBR2d5QixFQUMzQ2xyQyxFQUFJLEVBRUwsR0FBS3VGLEVBQVl0RSxHQUNoQixPQUFPc0MsS0FBS21CLE1BQU0sU0FBVXdVLEdBQzNCbkIsRUFBUXhVLE1BQU91bkMsU0FBVTdwQyxFQUFNZCxLQUFNb0QsS0FBTTJWLEVBQUd1eEIsR0FBVWxuQyxXQU0xRCxJQUZBd25DLEVBQVVMLEdBQWdCenBDLElBRWJxRCxPQUNaLEtBQVVvVSxFQUFPblYsS0FBTXZELE1BSXRCLEdBSEFnckMsRUFBV1AsR0FBVS94QixHQUNyQjRILEVBQXdCLElBQWxCNUgsRUFBSy9FLFVBQW9CLElBQU02MkIsR0FBa0JRLEdBQWEsSUFFekQsQ0FFVixJQURBOXhCLEVBQUksRUFDTSt4QixFQUFRRixFQUFTN3hCLE1BQ3JCb0gsRUFBSTNQLFFBQVMsSUFBTXM2QixFQUFRLEtBQVEsSUFDdkMzcUIsR0FBTzJxQixFQUFRLEtBTVpELEtBRExFLEVBQWFWLEdBQWtCbHFCLEtBRTlCNUgsRUFBS2pCLGFBQWMsUUFBU3l6QixHQU1oQyxPQUFPM25DLE1BR1JrTCxZQUFhLFNBQVV4TixHQUN0QixJQUFJOHBDLEVBQVNyeUIsRUFBTTRILEVBQUswcUIsRUFBVUMsRUFBTy94QixFQUFHZ3lCLEVBQzNDbHJDLEVBQUksRUFFTCxHQUFLdUYsRUFBWXRFLEdBQ2hCLE9BQU9zQyxLQUFLbUIsTUFBTSxTQUFVd1UsR0FDM0JuQixFQUFReFUsTUFBT2tMLFlBQWF4TixFQUFNZCxLQUFNb0QsS0FBTTJWLEVBQUd1eEIsR0FBVWxuQyxXQUk3RCxJQUFNSSxVQUFVVyxPQUNmLE9BQU9mLEtBQUt3RCxLQUFNLFFBQVMsSUFLNUIsSUFGQWdrQyxFQUFVTCxHQUFnQnpwQyxJQUVicUQsT0FDWixLQUFVb1UsRUFBT25WLEtBQU12RCxNQU10QixHQUxBZ3JDLEVBQVdQLEdBQVUveEIsR0FHckI0SCxFQUF3QixJQUFsQjVILEVBQUsvRSxVQUFvQixJQUFNNjJCLEdBQWtCUSxHQUFhLElBRXpELENBRVYsSUFEQTl4QixFQUFJLEVBQ00reEIsRUFBUUYsRUFBUzd4QixNQUcxQixLQUFRb0gsRUFBSTNQLFFBQVMsSUFBTXM2QixFQUFRLE1BQVMsR0FDM0MzcUIsRUFBTUEsRUFBSXRkLFFBQVMsSUFBTWlvQyxFQUFRLElBQUssS0FNbkNELEtBRExFLEVBQWFWLEdBQWtCbHFCLEtBRTlCNUgsRUFBS2pCLGFBQWMsUUFBU3l6QixHQU1oQyxPQUFPM25DLE1BR1I0bkMsWUFBYSxTQUFVbHFDLEVBQU9tcUMsR0FDN0IsSUFBSS85QixTQUFjcE0sRUFDakJvcUMsRUFBd0IsV0FBVGgrQixHQUFxQi9LLE1BQU1rRCxRQUFTdkUsR0FFcEQsTUFBeUIsa0JBQWJtcUMsR0FBMEJDLEVBQzlCRCxFQUFXN25DLEtBQUt1bkMsU0FBVTdwQyxHQUFVc0MsS0FBS2tMLFlBQWF4TixHQUd6RHNFLEVBQVl0RSxHQUNUc0MsS0FBS21CLE1BQU0sU0FBVTFFLEdBQzNCK1gsRUFBUXhVLE1BQU80bkMsWUFDZGxxQyxFQUFNZCxLQUFNb0QsS0FBTXZELEVBQUd5cUMsR0FBVWxuQyxNQUFRNm5DLEdBQ3ZDQSxNQUtJN25DLEtBQUttQixNQUFNLFdBQ2pCLElBQUk4YyxFQUFXeGhCLEVBQUd5cUIsRUFBTTZnQixFQUV4QixHQUFLRCxFQU9KLElBSkFyckMsRUFBSSxFQUNKeXFCLEVBQU8xUyxFQUFReFUsTUFDZituQyxFQUFhWixHQUFnQnpwQyxHQUVuQnVnQixFQUFZOHBCLEVBQVl0ckMsTUFHNUJ5cUIsRUFBSzhnQixTQUFVL3BCLEdBQ25CaUosRUFBS2hjLFlBQWErUyxHQUVsQmlKLEVBQUtxZ0IsU0FBVXRwQixhQUtJOUgsSUFBVnpZLEdBQWdDLFlBQVRvTSxLQUNsQ21VLEVBQVlpcEIsR0FBVWxuQyxRQUlyQnF1QixFQUFTSCxJQUFLbHVCLEtBQU0sZ0JBQWlCaWUsR0FPakNqZSxLQUFLa1UsY0FDVGxVLEtBQUtrVSxhQUFjLFFBQ2xCK0osSUFBdUIsSUFBVnZnQixFQUNiLEdBQ0Eyd0IsRUFBUy93QixJQUFLMEMsS0FBTSxrQkFBcUIsU0FPOUNnb0MsU0FBVSxTQUFVcG5DLEdBQ25CLElBQUlxZCxFQUFXOUksRUFDZDFZLEVBQUksRUFHTCxJQURBd2hCLEVBQVksSUFBTXJkLEVBQVcsSUFDbkJ1VSxFQUFPblYsS0FBTXZELE1BQ3RCLEdBQXVCLElBQWxCMFksRUFBSy9FLFdBQ1AsSUFBTTYyQixHQUFrQkMsR0FBVS94QixJQUFXLEtBQU0vSCxRQUFTNlEsSUFBZSxFQUM1RSxPQUFPLEVBSVYsT0FBTyxLQU9ULElBQUlncUIsR0FBVSxNQUVkenpCLEVBQU9DLEdBQUczUyxPQUFRLENBQ2pCcU0sSUFBSyxTQUFVelEsR0FDZCxJQUFJd3hCLEVBQU92aEIsRUFBSzhzQixFQUNmdGxCLEVBQU9uVixLQUFNLEdBRWQsT0FBTUksVUFBVVcsUUEwQmhCMDVCLEVBQWtCejRCLEVBQVl0RSxHQUV2QnNDLEtBQUttQixNQUFNLFNBQVUxRSxHQUMzQixJQUFJMFIsRUFFbUIsSUFBbEJuTyxLQUFLb1EsV0FXRSxPQU5YakMsRUFESXNzQixFQUNFLzhCLEVBQU1kLEtBQU1vRCxLQUFNdkQsRUFBRytYLEVBQVF4VSxNQUFPbU8sT0FFcEN6USxHQUtOeVEsRUFBTSxHQUVvQixpQkFBUkEsRUFDbEJBLEdBQU8sR0FFSXBQLE1BQU1rRCxRQUFTa00sS0FDMUJBLEVBQU1xRyxFQUFPVSxJQUFLL0csR0FBSyxTQUFVelEsR0FDaEMsT0FBZ0IsTUFBVEEsRUFBZ0IsR0FBS0EsRUFBUSxRQUl0Q3d4QixFQUFRMWEsRUFBTzB6QixTQUFVbG9DLEtBQUs4SixPQUFVMEssRUFBTzB6QixTQUFVbG9DLEtBQUtpYixTQUFTblMsaUJBR3JELFFBQVNvbUIsUUFBK0MvWSxJQUFwQytZLEVBQU1oQixJQUFLbHVCLEtBQU1tTyxFQUFLLFdBQzNEbk8sS0FBS3RDLE1BQVF5USxRQXpEVGdILEdBQ0orWixFQUFRMWEsRUFBTzB6QixTQUFVL3lCLEVBQUtyTCxPQUM3QjBLLEVBQU8wekIsU0FBVS95QixFQUFLOEYsU0FBU25TLGlCQUcvQixRQUFTb21CLFFBQ2dDL1ksS0FBdkN4SSxFQUFNdWhCLEVBQU01eEIsSUFBSzZYLEVBQU0sVUFFbEJ4SCxFQU1ZLGlCQUhwQkEsRUFBTXdILEVBQUt6WCxPQUlIaVEsRUFBSWxPLFFBQVN3b0MsR0FBUyxJQUloQixNQUFQdDZCLEVBQWMsR0FBS0EsT0FHM0IsS0F5Q0g2RyxFQUFPMVMsT0FBUSxDQUNkb21DLFNBQVUsQ0FDVHBXLE9BQVEsQ0FDUHgwQixJQUFLLFNBQVU2WCxHQUVkLElBQUloSCxFQUFNcUcsRUFBT3BNLEtBQUs1RSxLQUFNMlIsRUFBTSxTQUNsQyxPQUFjLE1BQVBoSCxFQUNOQSxFQU1BODRCLEdBQWtCenlCLEVBQU9QLEtBQU1rQixNQUdsQ3FDLE9BQVEsQ0FDUGxhLElBQUssU0FBVTZYLEdBQ2QsSUFBSXpYLEVBQU9vMEIsRUFBUXIxQixFQUNsQjBOLEVBQVVnTCxFQUFLaEwsUUFDZnlkLEVBQVF6UyxFQUFLdU4sY0FDYndSLEVBQW9CLGVBQWQvZSxFQUFLckwsS0FDWHFuQixFQUFTK0MsRUFBTSxLQUFPLEdBQ3RCc0wsRUFBTXRMLEVBQU10TSxFQUFRLEVBQUl6ZCxFQUFRcEosT0FVakMsSUFQQ3RFLEVBREltckIsRUFBUSxFQUNSNFgsRUFHQXRMLEVBQU10TSxFQUFRLEVBSVhuckIsRUFBSStpQyxFQUFLL2lDLElBS2hCLEtBSkFxMUIsRUFBUzNuQixFQUFTMU4sSUFJSmdtQixVQUFZaG1CLElBQU1tckIsS0FHN0JrSyxFQUFPOVcsWUFDTDhXLEVBQU96ZCxXQUFXMkcsV0FDbkJDLEVBQVU2VyxFQUFPemQsV0FBWSxhQUFpQixDQU1qRCxHQUhBM1csRUFBUThXLEVBQVFzZCxHQUFTM2pCLE1BR3BCK2xCLEVBQ0osT0FBT3gyQixFQUlSeXpCLEVBQU8xdkIsS0FBTS9ELEdBSWYsT0FBT3l6QixHQUdSakQsSUFBSyxTQUFVL1ksRUFBTXpYLEdBTXBCLElBTEEsSUFBSXlxQyxFQUFXclcsRUFDZDNuQixFQUFVZ0wsRUFBS2hMLFFBQ2ZnbkIsRUFBUzNjLEVBQU96UyxVQUFXckUsR0FDM0JqQixFQUFJME4sRUFBUXBKLE9BRUx0RSxPQUNQcTFCLEVBQVMzbkIsRUFBUzFOLElBSU5nbUIsU0FDWGpPLEVBQU9uSixRQUFTbUosRUFBTzB6QixTQUFTcFcsT0FBT3gwQixJQUFLdzBCLEdBQVVYLElBQVksS0FFbEVnWCxHQUFZLEdBVWQsT0FITUEsSUFDTGh6QixFQUFLdU4sZUFBaUIsR0FFaEJ5TyxPQU9YM2MsRUFBT3JULEtBQU0sQ0FBRSxRQUFTLGFBQWMsV0FDckNxVCxFQUFPMHpCLFNBQVVsb0MsTUFBUyxDQUN6Qmt1QixJQUFLLFNBQVUvWSxFQUFNelgsR0FDcEIsR0FBS3FCLE1BQU1rRCxRQUFTdkUsR0FDbkIsT0FBU3lYLEVBQUtxTixRQUFVaE8sRUFBT25KLFFBQVNtSixFQUFRVyxHQUFPaEgsTUFBT3pRLElBQVcsSUFJdEU0VixFQUFRK3lCLFVBQ2I3eEIsRUFBTzB6QixTQUFVbG9DLE1BQU8xQyxJQUFNLFNBQVU2WCxHQUN2QyxPQUF3QyxPQUFqQ0EsRUFBSy9HLGFBQWMsU0FBcUIsS0FBTytHLEVBQUt6WCxXQVc5RDRWLEVBQVE4MEIsUUFBVSxjQUFlN25DLEVBR2pDLElBQUk4bkMsR0FBYyxrQ0FDakJDLEdBQTBCLFNBQVU3akMsR0FDbkNBLEVBQUVpd0IsbUJBR0psZ0IsRUFBTzFTLE9BQVEwUyxFQUFPdFIsTUFBTyxDQUU1QjJCLFFBQVMsU0FBVTNCLEVBQU95RSxFQUFNd04sRUFBTW96QixHQUVyQyxJQUFJOXJDLEVBQUdzZ0IsRUFBSzBCLEVBQUsrcEIsRUFBWUMsRUFBUXBULEVBQVFuSyxFQUFTd2QsRUFDckRDLEVBQVksQ0FBRXh6QixHQUFRcFEsR0FDdEIrRSxFQUFPcUosRUFBT3ZXLEtBQU1zRyxFQUFPLFFBQVdBLEVBQU00RyxLQUFPNUcsRUFDbkRneUIsRUFBYS9oQixFQUFPdlcsS0FBTXNHLEVBQU8sYUFBZ0JBLEVBQU04RCxVQUFVZ0ksTUFBTyxLQUFRLEdBS2pGLEdBSEErTixFQUFNMnJCLEVBQWNqcUIsRUFBTXRKLEVBQU9BLEdBQVFwUSxFQUdsQixJQUFsQm9RLEVBQUsvRSxVQUFvQyxJQUFsQitFLEVBQUsvRSxXQUs1Qmk0QixHQUFZbmlDLEtBQU00RCxFQUFPMEssRUFBT3RSLE1BQU1veUIsYUFJdEN4ckIsRUFBS3NELFFBQVMsTUFBUyxJQUczQjhuQixFQUFhcHJCLEVBQUtrRixNQUFPLEtBQ3pCbEYsRUFBT29yQixFQUFXbDBCLFFBQ2xCazBCLEVBQVdyZixRQUVaNHlCLEVBQVMzK0IsRUFBS3NELFFBQVMsS0FBUSxHQUFLLEtBQU90RCxHQUczQzVHLEVBQVFBLEVBQU9zUixFQUFPNEIsU0FDckJsVCxFQUNBLElBQUlzUixFQUFPb2dCLE1BQU85cUIsRUFBdUIsaUJBQVY1RyxHQUFzQkEsSUFHaERzeEIsVUFBWStULEVBQWUsRUFBSSxFQUNyQ3JsQyxFQUFNOEQsVUFBWWt1QixFQUFXcHlCLEtBQU0sS0FDbkNJLEVBQU1xekIsV0FBYXJ6QixFQUFNOEQsVUFDeEIsSUFBSWtDLE9BQVEsVUFBWWdzQixFQUFXcHlCLEtBQU0saUJBQW9CLFdBQzdELEtBR0RJLEVBQU00ZCxZQUFTM0ssRUFDVGpULEVBQU1HLFNBQ1hILEVBQU1HLE9BQVM4UixHQUloQnhOLEVBQWUsTUFBUkEsRUFDTixDQUFFekUsR0FDRnNSLEVBQU96UyxVQUFXNEYsRUFBTSxDQUFFekUsSUFHM0Jnb0IsRUFBVTFXLEVBQU90UixNQUFNZ29CLFFBQVNwaEIsSUFBVSxHQUNwQ3krQixJQUFnQnJkLEVBQVFybUIsVUFBbUQsSUFBeENxbUIsRUFBUXJtQixRQUFRM0UsTUFBT2lWLEVBQU14TixJQUF0RSxDQU1BLElBQU00Z0MsSUFBaUJyZCxFQUFROEwsV0FBYXpqQixFQUFVNEIsR0FBUyxDQU05RCxJQUpBcXpCLEVBQWF0ZCxFQUFRdUosY0FBZ0IzcUIsRUFDL0J1K0IsR0FBWW5pQyxLQUFNc2lDLEVBQWExK0IsS0FDcENpVCxFQUFNQSxFQUFJMUksWUFFSDBJLEVBQUtBLEVBQU1BLEVBQUkxSSxXQUN0QnMwQixFQUFVbG5DLEtBQU1zYixHQUNoQjBCLEVBQU0xQixFQUlGMEIsS0FBVXRKLEVBQUt1RyxlQUFpQjNXLElBQ3BDNGpDLEVBQVVsbkMsS0FBTWdkLEVBQUlYLGFBQWVXLEVBQUltcUIsY0FBZ0Jyb0MsR0FNekQsSUFEQTlELEVBQUksR0FDTXNnQixFQUFNNHJCLEVBQVdsc0MsUUFBWXlHLEVBQU1rekIsd0JBQzVDc1MsRUFBYzNyQixFQUNkN1osRUFBTTRHLEtBQU9yTixFQUFJLEVBQ2hCK3JDLEVBQ0F0ZCxFQUFRc0ssVUFBWTFyQixHQUdyQnVyQixHQUNFaEgsRUFBUy93QixJQUFLeWYsRUFBSyxXQUFjNWYsT0FBT1ksT0FBUSxPQUM5Q21GLEVBQU00RyxPQUNUdWtCLEVBQVMvd0IsSUFBS3lmLEVBQUssWUFFbkJzWSxFQUFPbjFCLE1BQU82YyxFQUFLcFYsSUFJcEIwdEIsRUFBU29ULEdBQVUxckIsRUFBSzByQixLQUNUcFQsRUFBT24xQixPQUFTMnRCLEVBQVk5USxLQUMxQzdaLEVBQU00ZCxPQUFTdVUsRUFBT24xQixNQUFPNmMsRUFBS3BWLElBQ1osSUFBakJ6RSxFQUFNNGQsUUFDVjVkLEVBQU15QyxrQkE4Q1QsT0ExQ0F6QyxFQUFNNEcsS0FBT0EsRUFHUHkrQixHQUFpQnJsQyxFQUFNK0Isc0JBRXBCaW1CLEVBQVFrSCxXQUNxQyxJQUFwRGxILEVBQVFrSCxTQUFTbHlCLE1BQU95b0MsRUFBVS92QixNQUFPalIsS0FDekNrbUIsRUFBWTFZLElBSVBzekIsR0FBVXptQyxFQUFZbVQsRUFBTXJMLE1BQWF5SixFQUFVNEIsTUFHdkRzSixFQUFNdEosRUFBTXN6QixNQUdYdHpCLEVBQU1zekIsR0FBVyxNQUlsQmowQixFQUFPdFIsTUFBTW95QixVQUFZeHJCLEVBRXBCNUcsRUFBTWt6Qix3QkFDVnNTLEVBQVkzcUIsaUJBQWtCalUsRUFBTXcrQixJQUdyQ256QixFQUFNckwsS0FFRDVHLEVBQU1rekIsd0JBQ1ZzUyxFQUFZL2Isb0JBQXFCN2lCLEVBQU13K0IsSUFHeEM5ekIsRUFBT3RSLE1BQU1veUIsZUFBWW5mLEVBRXBCc0ksSUFDSnRKLEVBQU1zekIsR0FBV2hxQixJQU1kdmIsRUFBTTRkLFNBS2QrbkIsU0FBVSxTQUFVLytCLEVBQU1xTCxFQUFNalMsR0FDL0IsSUFBSXVCLEVBQUkrUCxFQUFPMVMsT0FDZCxJQUFJMFMsRUFBT29nQixNQUNYMXhCLEVBQ0EsQ0FDQzRHLEtBQU1BLEVBQ04wdEIsYUFBYSxJQUlmaGpCLEVBQU90UixNQUFNMkIsUUFBU0osRUFBRyxLQUFNMFEsTUFLakNYLEVBQU9DLEdBQUczUyxPQUFRLENBRWpCK0MsUUFBUyxTQUFVaUYsRUFBTW5DLEdBQ3hCLE9BQU8zSCxLQUFLbUIsTUFBTSxXQUNqQnFULEVBQU90UixNQUFNMkIsUUFBU2lGLEVBQU1uQyxFQUFNM0gsVUFHcEM4b0MsZUFBZ0IsU0FBVWgvQixFQUFNbkMsR0FDL0IsSUFBSXdOLEVBQU9uVixLQUFNLEdBQ2pCLEdBQUttVixFQUNKLE9BQU9YLEVBQU90UixNQUFNMkIsUUFBU2lGLEVBQU1uQyxFQUFNd04sR0FBTSxNQWM1QzdCLEVBQVE4MEIsU0FDYjV6QixFQUFPclQsS0FBTSxDQUFFKzNCLE1BQU8sVUFBV0MsS0FBTSxhQUFjLFNBQVVLLEVBQU12RCxHQUdwRSxJQUFJclosRUFBVSxTQUFVMVosR0FDdkJzUixFQUFPdFIsTUFBTTJsQyxTQUFVNVMsRUFBSy95QixFQUFNRyxPQUFRbVIsRUFBT3RSLE1BQU0reUIsSUFBSy95QixLQUc3RHNSLEVBQU90UixNQUFNZ29CLFFBQVMrSyxHQUFRLENBQzdCUCxNQUFPLFdBSU4sSUFBSTNoQixFQUFNL1QsS0FBSzBiLGVBQWlCMWIsS0FBSytFLFVBQVkvRSxLQUNoRCtvQyxFQUFXMWEsRUFBU3JCLE9BQVFqWixFQUFLa2lCLEdBRTVCOFMsR0FDTGgxQixFQUFJZ0ssaUJBQWtCeWIsRUFBTTVjLEdBQVMsR0FFdEN5UixFQUFTckIsT0FBUWpaLEVBQUtraUIsR0FBTzhTLEdBQVksR0FBTSxJQUVoRGxULFNBQVUsV0FDVCxJQUFJOWhCLEVBQU0vVCxLQUFLMGIsZUFBaUIxYixLQUFLK0UsVUFBWS9FLEtBQ2hEK29DLEVBQVcxYSxFQUFTckIsT0FBUWpaLEVBQUtraUIsR0FBUSxFQUVwQzhTLEVBS0wxYSxFQUFTckIsT0FBUWpaLEVBQUtraUIsRUFBSzhTLElBSjNCaDFCLEVBQUk0WSxvQkFBcUI2TSxFQUFNNWMsR0FBUyxHQUN4Q3lSLEVBQVM5ZCxPQUFRd0QsRUFBS2tpQixTQVMzQixJQUFJeHdCLEdBQVdsRixFQUFPa0YsU0FFbEJpTyxHQUFRLENBQUVxRCxLQUFNblYsS0FBS3VQLE9BRXJCNjNCLEdBQVMsS0FLYngwQixFQUFPeTBCLFNBQVcsU0FBVXRoQyxHQUMzQixJQUFJMFosRUFDSixJQUFNMVosR0FBd0IsaUJBQVRBLEVBQ3BCLE9BQU8sS0FLUixJQUNDMFosR0FBTSxJQUFNOWdCLEVBQU8yb0MsV0FBY0MsZ0JBQWlCeGhDLEVBQU0sWUFDdkQsTUFBUWxELEdBQ1Q0YyxPQUFNbEwsRUFNUCxPQUhNa0wsSUFBT0EsRUFBSXhGLHFCQUFzQixlQUFnQjlhLFFBQ3REeVQsRUFBT2xNLE1BQU8sZ0JBQWtCWCxHQUUxQjBaLEdBSVIsSUFDQytuQixHQUFXLFFBQ1hDLEdBQVEsU0FDUkMsR0FBa0Isd0NBQ2xCQyxHQUFlLHFDQUVoQixTQUFTQyxHQUFhcEksRUFBUWxpQyxFQUFLdXFDLEVBQWEzaEIsR0FDL0MsSUFBSTlxQixFQUVKLEdBQUsrQixNQUFNa0QsUUFBUy9DLEdBR25Cc1YsRUFBT3JULEtBQU1qQyxHQUFLLFNBQVV6QyxFQUFHOEYsR0FDekJrbkMsR0FBZUwsR0FBU2xqQyxLQUFNazdCLEdBR2xDdFosRUFBS3NaLEVBQVE3K0IsR0FLYmluQyxHQUNDcEksRUFBUyxLQUFxQixpQkFBTjcrQixHQUF1QixNQUFMQSxFQUFZOUYsRUFBSSxJQUFPLElBQ2pFOEYsRUFDQWtuQyxFQUNBM2hCLFdBS0csR0FBTTJoQixHQUFpQyxXQUFsQmwxQixFQUFRclYsR0FVbkM0b0IsRUFBS3NaLEVBQVFsaUMsUUFQYixJQUFNbEMsS0FBUWtDLEVBQ2JzcUMsR0FBYXBJLEVBQVMsSUFBTXBrQyxFQUFPLElBQUtrQyxFQUFLbEMsR0FBUXlzQyxFQUFhM2hCLEdBWXJFdFQsRUFBT3pJLE1BQVEsU0FBVTNHLEVBQUdxa0MsR0FDM0IsSUFBSXJJLEVBQ0g1aUMsRUFBSSxHQUNKc3BCLEVBQU0sU0FBVTlwQixFQUFLMHJDLEdBR3BCLElBQUloc0MsRUFBUXNFLEVBQVkwbkMsR0FDdkJBLElBQ0FBLEVBRURsckMsRUFBR0EsRUFBRXVDLFFBQVdwQixtQkFBb0IzQixHQUFRLElBQzNDMkIsbUJBQTZCLE1BQVRqQyxFQUFnQixHQUFLQSxJQUc1QyxHQUFVLE1BQUwwSCxFQUNKLE1BQU8sR0FJUixHQUFLckcsTUFBTWtELFFBQVNtRCxJQUFTQSxFQUFFb00sU0FBV2dELEVBQU8wQixjQUFlOVEsR0FHL0RvUCxFQUFPclQsS0FBTWlFLEdBQUcsV0FDZjBpQixFQUFLOW5CLEtBQUtoRCxLQUFNZ0QsS0FBS3RDLGVBT3RCLElBQU0wakMsS0FBVWg4QixFQUNmb2tDLEdBQWFwSSxFQUFRaDhCLEVBQUdnOEIsR0FBVXFJLEVBQWEzaEIsR0FLakQsT0FBT3RwQixFQUFFc0UsS0FBTSxNQUdoQjBSLEVBQU9DLEdBQUczUyxPQUFRLENBQ2pCNm5DLFVBQVcsV0FDVixPQUFPbjFCLEVBQU96SSxNQUFPL0wsS0FBS3lPLG1CQUUzQkEsZUFBZ0IsV0FDZixPQUFPek8sS0FBS2tWLEtBQUssV0FHaEIsSUFBSXdLLEVBQVdsTCxFQUFPMlosS0FBTW51QixLQUFNLFlBQ2xDLE9BQU8wZixFQUFXbEwsRUFBT3pTLFVBQVcyZCxHQUFhMWYsUUFFakRxZSxRQUFRLFdBQ1IsSUFBSXZVLEVBQU85SixLQUFLOEosS0FHaEIsT0FBTzlKLEtBQUtoRCxPQUFTd1gsRUFBUXhVLE1BQU8wbUIsR0FBSSxjQUN2QzZpQixHQUFhcmpDLEtBQU1sRyxLQUFLaWIsWUFBZXF1QixHQUFnQnBqQyxLQUFNNEQsS0FDM0Q5SixLQUFLd2lCLFVBQVkrTyxHQUFlcnJCLEtBQU00RCxPQUV6Q29MLEtBQUssU0FBVStCLEVBQUk5QixHQUNuQixJQUFJaEgsRUFBTXFHLEVBQVF4VSxNQUFPbU8sTUFFekIsT0FBWSxNQUFQQSxFQUNHLEtBR0hwUCxNQUFNa0QsUUFBU2tNLEdBQ1pxRyxFQUFPVSxJQUFLL0csR0FBSyxTQUFVQSxHQUNqQyxNQUFPLENBQUVuUixLQUFNbVksRUFBS25ZLEtBQU1VLE1BQU95USxFQUFJMU8sUUFBUzRwQyxHQUFPLFlBSWhELENBQUVyc0MsS0FBTW1ZLEVBQUtuWSxLQUFNVSxNQUFPeVEsRUFBSTFPLFFBQVM0cEMsR0FBTyxZQUNsRC9yQyxTQUtOLElBQ0Nzc0MsR0FBTSxPQUNOQyxHQUFRLE9BQ1JDLEdBQWEsZ0JBQ2JDLEdBQVcsNkJBSVhDLEdBQWEsaUJBQ2JDLEdBQVksUUFXWjFHLEdBQWEsR0FPYjJHLEdBQWEsR0FHYkMsR0FBVyxLQUFLaHFDLE9BQVEsS0FHeEJpcUMsR0FBZXJsQyxFQUFTUSxjQUFlLEtBSXhDLFNBQVM4a0MsR0FBNkJDLEdBR3JDLE9BQU8sU0FBVUMsRUFBb0JyZ0IsR0FFRCxpQkFBdkJxZ0IsSUFDWHJnQixFQUFPcWdCLEVBQ1BBLEVBQXFCLEtBR3RCLElBQUlyNkIsRUFDSHpULEVBQUksRUFDSit0QyxFQUFZRCxFQUFtQnpoQyxjQUFjNUUsTUFBT29rQixJQUFtQixHQUV4RSxHQUFLdG1CLEVBQVlrb0IsR0FHaEIsS0FBVWhhLEVBQVdzNkIsRUFBVy90QyxNQUdSLE1BQWxCeVQsRUFBVSxJQUNkQSxFQUFXQSxFQUFTbFIsTUFBTyxJQUFPLEtBQ2hDc3JDLEVBQVdwNkIsR0FBYW82QixFQUFXcDZCLElBQWMsSUFBS3ZPLFFBQVN1b0IsS0FJL0RvZ0IsRUFBV3A2QixHQUFhbzZCLEVBQVdwNkIsSUFBYyxJQUFLek8sS0FBTXlvQixJQVFuRSxTQUFTdWdCLEdBQStCSCxFQUFXbmdDLEVBQVMwNUIsRUFBaUI2RyxHQUU1RSxJQUFJQyxFQUFZLEdBQ2ZDLEVBQXFCTixJQUFjSixHQUVwQyxTQUFTVyxFQUFTMzZCLEdBQ2pCLElBQUl1UyxFQWNKLE9BYkFrb0IsRUFBV3o2QixJQUFhLEVBQ3hCc0UsRUFBT3JULEtBQU1tcEMsRUFBV3A2QixJQUFjLElBQUksU0FBVStZLEVBQUc2aEIsR0FDdEQsSUFBSUMsRUFBc0JELEVBQW9CM2dDLEVBQVMwNUIsRUFBaUI2RyxHQUN4RSxNQUFvQyxpQkFBeEJLLEdBQ1ZILEdBQXFCRCxFQUFXSSxHQUt0QkgsSUFDRG5vQixFQUFXc29CLFFBRGYsR0FITjVnQyxFQUFRcWdDLFVBQVU3b0MsUUFBU29wQyxHQUMzQkYsRUFBU0UsSUFDRixNQUtGdG9CLEVBR1IsT0FBT29vQixFQUFTMWdDLEVBQVFxZ0MsVUFBVyxNQUFVRyxFQUFXLE1BQVNFLEVBQVMsS0FNM0UsU0FBU0csR0FBWTNuQyxFQUFRb1EsR0FDNUIsSUFBSXpWLEVBQUtpWSxFQUNSZzFCLEVBQWN6MkIsRUFBTzAyQixhQUFhRCxhQUFlLEdBRWxELElBQU1qdEMsS0FBT3lWLE9BQ1EwQyxJQUFmMUMsRUFBS3pWLE1BQ1BpdEMsRUFBYWp0QyxHQUFRcUYsRUFBVzRTLElBQVVBLEVBQU8sS0FBVWpZLEdBQVF5VixFQUFLelYsSUFPNUUsT0FKS2lZLEdBQ0p6QixFQUFPMVMsUUFBUSxFQUFNdUIsRUFBUTRTLEdBR3ZCNVMsRUEvRVArbUMsR0FBYTVrQyxLQUFPQyxHQUFTRCxLQWdQOUJnUCxFQUFPMVMsT0FBUSxDQUdkcXBDLE9BQVEsRUFHUkMsYUFBYyxHQUNkQyxLQUFNLEdBRU5ILGFBQWMsQ0FDYmo3QixJQUFLeEssR0FBU0QsS0FDZHNFLEtBQU0sTUFDTndoQyxRQXZSZ0IsNERBdVJRcGxDLEtBQU1ULEdBQVM4bEMsVUFDdkM3NEIsUUFBUSxFQUNSODRCLGFBQWEsRUFDYkMsT0FBTyxFQUNQQyxZQUFhLG1EQWNiQyxRQUFTLENBQ1IsSUFBS3hCLEdBQ0xsMkIsS0FBTSxhQUNOekcsS0FBTSxZQUNONlQsSUFBSyw0QkFDTGhmLEtBQU0scUNBR1BnUCxTQUFVLENBQ1RnUSxJQUFLLFVBQ0w3VCxLQUFNLFNBQ05uTCxLQUFNLFlBR1B1cEMsZUFBZ0IsQ0FDZnZxQixJQUFLLGNBQ0xwTixLQUFNLGVBQ041UixLQUFNLGdCQUtQd3BDLFdBQVksQ0FHWCxTQUFVaHNDLE9BR1YsYUFBYSxFQUdiLFlBQWE2dUIsS0FBS0MsTUFHbEIsV0FBWW5hLEVBQU95MEIsVUFPcEJnQyxZQUFhLENBQ1poN0IsS0FBSyxFQUNMcEcsU0FBUyxJQU9YaWlDLFVBQVcsU0FBVXpvQyxFQUFRMG9DLEdBQzVCLE9BQU9BLEVBR05mLEdBQVlBLEdBQVkzbkMsRUFBUW1SLEVBQU8wMkIsY0FBZ0JhLEdBR3ZEZixHQUFZeDJCLEVBQU8wMkIsYUFBYzduQyxJQUduQzJvQyxjQUFlM0IsR0FBNkI5RyxJQUM1QzBJLGNBQWU1QixHQUE2QkgsSUFHNUNsNkIsS0FBTSxTQUFVQyxFQUFLOUYsR0FHQSxpQkFBUjhGLElBQ1g5RixFQUFVOEYsRUFDVkEsT0FBTWtHLEdBSVBoTSxFQUFVQSxHQUFXLEdBRXJCLElBQUkraEMsRUFHSEMsRUFHQUMsRUFDQUMsRUFHQUMsRUFHQUMsRUFHQTdmLEVBR0E4ZixFQUdBL3ZDLEVBR0Fnd0MsRUFHQWp1QyxFQUFJZ1csRUFBT3MzQixVQUFXLEdBQUkzaEMsR0FHMUJ1aUMsRUFBa0JsdUMsRUFBRXFMLFNBQVdyTCxFQUcvQm11QyxFQUFxQm51QyxFQUFFcUwsVUFDcEI2aUMsRUFBZ0J0OEIsVUFBWXM4QixFQUFnQmw3QixRQUM3Q2dELEVBQVFrNEIsR0FDUmw0QixFQUFPdFIsTUFHVG9uQixFQUFXOVYsRUFBT3lWLFdBQ2xCMmlCLEVBQW1CcDRCLEVBQU93VSxVQUFXLGVBR3JDNmpCLEVBQWFydUMsRUFBRXF1QyxZQUFjLEdBRzdCQyxFQUFpQixHQUNqQkMsRUFBc0IsR0FHdEJDLEVBQVcsV0FHWHRDLEVBQVEsQ0FDUDVkLFdBQVksRUFHWm1nQixrQkFBbUIsU0FBVWp2QyxHQUM1QixJQUFJa0csRUFDSixHQUFLd29CLEVBQVksQ0FDaEIsSUFBTTJmLEVBRUwsSUFEQUEsRUFBa0IsR0FDUm5vQyxFQUFRNmxDLEdBQVM5Z0MsS0FBTW1qQyxJQUNoQ0MsRUFBaUJub0MsRUFBTyxHQUFJNEUsY0FBZ0IsTUFDekN1akMsRUFBaUJub0MsRUFBTyxHQUFJNEUsY0FBZ0IsTUFBUyxJQUNyRDNJLE9BQVErRCxFQUFPLElBR3BCQSxFQUFRbW9DLEVBQWlCcnVDLEVBQUk4SyxjQUFnQixLQUU5QyxPQUFnQixNQUFUNUUsRUFBZ0IsS0FBT0EsRUFBTXBCLEtBQU0sT0FJM0NvcUMsc0JBQXVCLFdBQ3RCLE9BQU94Z0IsRUFBWTBmLEVBQXdCLE1BSTVDZSxpQkFBa0IsU0FBVW53QyxFQUFNVSxHQU1qQyxPQUxrQixNQUFiZ3ZCLElBQ0oxdkIsRUFBTyt2QyxFQUFxQi92QyxFQUFLOEwsZUFDaENpa0MsRUFBcUIvdkMsRUFBSzhMLGdCQUFtQjlMLEVBQzlDOHZDLEVBQWdCOXZDLEdBQVNVLEdBRW5Cc0MsTUFJUm90QyxpQkFBa0IsU0FBVXRqQyxHQUkzQixPQUhrQixNQUFiNGlCLElBQ0psdUIsRUFBRTZ1QyxTQUFXdmpDLEdBRVA5SixNQUlSNnNDLFdBQVksU0FBVTMzQixHQUNyQixJQUFJckIsRUFDSixHQUFLcUIsRUFDSixHQUFLd1gsRUFHSmdlLEVBQU1yZ0IsT0FBUW5WLEVBQUt3MUIsRUFBTTRDLGNBSXpCLElBQU16NUIsS0FBUXFCLEVBQ2IyM0IsRUFBWWg1QixHQUFTLENBQUVnNUIsRUFBWWg1QixHQUFRcUIsRUFBS3JCLElBSW5ELE9BQU83VCxNQUlSdXRDLE1BQU8sU0FBVUMsR0FDaEIsSUFBSUMsRUFBWUQsR0FBY1IsRUFLOUIsT0FKS2QsR0FDSkEsRUFBVXFCLE1BQU9FLEdBRWxCcjFCLEVBQU0sRUFBR3ExQixHQUNGenRDLE9Bb0JWLEdBZkFzcUIsRUFBU3hCLFFBQVM0aEIsR0FLbEJsc0MsRUFBRXlSLE1BQVVBLEdBQU96UixFQUFFeVIsS0FBT3hLLEdBQVNELE1BQVMsSUFDNUMvRixRQUFTd3FDLEdBQVd4a0MsR0FBUzhsQyxTQUFXLE1BRzFDL3NDLEVBQUVzTCxLQUFPSyxFQUFRUSxRQUFVUixFQUFRTCxNQUFRdEwsRUFBRW1NLFFBQVVuTSxFQUFFc0wsS0FHekR0TCxFQUFFZ3NDLFdBQWNoc0MsRUFBRTBSLFVBQVksS0FBTXBILGNBQWM1RSxNQUFPb2tCLElBQW1CLENBQUUsSUFHeEQsTUFBakI5cEIsRUFBRWt2QyxZQUFzQixDQUM1Qm5CLEVBQVl4bkMsRUFBU1EsY0FBZSxLQUtwQyxJQUNDZ25DLEVBQVUvbUMsS0FBT2hILEVBQUV5UixJQUluQnM4QixFQUFVL21DLEtBQU8rbUMsRUFBVS9tQyxLQUMzQmhILEVBQUVrdkMsWUFBY3RELEdBQWFtQixTQUFXLEtBQU9uQixHQUFhdUQsTUFDM0RwQixFQUFVaEIsU0FBVyxLQUFPZ0IsRUFBVW9CLEtBQ3RDLE1BQVFscEMsR0FJVGpHLEVBQUVrdkMsYUFBYyxHQWFsQixHQVJLbHZDLEVBQUVtSixNQUFRbkosRUFBRWd0QyxhQUFpQyxpQkFBWGh0QyxFQUFFbUosT0FDeENuSixFQUFFbUosS0FBTzZNLEVBQU96SSxNQUFPdk4sRUFBRW1KLEtBQU1uSixFQUFFaXJDLGNBSWxDZ0IsR0FBK0JsSCxHQUFZL2tDLEVBQUcyTCxFQUFTdWdDLEdBR2xEaGUsRUFDSixPQUFPZ2UsRUE4RVIsSUFBTWp1QyxLQXpFTit2QyxFQUFjaDRCLEVBQU90UixPQUFTMUUsRUFBRWtVLFNBR1EsR0FBcEI4QixFQUFPMjJCLFVBQzFCMzJCLEVBQU90UixNQUFNMkIsUUFBUyxhQUl2QnJHLEVBQUVzTCxLQUFPdEwsRUFBRXNMLEtBQUs2akIsY0FHaEJudkIsRUFBRW92QyxZQUFjNUQsR0FBVzlqQyxLQUFNMUgsRUFBRXNMLE1BS25DcWlDLEVBQVczdEMsRUFBRXlSLElBQUl4USxRQUFTb3FDLEdBQU8sSUFHM0JyckMsRUFBRW92QyxXQXdCSXB2QyxFQUFFbUosTUFBUW5KLEVBQUVndEMsYUFDb0QsS0FBekVodEMsRUFBRWt0QyxhQUFlLElBQUt0K0IsUUFBUyx1Q0FDakM1TyxFQUFFbUosS0FBT25KLEVBQUVtSixLQUFLbEksUUFBU21xQyxHQUFLLE9BdkI5QjZDLEVBQVdqdUMsRUFBRXlSLElBQUlqUixNQUFPbXRDLEVBQVNwckMsUUFHNUJ2QyxFQUFFbUosT0FBVW5KLEVBQUVndEMsYUFBaUMsaUJBQVhodEMsRUFBRW1KLFFBQzFDd2tDLElBQWNuRCxHQUFPOWlDLEtBQU1pbUMsR0FBYSxJQUFNLEtBQVEzdEMsRUFBRW1KLFlBR2pEbkosRUFBRW1KLE9BSU8sSUFBWm5KLEVBQUVxUixRQUNOczhCLEVBQVdBLEVBQVMxc0MsUUFBU3FxQyxHQUFZLE1BQ3pDMkMsR0FBYXpELEdBQU85aUMsS0FBTWltQyxHQUFhLElBQU0sS0FBUSxLQUFTejRCLEdBQU1xRCxPQUNuRTAxQixHQUlGanVDLEVBQUV5UixJQUFNazhCLEVBQVdNLEdBU2ZqdUMsRUFBRXF2QyxhQUNEcjVCLEVBQU80MkIsYUFBY2UsSUFDekJ6QixFQUFNeUMsaUJBQWtCLG9CQUFxQjM0QixFQUFPNDJCLGFBQWNlLElBRTlEMzNCLEVBQU82MkIsS0FBTWMsSUFDakJ6QixFQUFNeUMsaUJBQWtCLGdCQUFpQjM0QixFQUFPNjJCLEtBQU1jLE1BS25EM3RDLEVBQUVtSixNQUFRbkosRUFBRW92QyxhQUFnQyxJQUFsQnB2QyxFQUFFa3RDLGFBQXlCdmhDLEVBQVF1aEMsY0FDakVoQixFQUFNeUMsaUJBQWtCLGVBQWdCM3VDLEVBQUVrdEMsYUFJM0NoQixFQUFNeUMsaUJBQ0wsU0FDQTN1QyxFQUFFZ3NDLFVBQVcsSUFBT2hzQyxFQUFFbXRDLFFBQVNudEMsRUFBRWdzQyxVQUFXLElBQzNDaHNDLEVBQUVtdEMsUUFBU250QyxFQUFFZ3NDLFVBQVcsS0FDQSxNQUFyQmhzQyxFQUFFZ3NDLFVBQVcsR0FBYyxLQUFPTCxHQUFXLFdBQWEsSUFDN0QzckMsRUFBRW10QyxRQUFTLE1BSUZudEMsRUFBRXN2QyxRQUNacEQsRUFBTXlDLGlCQUFrQjF3QyxFQUFHK0IsRUFBRXN2QyxRQUFTcnhDLElBSXZDLEdBQUsrQixFQUFFdXZDLGNBQytDLElBQW5EdnZDLEVBQUV1dkMsV0FBV254QyxLQUFNOHZDLEVBQWlCaEMsRUFBT2xzQyxJQUFpQmt1QixHQUc5RCxPQUFPZ2UsRUFBTTZDLFFBZWQsR0FYQVAsRUFBVyxRQUdYSixFQUFpQjlrQixJQUFLdHBCLEVBQUV3bEMsVUFDeEIwRyxFQUFNdHlCLEtBQU01WixFQUFFMlIsU0FDZHU2QixFQUFNM2hCLEtBQU12cUIsRUFBRThKLE9BR2Q0akMsRUFBWXpCLEdBQStCUCxHQUFZMXJDLEVBQUcyTCxFQUFTdWdDLEdBSzVELENBU04sR0FSQUEsRUFBTTVkLFdBQWEsRUFHZDBmLEdBQ0pHLEVBQW1COW5DLFFBQVMsV0FBWSxDQUFFNmxDLEVBQU9sc0MsSUFJN0NrdUIsRUFDSixPQUFPZ2UsRUFJSGxzQyxFQUFFaXRDLE9BQVNqdEMsRUFBRTJuQyxRQUFVLElBQzNCbUcsRUFBZS9yQyxFQUFPa0csWUFBWSxXQUNqQ2lrQyxFQUFNNkMsTUFBTyxhQUNYL3VDLEVBQUUybkMsVUFHTixJQUNDelosR0FBWSxFQUNad2YsRUFBVXA3QixLQUFNZzhCLEVBQWdCMTBCLEdBQy9CLE1BQVEzVCxHQUdULEdBQUtpb0IsRUFDSixNQUFNam9CLEVBSVAyVCxHQUFPLEVBQUczVCxTQWhDWDJULEdBQU8sRUFBRyxnQkFxQ1gsU0FBU0EsRUFBTWsxQixFQUFRVSxFQUFrQkMsRUFBV0gsR0FDbkQsSUFBSUksRUFBVy85QixFQUFTN0gsRUFBTzBJLEVBQVVtOUIsRUFDeENYLEVBQWFRLEVBR1R0aEIsSUFJTEEsR0FBWSxFQUdQNGYsR0FDSi9yQyxFQUFPNmxDLGFBQWNrRyxHQUt0QkosT0FBWS8xQixFQUdaaTJCLEVBQXdCMEIsR0FBVyxHQUduQ3BELEVBQU01ZCxXQUFhd2dCLEVBQVMsRUFBSSxFQUFJLEVBR3BDWSxFQUFZWixHQUFVLEtBQU9BLEVBQVMsS0FBa0IsTUFBWEEsRUFHeENXLElBQ0pqOUIsRUE3bEJKLFNBQThCeFMsRUFBR2tzQyxFQUFPdUQsR0FPdkMsSUFMQSxJQUFJRyxFQUFJdGtDLEVBQU11a0MsRUFBZUMsRUFDNUJqOUIsRUFBVzdTLEVBQUU2UyxTQUNibTVCLEVBQVloc0MsRUFBRWdzQyxVQUdZLE1BQW5CQSxFQUFXLElBQ2xCQSxFQUFVeHBDLGFBQ0VtVixJQUFQaTRCLElBQ0pBLEVBQUs1dkMsRUFBRTZ1QyxVQUFZM0MsRUFBTXVDLGtCQUFtQixpQkFLOUMsR0FBS21CLEVBQ0osSUFBTXRrQyxLQUFRdUgsRUFDYixHQUFLQSxFQUFVdkgsSUFBVXVILEVBQVV2SCxHQUFPNUQsS0FBTWtvQyxHQUFPLENBQ3RENUQsRUFBVTdvQyxRQUFTbUksR0FDbkIsTUFNSCxHQUFLMGdDLEVBQVcsS0FBT3lELEVBQ3RCSSxFQUFnQjdELEVBQVcsT0FDckIsQ0FHTixJQUFNMWdDLEtBQVFta0MsRUFBWSxDQUN6QixJQUFNekQsRUFBVyxJQUFPaHNDLEVBQUVxdEMsV0FBWS9oQyxFQUFPLElBQU0wZ0MsRUFBVyxJQUFRLENBQ3JFNkQsRUFBZ0J2a0MsRUFDaEIsTUFFS3drQyxJQUNMQSxFQUFnQnhrQyxHQUtsQnVrQyxFQUFnQkEsR0FBaUJDLEVBTWxDLEdBQUtELEVBSUosT0FIS0EsSUFBa0I3RCxFQUFXLElBQ2pDQSxFQUFVN29DLFFBQVMwc0MsR0FFYkosRUFBV0ksR0EwaUJMRSxDQUFxQi92QyxFQUFHa3NDLEVBQU91RCxLQUlyQ0MsR0FBYTE1QixFQUFPbkosUUFBUyxTQUFVN00sRUFBRWdzQyxZQUFlLElBQzdEaHNDLEVBQUVxdEMsV0FBWSxlQUFrQixjQUlqQzc2QixFQTVpQkgsU0FBc0J4UyxFQUFHd1MsRUFBVTA1QixFQUFPd0QsR0FDekMsSUFBSU0sRUFBT0MsRUFBU0MsRUFBTWp3QixFQUFLNU0sRUFDOUJnNkIsRUFBYSxHQUdickIsRUFBWWhzQyxFQUFFZ3NDLFVBQVV4ckMsUUFHekIsR0FBS3dyQyxFQUFXLEdBQ2YsSUFBTWtFLEtBQVFsd0MsRUFBRXF0QyxXQUNmQSxFQUFZNkMsRUFBSzVsQyxlQUFrQnRLLEVBQUVxdEMsV0FBWTZDLEdBT25ELElBSEFELEVBQVVqRSxFQUFVeHBDLFFBR1p5dEMsR0FjUCxHQVpLandDLEVBQUVvdEMsZUFBZ0I2QyxLQUN0Qi9ELEVBQU9sc0MsRUFBRW90QyxlQUFnQjZDLElBQWN6OUIsSUFJbENhLEdBQVFxOEIsR0FBYTF2QyxFQUFFbXdDLGFBQzVCMzlCLEVBQVd4UyxFQUFFbXdDLFdBQVkzOUIsRUFBVXhTLEVBQUUwUixXQUd0QzJCLEVBQU80OEIsRUFDUEEsRUFBVWpFLEVBQVV4cEMsUUFLbkIsR0FBaUIsTUFBWnl0QyxFQUVKQSxFQUFVNThCLE9BR0osR0FBYyxNQUFUQSxHQUFnQkEsSUFBUzQ4QixFQUFVLENBTTlDLEtBSEFDLEVBQU83QyxFQUFZaDZCLEVBQU8sSUFBTTQ4QixJQUFhNUMsRUFBWSxLQUFPNEMsSUFJL0QsSUFBTUQsS0FBUzNDLEVBSWQsSUFEQXB0QixFQUFNK3ZCLEVBQU14L0IsTUFBTyxNQUNULEtBQVF5L0IsSUFHakJDLEVBQU83QyxFQUFZaDZCLEVBQU8sSUFBTTRNLEVBQUssS0FDcENvdEIsRUFBWSxLQUFPcHRCLEVBQUssS0FDYixFQUdHLElBQVRpd0IsRUFDSkEsRUFBTzdDLEVBQVkyQyxJQUdnQixJQUF4QjNDLEVBQVkyQyxLQUN2QkMsRUFBVWh3QixFQUFLLEdBQ2YrckIsRUFBVTdvQyxRQUFTOGMsRUFBSyxLQUV6QixNQU9KLElBQWMsSUFBVGl3QixFQUdKLEdBQUtBLEdBQVFsd0MsRUFBRW93QyxPQUNkNTlCLEVBQVcwOUIsRUFBTTE5QixRQUVqQixJQUNDQSxFQUFXMDlCLEVBQU0xOUIsR0FDaEIsTUFBUXZNLEdBQ1QsTUFBTyxDQUNOMmxCLE1BQU8sY0FDUDloQixNQUFPb21DLEVBQU9qcUMsRUFBSSxzQkFBd0JvTixFQUFPLE9BQVM0OEIsSUFTakUsTUFBTyxDQUFFcmtCLE1BQU8sVUFBV3ppQixLQUFNcUosR0ErY3BCNjlCLENBQWFyd0MsRUFBR3dTLEVBQVUwNUIsRUFBT3dELEdBR3ZDQSxHQUdDMXZDLEVBQUVxdkMsY0FDTk0sRUFBV3pELEVBQU11QyxrQkFBbUIsb0JBRW5DejRCLEVBQU80MkIsYUFBY2UsR0FBYWdDLElBRW5DQSxFQUFXekQsRUFBTXVDLGtCQUFtQixXQUVuQ3o0QixFQUFPNjJCLEtBQU1jLEdBQWFnQyxJQUtaLE1BQVhiLEdBQTZCLFNBQVg5dUMsRUFBRXNMLEtBQ3hCMGpDLEVBQWEsWUFHUyxNQUFYRixFQUNYRSxFQUFhLGVBSWJBLEVBQWF4OEIsRUFBU29aLE1BQ3RCamEsRUFBVWEsRUFBU3JKLEtBRW5CdW1DLElBREE1bEMsRUFBUTBJLEVBQVMxSSxVQU1sQkEsRUFBUWtsQyxHQUNIRixHQUFXRSxJQUNmQSxFQUFhLFFBQ1JGLEVBQVMsSUFDYkEsRUFBUyxLQU1aNUMsRUFBTTRDLE9BQVNBLEVBQ2Y1QyxFQUFNOEMsWUFBZVEsR0FBb0JSLEdBQWUsR0FHbkRVLEVBQ0o1akIsRUFBU2lCLFlBQWFtaEIsRUFBaUIsQ0FBRXY4QixFQUFTcTlCLEVBQVk5QyxJQUU5RHBnQixFQUFTcUIsV0FBWStnQixFQUFpQixDQUFFaEMsRUFBTzhDLEVBQVlsbEMsSUFJNURvaUMsRUFBTW1DLFdBQVlBLEdBQ2xCQSxPQUFhMTJCLEVBRVJxMkIsR0FDSkcsRUFBbUI5bkMsUUFBU3FwQyxFQUFZLGNBQWdCLFlBQ3ZELENBQUV4RCxFQUFPbHNDLEVBQUcwdkMsRUFBWS85QixFQUFVN0gsSUFJcENza0MsRUFBaUI1aUIsU0FBVTBpQixFQUFpQixDQUFFaEMsRUFBTzhDLElBRWhEaEIsSUFDSkcsRUFBbUI5bkMsUUFBUyxlQUFnQixDQUFFNmxDLEVBQU9sc0MsTUFHM0NnVyxFQUFPMjJCLFFBQ2hCMzJCLEVBQU90UixNQUFNMkIsUUFBUyxjQUt6QixPQUFPNmxDLEdBR1JvRSxRQUFTLFNBQVU3K0IsRUFBS3RJLEVBQU1rQixHQUM3QixPQUFPMkwsRUFBT2xYLElBQUsyUyxFQUFLdEksRUFBTWtCLEVBQVUsU0FHekNrbUMsVUFBVyxTQUFVOStCLEVBQUtwSCxHQUN6QixPQUFPMkwsRUFBT2xYLElBQUsyUyxPQUFLa0csRUFBV3ROLEVBQVUsYUFJL0MyTCxFQUFPclQsS0FBTSxDQUFFLE1BQU8sU0FBVSxTQUFVOFYsRUFBSXRNLEdBQzdDNkosRUFBUTdKLEdBQVcsU0FBVXNGLEVBQUt0SSxFQUFNa0IsRUFBVWlCLEdBVWpELE9BUEs5SCxFQUFZMkYsS0FDaEJtQyxFQUFPQSxHQUFRakIsRUFDZkEsRUFBV2xCLEVBQ1hBLE9BQU93TyxHQUlEM0IsRUFBT3hFLEtBQU13RSxFQUFPMVMsT0FBUSxDQUNsQ21PLElBQUtBLEVBQ0xuRyxLQUFNYSxFQUNOdUYsU0FBVXBHLEVBQ1ZuQyxLQUFNQSxFQUNOd0ksUUFBU3RILEdBQ1AyTCxFQUFPMEIsY0FBZWpHLElBQVNBLFFBSXBDdUUsRUFBT3czQixlQUFlLFNBQVV4dEMsR0FDL0IsSUFBSS9CLEVBQ0osSUFBTUEsS0FBSytCLEVBQUVzdkMsUUFDYSxpQkFBcEJyeEMsRUFBRXFNLGdCQUNOdEssRUFBRWt0QyxZQUFjbHRDLEVBQUVzdkMsUUFBU3J4QyxJQUFPLE9BTXJDK1gsRUFBT2ttQixTQUFXLFNBQVV6cUIsRUFBSzlGLEVBQVM0SixHQUN6QyxPQUFPUyxFQUFPeEUsS0FBTSxDQUNuQkMsSUFBS0EsRUFHTG5HLEtBQU0sTUFDTm9HLFNBQVUsU0FDVkwsT0FBTyxFQUNQNDdCLE9BQU8sRUFDUC80QixRQUFRLEVBS1JtNUIsV0FBWSxDQUNYLGNBQWUsY0FFaEI4QyxXQUFZLFNBQVUzOUIsR0FDckJ3RCxFQUFPa0MsV0FBWTFGLEVBQVU3RyxFQUFTNEosT0FNekNTLEVBQU9DLEdBQUczUyxPQUFRLENBQ2pCa3RDLFFBQVMsU0FBVXhoQyxHQUNsQixJQUFJMGxCLEVBeUJKLE9BdkJLbHpCLEtBQU0sS0FDTGdDLEVBQVl3TCxLQUNoQkEsRUFBT0EsRUFBSzVRLEtBQU1vRCxLQUFNLEtBSXpCa3pCLEVBQU8xZSxFQUFRaEgsRUFBTXhOLEtBQU0sR0FBSTBiLGVBQWdCckcsR0FBSSxHQUFJL0UsT0FBTyxHQUV6RHRRLEtBQU0sR0FBSXFVLFlBQ2Q2ZSxFQUFLaUksYUFBY243QixLQUFNLElBRzFCa3pCLEVBQUtoZSxLQUFLLFdBR1QsSUFGQSxJQUFJQyxFQUFPblYsS0FFSG1WLEVBQUs4NUIsbUJBQ1o5NUIsRUFBT0EsRUFBSzg1QixrQkFHYixPQUFPOTVCLEtBQ0puRCxPQUFRaFMsT0FHTkEsTUFHUmt2QyxVQUFXLFNBQVUxaEMsR0FDcEIsT0FBS3hMLEVBQVl3TCxHQUNUeE4sS0FBS21CLE1BQU0sU0FBVTFFLEdBQzNCK1gsRUFBUXhVLE1BQU9rdkMsVUFBVzFoQyxFQUFLNVEsS0FBTW9ELEtBQU12RCxPQUl0Q3VELEtBQUttQixNQUFNLFdBQ2pCLElBQUkrbEIsRUFBTzFTLEVBQVF4VSxNQUNsQnFSLEVBQVc2VixFQUFLN1YsV0FFWkEsRUFBU3RRLE9BQ2JzUSxFQUFTMjlCLFFBQVN4aEMsR0FHbEIwWixFQUFLbFYsT0FBUXhFLE9BS2hCMGxCLEtBQU0sU0FBVTFsQixHQUNmLElBQUkyaEMsRUFBaUJudEMsRUFBWXdMLEdBRWpDLE9BQU94TixLQUFLbUIsTUFBTSxTQUFVMUUsR0FDM0IrWCxFQUFReFUsTUFBT2d2QyxRQUFTRyxFQUFpQjNoQyxFQUFLNVEsS0FBTW9ELEtBQU12RCxHQUFNK1EsT0FJbEU0aEMsT0FBUSxTQUFVeHVDLEdBSWpCLE9BSEFaLEtBQUswaEIsT0FBUTlnQixHQUFXcW1CLElBQUssUUFBUzlsQixNQUFNLFdBQzNDcVQsRUFBUXhVLE1BQU9vN0IsWUFBYXA3QixLQUFLbWIsZUFFM0JuYixRQUtUd1UsRUFBT2lMLEtBQUt0RyxRQUFRdXBCLE9BQVMsU0FBVXZ0QixHQUN0QyxPQUFRWCxFQUFPaUwsS0FBS3RHLFFBQVFrMkIsUUFBU2w2QixJQUV0Q1gsRUFBT2lMLEtBQUt0RyxRQUFRazJCLFFBQVUsU0FBVWw2QixHQUN2QyxTQUFXQSxFQUFLb29CLGFBQWVwb0IsRUFBS202QixjQUFnQm42QixFQUFLa3JCLGlCQUFpQnQvQixTQU0zRXlULEVBQU8wMkIsYUFBYXFFLElBQU0sV0FDekIsSUFDQyxPQUFPLElBQUlodkMsRUFBT2l2QyxlQUNqQixNQUFRL3FDLE1BR1gsSUFBSWdyQyxHQUFtQixDQUdyQkMsRUFBRyxJQUlIQyxLQUFNLEtBRVBDLEdBQWVwN0IsRUFBTzAyQixhQUFhcUUsTUFFcENqOEIsRUFBUXU4QixPQUFTRCxJQUFrQixvQkFBcUJBLEdBQ3hEdDhCLEVBQVF0RCxLQUFPNC9CLEtBQWlCQSxHQUVoQ3A3QixFQUFPeTNCLGVBQWUsU0FBVTloQyxHQUMvQixJQUFJdEIsRUFBVWluQyxFQUdkLEdBQUt4OEIsRUFBUXU4QixNQUFRRCxLQUFpQnpsQyxFQUFRdWpDLFlBQzdDLE1BQU8sQ0FDTjU4QixLQUFNLFNBQVVnOUIsRUFBUzlKLEdBQ3hCLElBQUl2bkMsRUFDSDh5QyxFQUFNcGxDLEVBQVFvbEMsTUFXZixHQVRBQSxFQUFJUSxLQUNINWxDLEVBQVFMLEtBQ1JLLEVBQVE4RixJQUNSOUYsRUFBUXNoQyxNQUNSdGhDLEVBQVE2bEMsU0FDUjdsQyxFQUFRNFksVUFJSjVZLEVBQVE4bEMsVUFDWixJQUFNeHpDLEtBQUswTixFQUFROGxDLFVBQ2xCVixFQUFLOXlDLEdBQU0wTixFQUFROGxDLFVBQVd4ekMsR0FtQmhDLElBQU1BLEtBZEQwTixFQUFRa2pDLFVBQVlrQyxFQUFJbkMsa0JBQzVCbUMsRUFBSW5DLGlCQUFrQmpqQyxFQUFRa2pDLFVBUXpCbGpDLEVBQVF1akMsYUFBZ0JJLEVBQVMsc0JBQ3RDQSxFQUFTLG9CQUF1QixrQkFJdEJBLEVBQ1Z5QixFQUFJcEMsaUJBQWtCMXdDLEVBQUdxeEMsRUFBU3J4QyxJQUluQ29NLEVBQVcsU0FBVWlCLEdBQ3BCLE9BQU8sV0FDRGpCLElBQ0pBLEVBQVdpbkMsRUFBZ0JQLEVBQUlXLE9BQzlCWCxFQUFJWSxRQUFVWixFQUFJYSxRQUFVYixFQUFJYyxVQUMvQmQsRUFBSWUsbUJBQXFCLEtBRWIsVUFBVHhtQyxFQUNKeWxDLEVBQUloQyxRQUNnQixVQUFUempDLEVBS2dCLGlCQUFmeWxDLEVBQUlqQyxPQUNmdEosRUFBVSxFQUFHLFNBRWJBLEVBR0N1TCxFQUFJakMsT0FDSmlDLEVBQUkvQixZQUlOeEosRUFDQ3lMLEdBQWtCRixFQUFJakMsU0FBWWlDLEVBQUlqQyxPQUN0Q2lDLEVBQUkvQixXQUsrQixVQUFqQytCLEVBQUlnQixjQUFnQixTQUNNLGlCQUFyQmhCLEVBQUlpQixhQUNWLENBQUVDLE9BQVFsQixFQUFJditCLFVBQ2QsQ0FBRWlELEtBQU1zN0IsRUFBSWlCLGNBQ2JqQixFQUFJckMsNEJBUVRxQyxFQUFJVyxPQUFTcm5DLElBQ2JpbkMsRUFBZ0JQLEVBQUlZLFFBQVVaLEVBQUljLFVBQVl4bkMsRUFBVSxjQUtuQ3NOLElBQWhCbzVCLEVBQUlhLFFBQ1JiLEVBQUlhLFFBQVVOLEVBRWRQLEVBQUllLG1CQUFxQixXQUdBLElBQW5CZixFQUFJemlCLFlBTVJ2c0IsRUFBT2tHLFlBQVksV0FDYm9DLEdBQ0ppbkMsUUFRTGpuQyxFQUFXQSxFQUFVLFNBRXJCLElBR0MwbUMsRUFBSXorQixLQUFNM0csRUFBUXlqQyxZQUFjempDLEVBQVF4QyxNQUFRLE1BQy9DLE1BQVFsRCxHQUdULEdBQUtvRSxFQUNKLE1BQU1wRSxJQUtUOG9DLE1BQU8sV0FDRDFrQyxHQUNKQSxTQVdMMkwsRUFBT3czQixlQUFlLFNBQVV4dEMsR0FDMUJBLEVBQUVrdkMsY0FDTmx2QyxFQUFFNlMsU0FBUzJDLFFBQVMsTUFLdEJRLEVBQU9zM0IsVUFBVyxDQUNqQkgsUUFBUyxDQUNSMzNCLE9BQVEsNkZBR1QzQyxTQUFVLENBQ1QyQyxPQUFRLDJCQUVUNjNCLFdBQVksQ0FDWCxjQUFlLFNBQVU1M0IsR0FFeEIsT0FEQU8sRUFBT2tDLFdBQVl6QyxHQUNaQSxNQU1WTyxFQUFPdzNCLGNBQWUsVUFBVSxTQUFVeHRDLFFBQ3hCMlgsSUFBWjNYLEVBQUVxUixRQUNOclIsRUFBRXFSLE9BQVEsR0FFTnJSLEVBQUVrdkMsY0FDTmx2QyxFQUFFc0wsS0FBTyxVQUtYMEssRUFBT3kzQixjQUFlLFVBQVUsU0FBVXp0QyxHQUl4QyxJQUFJd1YsRUFBUW5MLEVBRGIsR0FBS3JLLEVBQUVrdkMsYUFBZWx2QyxFQUFFa3lDLFlBRXZCLE1BQU8sQ0FDTjUvQixLQUFNLFNBQVVtWSxFQUFHK2EsR0FDbEJod0IsRUFBU1EsRUFBUSxZQUNmaFIsS0FBTWhGLEVBQUVreUMsYUFBZSxJQUN2QnZpQixLQUFNLENBQUV3aUIsUUFBU255QyxFQUFFb3lDLGNBQWVuOUIsSUFBS2pWLEVBQUV5UixNQUN6QytqQixHQUFJLGFBQWNuckIsRUFBVyxTQUFVZ29DLEdBQ3ZDNzhCLEVBQU96RCxTQUNQMUgsRUFBVyxLQUNOZ29DLEdBQ0o3TSxFQUF1QixVQUFiNk0sRUFBSS9tQyxLQUFtQixJQUFNLElBQUsrbUMsRUFBSS9tQyxRQUtuRC9FLEVBQVNvUCxLQUFLQyxZQUFhSixFQUFRLEtBRXBDdTVCLE1BQU8sV0FDRDFrQyxHQUNKQSxTQVVMLElBcUdLbW9CLEdBckdEOGYsR0FBZSxHQUNsQkMsR0FBUyxvQkFHVnY4QixFQUFPczNCLFVBQVcsQ0FDakJrRixNQUFPLFdBQ1BDLGNBQWUsV0FDZCxJQUFJcG9DLEVBQVdpb0MsR0FBYWw0QixPQUFXcEUsRUFBTzRCLFFBQVUsSUFBUTFDLEdBQU1xRCxPQUV0RSxPQURBL1csS0FBTTZJLElBQWEsRUFDWkEsS0FLVDJMLEVBQU93M0IsY0FBZSxjQUFjLFNBQVV4dEMsRUFBRzB5QyxFQUFrQnhHLEdBRWxFLElBQUl5RyxFQUFjQyxFQUFhQyxFQUM5QkMsR0FBdUIsSUFBWjl5QyxFQUFFd3lDLFFBQXFCRCxHQUFPN3FDLEtBQU0xSCxFQUFFeVIsS0FDaEQsTUFDa0IsaUJBQVh6UixFQUFFbUosTUFFNkMsS0FEbkRuSixFQUFFa3RDLGFBQWUsSUFDakJ0K0IsUUFBUyxzQ0FDWDJqQyxHQUFPN3FDLEtBQU0xSCxFQUFFbUosT0FBVSxRQUk1QixHQUFLMnBDLEdBQWlDLFVBQXJCOXlDLEVBQUVnc0MsVUFBVyxHQThEN0IsT0EzREEyRyxFQUFlM3lDLEVBQUV5eUMsY0FBZ0JqdkMsRUFBWXhELEVBQUV5eUMsZUFDOUN6eUMsRUFBRXl5QyxnQkFDRnp5QyxFQUFFeXlDLGNBR0VLLEVBQ0o5eUMsRUFBRzh5QyxHQUFhOXlDLEVBQUc4eUMsR0FBVzd4QyxRQUFTc3hDLEdBQVEsS0FBT0ksSUFDL0IsSUFBWjN5QyxFQUFFd3lDLFFBQ2J4eUMsRUFBRXlSLE1BQVMrNEIsR0FBTzlpQyxLQUFNMUgsRUFBRXlSLEtBQVEsSUFBTSxLQUFRelIsRUFBRXd5QyxNQUFRLElBQU1HLEdBSWpFM3lDLEVBQUVxdEMsV0FBWSxlQUFrQixXQUkvQixPQUhNd0YsR0FDTDc4QixFQUFPbE0sTUFBTzZvQyxFQUFlLG1CQUV2QkUsRUFBbUIsSUFJM0I3eUMsRUFBRWdzQyxVQUFXLEdBQU0sT0FHbkI0RyxFQUFjN3dDLEVBQVE0d0MsR0FDdEI1d0MsRUFBUTR3QyxHQUFpQixXQUN4QkUsRUFBb0JqeEMsV0FJckJzcUMsRUFBTXJnQixRQUFRLGdCQUdRbFUsSUFBaEJpN0IsRUFDSjU4QixFQUFRalUsR0FBUzZtQyxXQUFZK0osR0FJN0I1d0MsRUFBUTR3QyxHQUFpQkMsRUFJckI1eUMsRUFBRzJ5QyxLQUdQM3lDLEVBQUV5eUMsY0FBZ0JDLEVBQWlCRCxjQUduQ0gsR0FBYXJ2QyxLQUFNMHZDLElBSWZFLEdBQXFCcnZDLEVBQVlvdkMsSUFDckNBLEVBQWFDLEVBQW1CLElBR2pDQSxFQUFvQkQsT0FBY2o3QixLQUk1QixZQVlUN0MsRUFBUWkrQixxQkFDSHZnQixHQUFPanNCLEVBQVN5c0MsZUFBZUQsbUJBQW9CLElBQUt2Z0IsTUFDdkQzZ0IsVUFBWSw2QkFDaUIsSUFBM0IyZ0IsR0FBSzdWLFdBQVdwYSxRQVF4QnlULEVBQU82UyxVQUFZLFNBQVUxZixFQUFNa0MsRUFBUzRuQyxHQUMzQyxNQUFxQixpQkFBVDlwQyxFQUNKLElBRWdCLGtCQUFaa0MsSUFDWDRuQyxFQUFjNW5DLEVBQ2RBLEdBQVUsR0FLTEEsSUFJQXlKLEVBQVFpK0IscUJBTVpsdUIsR0FMQXhaLEVBQVU5RSxFQUFTeXNDLGVBQWVELG1CQUFvQixLQUt2Q2hzQyxjQUFlLFNBQ3pCQyxLQUFPVCxFQUFTVSxTQUFTRCxLQUM5QnFFLEVBQVFzSyxLQUFLQyxZQUFhaVAsSUFFMUJ4WixFQUFVOUUsR0FLWmd1QixHQUFXMGUsR0FBZSxJQUQxQkMsRUFBUzVxQixFQUFXN2QsS0FBTXRCLElBS2xCLENBQUVrQyxFQUFRdEUsY0FBZW1zQyxFQUFRLE1BR3pDQSxFQUFTNWUsR0FBZSxDQUFFbnJCLEdBQVFrQyxFQUFTa3BCLEdBRXRDQSxHQUFXQSxFQUFRaHlCLFFBQ3ZCeVQsRUFBUXVlLEdBQVV4aUIsU0FHWmlFLEVBQU9RLE1BQU8sR0FBSTA4QixFQUFPdjJCLGNBbENoQyxJQUFJa0ksRUFBTXF1QixFQUFRM2UsR0F5Q25CdmUsRUFBT0MsR0FBR2hGLEtBQU8sU0FBVVEsRUFBS3hFLEVBQVE1QyxHQUN2QyxJQUFJakksRUFBVWtKLEVBQU1rSCxFQUNuQmtXLEVBQU9sbkIsS0FDUG8wQixFQUFNbmtCLEVBQUk3QyxRQUFTLEtBc0RwQixPQXBES2duQixHQUFPLElBQ1h4ekIsRUFBV3FtQyxHQUFrQmgzQixFQUFJalIsTUFBT28xQixJQUN4Q25rQixFQUFNQSxFQUFJalIsTUFBTyxFQUFHbzFCLElBSWhCcHlCLEVBQVl5SixJQUdoQjVDLEVBQVc0QyxFQUNYQSxPQUFTMEssR0FHRTFLLEdBQTRCLGlCQUFYQSxJQUM1QjNCLEVBQU8sUUFJSG9kLEVBQUtubUIsT0FBUyxHQUNsQnlULEVBQU94RSxLQUFNLENBQ1pDLElBQUtBLEVBS0xuRyxLQUFNQSxHQUFRLE1BQ2RvRyxTQUFVLE9BQ1Z2SSxLQUFNOEQsSUFDSDJNLE1BQU0sU0FBVW80QixHQUduQngvQixFQUFXNVEsVUFFWDhtQixFQUFLMVosS0FBTTVNLEVBSVY0VCxFQUFRLFNBQVV4QyxPQUFRd0MsRUFBTzZTLFVBQVdtcEIsSUFBaUJwb0MsS0FBTXhILEdBR25FNHZDLE1BS0VubUIsT0FBUXhoQixHQUFZLFNBQVU2aEMsRUFBTzRDLEdBQ3hDcG1CLEVBQUsvbEIsTUFBTSxXQUNWMEgsRUFBUzNJLE1BQU9GLEtBQU1nUixHQUFZLENBQUUwNUIsRUFBTThGLGFBQWNsRCxFQUFRNUMsU0FLNUQxcUMsTUFNUndVLEVBQU9pTCxLQUFLdEcsUUFBUXc0QixTQUFXLFNBQVV4OEIsR0FDeEMsT0FBT1gsRUFBT2dCLEtBQU1oQixFQUFPK3dCLFFBQVEsU0FBVTl3QixHQUM1QyxPQUFPVSxJQUFTVixFQUFHVSxRQUNoQnBVLFFBTUx5VCxFQUFPbzlCLE9BQVMsQ0FDZkMsVUFBVyxTQUFVMThCLEVBQU1oTCxFQUFTMU4sR0FDbkMsSUFBSXExQyxFQUFhQyxFQUFTQyxFQUFXQyxFQUFRQyxFQUFXQyxFQUN2RDlVLEVBQVc3b0IsRUFBTzBiLElBQUsvYSxFQUFNLFlBQzdCaTlCLEVBQVU1OUIsRUFBUVcsR0FDbEJpaUIsRUFBUSxHQUdTLFdBQWJpRyxJQUNKbG9CLEVBQUs4YSxNQUFNb04sU0FBVyxZQUd2QjZVLEVBQVlFLEVBQVFSLFNBQ3BCSSxFQUFZeDlCLEVBQU8wYixJQUFLL2EsRUFBTSxPQUM5Qmc5QixFQUFhMzlCLEVBQU8wYixJQUFLL2EsRUFBTSxTQUNJLGFBQWJrb0IsR0FBd0MsVUFBYkEsS0FDOUMyVSxFQUFZRyxHQUFhL2tDLFFBQVMsU0FBWSxHQU1oRDZrQyxHQURBSCxFQUFjTSxFQUFRL1UsWUFDRDU1QixJQUNyQnN1QyxFQUFVRCxFQUFZOVEsT0FHdEJpUixFQUFTdlUsV0FBWXNVLElBQWUsRUFDcENELEVBQVVyVSxXQUFZeVUsSUFBZ0IsR0FHbENud0MsRUFBWW1JLEtBR2hCQSxFQUFVQSxFQUFRdk4sS0FBTXVZLEVBQU0xWSxFQUFHK1gsRUFBTzFTLE9BQVEsR0FBSW93QyxLQUdqQyxNQUFmL25DLEVBQVExRyxNQUNaMnpCLEVBQU0zekIsSUFBUTBHLEVBQVExRyxJQUFNeXVDLEVBQVV6dUMsSUFBUXd1QyxHQUUxQixNQUFoQjluQyxFQUFRNjJCLE9BQ1o1SixFQUFNNEosS0FBUzcyQixFQUFRNjJCLEtBQU9rUixFQUFVbFIsS0FBUytRLEdBRzdDLFVBQVc1bkMsRUFDZkEsRUFBUWtvQyxNQUFNejFDLEtBQU11WSxFQUFNaWlCLElBR0EsaUJBQWRBLEVBQU0zekIsTUFDakIyekIsRUFBTTN6QixLQUFPLE1BRWEsaUJBQWYyekIsRUFBTTRKLE9BQ2pCNUosRUFBTTRKLE1BQVEsTUFFZm9SLEVBQVFsaUIsSUFBS2tILE1BS2hCNWlCLEVBQU9DLEdBQUczUyxPQUFRLENBR2pCOHZDLE9BQVEsU0FBVXpuQyxHQUdqQixHQUFLL0osVUFBVVcsT0FDZCxZQUFtQm9WLElBQVpoTSxFQUNObkssS0FDQUEsS0FBS21CLE1BQU0sU0FBVTFFLEdBQ3BCK1gsRUFBT285QixPQUFPQyxVQUFXN3hDLEtBQU1tSyxFQUFTMU4sTUFJM0MsSUFBSTYxQyxFQUFNQyxFQUNUcDlCLEVBQU9uVixLQUFNLEdBRWQsT0FBTW1WLEVBUUFBLEVBQUtrckIsaUJBQWlCdC9CLFFBSzVCdXhDLEVBQU9uOUIsRUFBSzJyQix3QkFDWnlSLEVBQU1wOUIsRUFBS3VHLGNBQWNvQyxZQUNsQixDQUNOcmEsSUFBSzZ1QyxFQUFLN3VDLElBQU04dUMsRUFBSUMsWUFDcEJ4UixLQUFNc1IsRUFBS3RSLEtBQU91UixFQUFJRSxjQVJmLENBQUVodkMsSUFBSyxFQUFHdTlCLEtBQU0sUUFUeEIsR0F1QkQzRCxTQUFVLFdBQ1QsR0FBTXI5QixLQUFNLEdBQVosQ0FJQSxJQUFJMHlDLEVBQWNkLEVBQVE3OUIsRUFDekJvQixFQUFPblYsS0FBTSxHQUNiMnlDLEVBQWUsQ0FBRWx2QyxJQUFLLEVBQUd1OUIsS0FBTSxHQUdoQyxHQUF3QyxVQUFuQ3hzQixFQUFPMGIsSUFBSy9hLEVBQU0sWUFHdEJ5OEIsRUFBU3o4QixFQUFLMnJCLDRCQUVSLENBT04sSUFOQThRLEVBQVM1eEMsS0FBSzR4QyxTQUlkNzlCLEVBQU1vQixFQUFLdUcsY0FDWGczQixFQUFldjlCLEVBQUt1OUIsY0FBZ0IzK0IsRUFBSTRKLGdCQUNoQyswQixJQUNMQSxJQUFpQjMrQixFQUFJaWQsTUFBUTBoQixJQUFpQjMrQixFQUFJNEosa0JBQ1QsV0FBM0NuSixFQUFPMGIsSUFBS3dpQixFQUFjLGFBRTFCQSxFQUFlQSxFQUFhcitCLFdBRXhCcStCLEdBQWdCQSxJQUFpQnY5QixHQUFrQyxJQUExQnU5QixFQUFhdGlDLFlBRzFEdWlDLEVBQWVuK0IsRUFBUWsrQixHQUFlZCxVQUN6Qm51QyxLQUFPK1EsRUFBTzBiLElBQUt3aUIsRUFBYyxrQkFBa0IsR0FDaEVDLEVBQWEzUixNQUFReHNCLEVBQU8wYixJQUFLd2lCLEVBQWMsbUJBQW1CLElBS3BFLE1BQU8sQ0FDTmp2QyxJQUFLbXVDLEVBQU9udUMsSUFBTWt2QyxFQUFhbHZDLElBQU0rUSxFQUFPMGIsSUFBSy9hLEVBQU0sYUFBYSxHQUNwRTZyQixLQUFNNFEsRUFBTzVRLEtBQU8yUixFQUFhM1IsS0FBT3hzQixFQUFPMGIsSUFBSy9hLEVBQU0sY0FBYyxNQWMxRXU5QixhQUFjLFdBQ2IsT0FBTzF5QyxLQUFLa1YsS0FBSyxXQUdoQixJQUZBLElBQUl3OUIsRUFBZTF5QyxLQUFLMHlDLGFBRWhCQSxHQUEyRCxXQUEzQ2wrQixFQUFPMGIsSUFBS3dpQixFQUFjLGFBQ2pEQSxFQUFlQSxFQUFhQSxhQUc3QixPQUFPQSxHQUFnQi8wQixTQU0xQm5KLEVBQU9yVCxLQUFNLENBQUU2Z0MsV0FBWSxjQUFlRCxVQUFXLGdCQUFpQixTQUFVcDNCLEVBQVF3akIsR0FDdkYsSUFBSTFxQixFQUFNLGdCQUFrQjBxQixFQUU1QjNaLEVBQU9DLEdBQUk5SixHQUFXLFNBQVV3RCxHQUMvQixPQUFPNmUsRUFBUWh0QixNQUFNLFNBQVVtVixFQUFNeEssRUFBUXdELEdBRzVDLElBQUlva0MsRUFPSixHQU5LaC9CLEVBQVU0QixHQUNkbzlCLEVBQU1wOUIsRUFDdUIsSUFBbEJBLEVBQUsvRSxXQUNoQm1pQyxFQUFNcDlCLEVBQUsySSxrQkFHQzNILElBQVJoSSxFQUNKLE9BQU9va0MsRUFBTUEsRUFBS3BrQixHQUFTaFosRUFBTXhLLEdBRzdCNG5DLEVBQ0pBLEVBQUlLLFNBQ0ZudkMsRUFBWTh1QyxFQUFJRSxZQUFWdGtDLEVBQ1AxSyxFQUFNMEssRUFBTW9rQyxFQUFJQyxhQUlqQnI5QixFQUFNeEssR0FBV3dELElBRWhCeEQsRUFBUXdELEVBQUsvTixVQUFVVyxZQVU1QnlULEVBQU9yVCxLQUFNLENBQUUsTUFBTyxTQUFVLFNBQVU4VixFQUFJa1gsR0FDN0MzWixFQUFPZ3NCLFNBQVVyUyxHQUFTb08sR0FBY2pwQixFQUFReXFCLGVBQy9DLFNBQVU1b0IsRUFBTThtQixHQUNmLEdBQUtBLEVBSUosT0FIQUEsRUFBV0QsR0FBUTdtQixFQUFNZ1osR0FHbEJ1TixHQUFVeDFCLEtBQU0rMUIsR0FDdEJ6bkIsRUFBUVcsR0FBT2tvQixXQUFZbFAsR0FBUyxLQUNwQzhOLFFBUUx6bkIsRUFBT3JULEtBQU0sQ0FBRTB4QyxPQUFRLFNBQVVDLE1BQU8sVUFBVyxTQUFVOTFDLEVBQU04TSxHQUNsRTBLLEVBQU9yVCxLQUFNLENBQUUrL0IsUUFBUyxRQUFVbGtDLEVBQU1zUSxRQUFTeEQsRUFBTSxHQUFJLFFBQVU5TSxJQUNwRSxTQUFVKzFDLEVBQWNDLEdBR3hCeCtCLEVBQU9DLEdBQUl1K0IsR0FBYSxTQUFVL1IsRUFBUXZqQyxHQUN6QyxJQUFJdXZCLEVBQVk3c0IsVUFBVVcsU0FBWWd5QyxHQUFrQyxrQkFBWDlSLEdBQzVEbEIsRUFBUWdULEtBQTZCLElBQVg5UixJQUE2QixJQUFWdmpDLEVBQWlCLFNBQVcsVUFFMUUsT0FBT3N2QixFQUFRaHRCLE1BQU0sU0FBVW1WLEVBQU1yTCxFQUFNcE0sR0FDMUMsSUFBSXFXLEVBRUosT0FBS1IsRUFBVTRCLEdBR3lCLElBQWhDNjlCLEVBQVM1bEMsUUFBUyxTQUN4QitILEVBQU0sUUFBVW5ZLEdBQ2hCbVksRUFBS3BRLFNBQVM0WSxnQkFBaUIsU0FBVzNnQixHQUlyQixJQUFsQm1ZLEVBQUsvRSxVQUNUMkQsRUFBTW9CLEVBQUt3SSxnQkFJSnhXLEtBQUtxNEIsSUFDWHJxQixFQUFLNmIsS0FBTSxTQUFXaDBCLEdBQVErVyxFQUFLLFNBQVcvVyxHQUM5Q21ZLEVBQUs2YixLQUFNLFNBQVdoMEIsR0FBUStXLEVBQUssU0FBVy9XLEdBQzlDK1csRUFBSyxTQUFXL1csVUFJRG1aLElBQVZ6WSxFQUdOOFcsRUFBTzBiLElBQUsvYSxFQUFNckwsRUFBTWkyQixHQUd4QnZyQixFQUFPeWIsTUFBTzlhLEVBQU1yTCxFQUFNcE0sRUFBT3FpQyxLQUNoQ2oyQixFQUFNbWpCLEVBQVlnVSxPQUFTOXFCLEVBQVc4VyxVQU01Q3pZLEVBQU9yVCxLQUFNLENBQ1osWUFDQSxXQUNBLGVBQ0EsWUFDQSxjQUNBLGFBQ0UsU0FBVThWLEVBQUluTixHQUNoQjBLLEVBQU9DLEdBQUkzSyxHQUFTLFNBQVUySyxHQUM3QixPQUFPelUsS0FBS2cwQixHQUFJbHFCLEVBQU0ySyxPQU94QkQsRUFBT0MsR0FBRzNTLE9BQVEsQ0FFakI3RCxLQUFNLFNBQVVnMkIsRUFBT3RzQixFQUFNOE0sR0FDNUIsT0FBT3pVLEtBQUtnMEIsR0FBSUMsRUFBTyxLQUFNdHNCLEVBQU04TSxJQUVwQzNPLE9BQVEsU0FBVW11QixFQUFPeGYsR0FDeEIsT0FBT3pVLEtBQUtvMEIsSUFBS0gsRUFBTyxLQUFNeGYsSUFHL0J6UCxTQUFVLFNBQVVwRSxFQUFVcXpCLEVBQU90c0IsRUFBTThNLEdBQzFDLE9BQU96VSxLQUFLZzBCLEdBQUlDLEVBQU9yekIsRUFBVStHLEVBQU04TSxJQUV4QzFPLFdBQVksU0FBVW5GLEVBQVVxekIsRUFBT3hmLEdBR3RDLE9BQTRCLElBQXJCclUsVUFBVVcsT0FDaEJmLEtBQUtvMEIsSUFBS3h6QixFQUFVLE1BQ3BCWixLQUFLbzBCLElBQUtILEVBQU9yekIsR0FBWSxLQUFNNlQsSUFHckN3K0IsTUFBTyxTQUFVQyxFQUFRQyxHQUN4QixPQUFPbnpDLEtBQUtvNUIsV0FBWThaLEdBQVM3WixXQUFZOFosR0FBU0QsTUFJeEQxK0IsRUFBT3JULEtBQU0sd0xBRWdENk4sTUFBTyxNQUNuRSxTQUFVaUksRUFBSWphLEdBR2J3WCxFQUFPQyxHQUFJelgsR0FBUyxTQUFVMkssRUFBTThNLEdBQ25DLE9BQU9yVSxVQUFVVyxPQUFTLEVBQ3pCZixLQUFLZzBCLEdBQUloM0IsRUFBTSxLQUFNMkssRUFBTThNLEdBQzNCelUsS0FBSzZFLFFBQVM3SCxPQVNsQixJQUFJcWMsR0FBUSxxQ0FNWjdFLEVBQU9sUSxNQUFRLFNBQVVtUSxFQUFJNUssR0FDNUIsSUFBSTRVLEVBQUs1ZCxFQUFNeUQsRUFVZixHQVJ3QixpQkFBWnVGLElBQ1g0VSxFQUFNaEssRUFBSTVLLEdBQ1ZBLEVBQVU0SyxFQUNWQSxFQUFLZ0ssR0FLQXpjLEVBQVl5UyxHQWFsQixPQVJBNVQsRUFBTzdCLEVBQU1wQyxLQUFNd0QsVUFBVyxJQUM5QmtFLEVBQVEsV0FDUCxPQUFPbVEsRUFBR3ZVLE1BQU8ySixHQUFXN0osS0FBTWEsRUFBS1YsT0FBUW5CLEVBQU1wQyxLQUFNd0QsZUFJdEQyVyxLQUFPdEMsRUFBR3NDLEtBQU90QyxFQUFHc0MsTUFBUXZDLEVBQU91QyxPQUVsQ3pTLEdBR1JrUSxFQUFPNCtCLFVBQVksU0FBVUMsR0FDdkJBLEVBQ0o3K0IsRUFBT3FZLFlBRVByWSxFQUFPOFMsT0FBTyxJQUdoQjlTLEVBQU92UyxRQUFVbEQsTUFBTWtELFFBQ3ZCdVMsRUFBTy9CLFVBQVlpYyxLQUFLQyxNQUN4Qm5hLEVBQU95RyxTQUFXQSxFQUNsQnpHLEVBQU94UyxXQUFhQSxFQUNwQndTLEVBQU9qQixTQUFXQSxFQUNsQmlCLEVBQU9vWixVQUFZQSxFQUNuQnBaLEVBQU8xSyxLQUFPeUssRUFFZEMsRUFBT3JELElBQU12UCxLQUFLdVAsSUFFbEJxRCxFQUFPOCtCLFVBQVksU0FBVXAwQyxHQUs1QixJQUFJNEssRUFBTzBLLEVBQU8xSyxLQUFNNUssR0FDeEIsT0FBa0IsV0FBVDRLLEdBQThCLFdBQVRBLEtBSzVCeXBDLE1BQU9yMEMsRUFBTXcrQixXQUFZeCtCLEtBRzVCc1YsRUFBTzNSLEtBQU8sU0FBVW9SLEdBQ3ZCLE9BQWUsTUFBUkEsRUFDTixJQUNFQSxFQUFPLElBQUt4VSxRQUFTNFosR0FBTyxVQXFCOUIsS0FGcUIsRUFBRixXQUNuQixPQUFPN0UsR0FDUCxRQUZpQixPQUVqQixhQU1GLElBR0NnL0IsR0FBVWp6QyxFQUFPaVUsT0FHakJpL0IsR0FBS2x6QyxFQUFPOUIsRUF3QmIsT0F0QkErVixFQUFPay9CLFdBQWEsU0FBVXo5QixHQVM3QixPQVJLMVYsRUFBTzlCLElBQU0rVixJQUNqQmpVLEVBQU85QixFQUFJZzFDLElBR1B4OUIsR0FBUTFWLEVBQU9pVSxTQUFXQSxJQUM5QmpVLEVBQU9pVSxPQUFTZy9CLElBR1ZoL0IsUUFNaUIsSUFBYjNCLElBQ1h0UyxFQUFPaVUsT0FBU2pVLEVBQU85QixFQUFJK1YsR0FNckJBLE0sK0NDcG5WQSxTQUFTbS9CLEVBQUtDLEdBQ0FBLEVBQUl2bUMsS0FBSyxzQkFBcUIsZUNEbkQsSUFBTTFNLEUsTUFBTSxHQUFNLFNBQ2xCQSxFQUFJckQsSUFBSSxLQUFLcTJDLEdBQ2JoekMsRUFBSXJELElBQUksU0FBU3EyQyxHQUNqQmh6QyxFQUFJckQsSUFBSSxJQUFJcTJDLEdBQ1poekMsRUFBSWlLLElBQUkiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIpO1xuIiwiLy8gbmFtZTogc2FtbXlcbi8vIHZlcnNpb246IDAuNy42XG5cbi8vIFNhbW15LmpzIC8gaHR0cDovL3NhbW15anMub3JnXG5cbihmdW5jdGlvbihmYWN0b3J5KXtcbiAgLy8gU3VwcG9ydCBtb2R1bGUgbG9hZGluZyBzY2VuYXJpb3NcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCl7XG4gICAgLy8gQU1EIEFub255bW91cyBNb2R1bGVcbiAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTm8gbW9kdWxlIGxvYWRlciAocGxhaW4gPHNjcmlwdD4gdGFnKSAtIHB1dCBkaXJlY3RseSBpbiBnbG9iYWwgbmFtZXNwYWNlXG4gICAgalF1ZXJ5LnNhbW15ID0gd2luZG93LlNhbW15ID0gZmFjdG9yeShqUXVlcnkpO1xuICB9XG59KShmdW5jdGlvbigkKXtcblxuICB2YXIgU2FtbXksXG4gICAgICBQQVRIX1JFUExBQ0VSID0gXCIoW15cXC9dKylcIixcbiAgICAgIFBBVEhfTkFNRV9NQVRDSEVSID0gLzooW1xcd1xcZF0rKS9nLFxuICAgICAgUVVFUllfU1RSSU5HX01BVENIRVIgPSAvXFw/KFteI10qKT8kLyxcbiAgICAgIC8vIG1haW5seSBmb3IgbWFraW5nIGBhcmd1bWVudHNgIGFuIEFycmF5XG4gICAgICBfbWFrZUFycmF5ID0gZnVuY3Rpb24obm9uYXJyYXkpIHsgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG5vbmFycmF5KTsgfSxcbiAgICAgIC8vIGJvcnJvd2VkIGZyb20galF1ZXJ5XG4gICAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKCBvYmogKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiOyB9LFxuICAgICAgX2lzQXJyYXkgPSBmdW5jdGlvbiggb2JqICkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBBcnJheV1cIjsgfSxcbiAgICAgIF9pc1JlZ0V4cCA9IGZ1bmN0aW9uKCBvYmogKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gXCJbb2JqZWN0IFJlZ0V4cF1cIjsgfSxcbiAgICAgIF9kZWNvZGUgPSBmdW5jdGlvbiggc3RyICkgeyByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KChzdHIgfHwgJycpLnJlcGxhY2UoL1xcKy9nLCAnICcpKTsgfSxcbiAgICAgIF9lbmNvZGUgPSBlbmNvZGVVUklDb21wb25lbnQsXG4gICAgICBfZXNjYXBlSFRNTCA9IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhzKS5yZXBsYWNlKC8mKD8hXFx3KzspL2csICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xuICAgICAgfSxcbiAgICAgIF9yb3V0ZVdyYXBwZXIgPSBmdW5jdGlvbih2ZXJiKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yb3V0ZS5hcHBseSh0aGlzLCBbdmVyYl0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBfdGVtcGxhdGVfY2FjaGUgPSB7fSxcbiAgICAgIF9oYXNfaGlzdG9yeSA9ICEhKHdpbmRvdy5oaXN0b3J5ICYmIGhpc3RvcnkucHVzaFN0YXRlKSxcbiAgICAgIGxvZ2dlcnMgPSBbXTtcblxuXG4gIC8vIGBTYW1teWAgKGFsc28gYWxpYXNlZCBhcyAkLnNhbW15KSBpcyBub3Qgb25seSB0aGUgbmFtZXNwYWNlIGZvciBhXG4gIC8vIG51bWJlciBvZiBwcm90b3R5cGVzLCBpdHMgYWxzbyBhIHRvcCBsZXZlbCBtZXRob2QgdGhhdCBhbGxvd3MgZm9yIGVhc3lcbiAgLy8gY3JlYXRpb24vbWFuYWdlbWVudCBvZiBgU2FtbXkuQXBwbGljYXRpb25gIGluc3RhbmNlcy4gVGhlcmUgYXJlIGFcbiAgLy8gbnVtYmVyIG9mIGRpZmZlcmVudCBmb3JtcyBmb3IgYFNhbW15KClgIGJ1dCBlYWNoIHJldHVybnMgYW4gaW5zdGFuY2VcbiAgLy8gb2YgYFNhbW15LkFwcGxpY2F0aW9uYC4gV2hlbiBhIG5ldyBpbnN0YW5jZSBpcyBjcmVhdGVkIHVzaW5nXG4gIC8vIGBTYW1teWAgaXQgaXMgYWRkZWQgdG8gYW4gT2JqZWN0IGNhbGxlZCBgU2FtbXkuYXBwc2AuIFRoaXNcbiAgLy8gcHJvdmlkZXMgZm9yIGFuIGVhc3kgd2F5IHRvIGdldCBhdCBleGlzdGluZyBTYW1teSBhcHBsaWNhdGlvbnMuIE9ubHkgb25lXG4gIC8vIGluc3RhbmNlIGlzIGFsbG93ZWQgcGVyIGBlbGVtZW50X3NlbGVjdG9yYCBzbyB3aGVuIGNhbGxpbmdcbiAgLy8gYFNhbW15KCdzZWxlY3RvcicpYCBtdWx0aXBsZSB0aW1lcywgdGhlIGZpcnN0IHRpbWUgd2lsbCBjcmVhdGVcbiAgLy8gdGhlIGFwcGxpY2F0aW9uIGFuZCB0aGUgZm9sbG93aW5nIHRpbWVzIHdpbGwgZXh0ZW5kIHRoZSBhcHBsaWNhdGlvblxuICAvLyBhbHJlYWR5IGFkZGVkIHRvIHRoYXQgc2VsZWN0b3IuXG4gIC8vXG4gIC8vICMjIyBFeGFtcGxlXG4gIC8vXG4gIC8vICAgICAgLy8gcmV0dXJucyB0aGUgYXBwIGF0ICNtYWluIG9yIGEgbmV3IGFwcFxuICAvLyAgICAgIFNhbW15KCcjbWFpbicpXG4gIC8vXG4gIC8vICAgICAgLy8gZXF1aXZhbGVudCB0byBcIm5ldyBTYW1teS5BcHBsaWNhdGlvblwiLCBleGNlcHQgYXBwZW5kcyB0byBhcHBzXG4gIC8vICAgICAgU2FtbXkoKTtcbiAgLy8gICAgICBTYW1teShmdW5jdGlvbigpIHsgLi4uIH0pO1xuICAvL1xuICAvLyAgICAgIC8vIGV4dGVuZHMgdGhlIGFwcCBhdCAnI21haW4nIHdpdGggZnVuY3Rpb24uXG4gIC8vICAgICAgU2FtbXkoJyNtYWluJywgZnVuY3Rpb24oKSB7IC4uLiB9KTtcbiAgLy9cbiAgU2FtbXkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IF9tYWtlQXJyYXkoYXJndW1lbnRzKSxcbiAgICAgICAgYXBwLCBzZWxlY3RvcjtcbiAgICBTYW1teS5hcHBzID0gU2FtbXkuYXBwcyB8fCB7fTtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDAgfHwgYXJnc1swXSAmJiBfaXNGdW5jdGlvbihhcmdzWzBdKSkgeyAvLyBTYW1teSgpXG4gICAgICByZXR1cm4gU2FtbXkuYXBwbHkoU2FtbXksIFsnYm9keSddLmNvbmNhdChhcmdzKSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgKHNlbGVjdG9yID0gYXJncy5zaGlmdCgpKSA9PSAnc3RyaW5nJykgeyAvLyBTYW1teSgnI21haW4nKVxuICAgICAgYXBwID0gU2FtbXkuYXBwc1tzZWxlY3Rvcl0gfHwgbmV3IFNhbW15LkFwcGxpY2F0aW9uKCk7XG4gICAgICBhcHAuZWxlbWVudF9zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAkLmVhY2goYXJncywgZnVuY3Rpb24oaSwgcGx1Z2luKSB7XG4gICAgICAgICAgYXBwLnVzZShwbHVnaW4pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHRoZSBzZWxlY3RvciBjaGFuZ2VzIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGluIFNhbW15LmFwcHMgY2hhbmdlc1xuICAgICAgaWYgKGFwcC5lbGVtZW50X3NlbGVjdG9yICE9IHNlbGVjdG9yKSB7XG4gICAgICAgIGRlbGV0ZSBTYW1teS5hcHBzW3NlbGVjdG9yXTtcbiAgICAgIH1cbiAgICAgIFNhbW15LmFwcHNbYXBwLmVsZW1lbnRfc2VsZWN0b3JdID0gYXBwO1xuICAgICAgcmV0dXJuIGFwcDtcbiAgICB9XG4gIH07XG5cbiAgU2FtbXkuVkVSU0lPTiA9ICcwLjcuNic7XG5cbiAgLy8gQWRkIHRvIHRoZSBnbG9iYWwgbG9nZ2VyIHBvb2wuIFRha2VzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGFuXG4gIC8vIHVua25vd24gbnVtYmVyIG9mIGFyZ3VtZW50cyBhbmQgc2hvdWxkIHByaW50IHRoZW0gb3Igc2VuZCB0aGVtIHNvbWV3aGVyZVxuICAvLyBUaGUgZmlyc3QgYXJndW1lbnQgaXMgYWx3YXlzIGEgdGltZXN0YW1wLlxuICBTYW1teS5hZGRMb2dnZXIgPSBmdW5jdGlvbihsb2dnZXIpIHtcbiAgICBsb2dnZXJzLnB1c2gobG9nZ2VyKTtcbiAgfTtcblxuICAvLyBTZW5kcyBhIGxvZyBtZXNzYWdlIHRvIGVhY2ggbG9nZ2VyIGxpc3RlZCBpbiB0aGUgZ2xvYmFsXG4gIC8vIGxvZ2dlcnMgcG9vbC4gQ2FuIHRha2UgYW55IG51bWJlciBvZiBhcmd1bWVudHMuXG4gIC8vIEFsc28gcHJlZml4ZXMgdGhlIGFyZ3VtZW50cyB3aXRoIGEgdGltZXN0YW1wLlxuICBTYW1teS5sb2cgPSBmdW5jdGlvbigpICB7XG4gICAgdmFyIGFyZ3MgPSBfbWFrZUFycmF5KGFyZ3VtZW50cyk7XG4gICAgYXJncy51bnNoaWZ0KFwiW1wiICsgRGF0ZSgpICsgXCJdXCIpO1xuICAgICQuZWFjaChsb2dnZXJzLCBmdW5jdGlvbihpLCBsb2dnZXIpIHtcbiAgICAgIGxvZ2dlci5hcHBseShTYW1teSwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cuY29uc29sZSAhPSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93LmNvbnNvbGUubG9nID09PSAnZnVuY3Rpb24nICYmIF9pc0Z1bmN0aW9uKHdpbmRvdy5jb25zb2xlLmxvZy5hcHBseSkpIHtcbiAgICAgIFNhbW15LmFkZExvZ2dlcihmdW5jdGlvbigpIHtcbiAgICAgICAgd2luZG93LmNvbnNvbGUubG9nLmFwcGx5KHdpbmRvdy5jb25zb2xlLCBhcmd1bWVudHMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFNhbW15LmFkZExvZ2dlcihmdW5jdGlvbigpIHtcbiAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNvbnNvbGUgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBTYW1teS5hZGRMb2dnZXIoZnVuY3Rpb24oKSB7XG4gICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICAgIH0pO1xuICB9XG5cbiAgJC5leHRlbmQoU2FtbXksIHtcbiAgICBtYWtlQXJyYXk6IF9tYWtlQXJyYXksXG4gICAgaXNGdW5jdGlvbjogX2lzRnVuY3Rpb24sXG4gICAgaXNBcnJheTogX2lzQXJyYXlcbiAgfSk7XG5cbiAgLy8gU2FtbXkuT2JqZWN0IGlzIHRoZSBiYXNlIGZvciBhbGwgb3RoZXIgU2FtbXkgY2xhc3Nlcy4gSXQgcHJvdmlkZXMgc29tZSB1c2VmdWxcbiAgLy8gZnVuY3Rpb25hbGl0eSwgaW5jbHVkaW5nIGNsb25pbmcsIGl0ZXJhdGluZywgZXRjLlxuICBTYW1teS5PYmplY3QgPSBmdW5jdGlvbihvYmopIHsgLy8gY29uc3RydWN0b3JcbiAgICByZXR1cm4gJC5leHRlbmQodGhpcywgb2JqIHx8IHt9KTtcbiAgfTtcblxuICAkLmV4dGVuZChTYW1teS5PYmplY3QucHJvdG90eXBlLCB7XG5cbiAgICAvLyBFc2NhcGUgSFRNTCBpbiBzdHJpbmcsIHVzZSBpbiB0ZW1wbGF0ZXMgdG8gcHJldmVudCBzY3JpcHQgaW5qZWN0aW9uLlxuICAgIC8vIEFsc28gYWxpYXNlZCBhcyBgaCgpYFxuICAgIGVzY2FwZUhUTUw6IF9lc2NhcGVIVE1MLFxuICAgIGg6IF9lc2NhcGVIVE1MLFxuXG4gICAgLy8gUmV0dXJucyBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRoIEZ1bmN0aW9ucyByZW1vdmVkLlxuICAgIHRvSGFzaDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIganNvbiA9IHt9O1xuICAgICAgJC5lYWNoKHRoaXMsIGZ1bmN0aW9uKGssdikge1xuICAgICAgICBpZiAoIV9pc0Z1bmN0aW9uKHYpKSB7XG4gICAgICAgICAganNvbltrXSA9IHY7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGpzb247XG4gICAgfSxcblxuICAgIC8vIFJlbmRlcnMgYSBzaW1wbGUgSFRNTCB2ZXJzaW9uIG9mIHRoaXMgT2JqZWN0cyBhdHRyaWJ1dGVzLlxuICAgIC8vIERvZXMgbm90IHJlbmRlciBmdW5jdGlvbnMuXG4gICAgLy8gRm9yIGV4YW1wbGUuIEdpdmVuIHRoaXMgU2FtbXkuT2JqZWN0OlxuICAgIC8vXG4gICAgLy8gICAgIHZhciBzID0gbmV3IFNhbW15Lk9iamVjdCh7Zmlyc3RfbmFtZTogJ1NhbW15JywgbGFzdF9uYW1lOiAnRGF2aXMgSnIuJ30pO1xuICAgIC8vICAgICBzLnRvSFRNTCgpXG4gICAgLy8gICAgIC8vPT4gJzxzdHJvbmc+Zmlyc3RfbmFtZTwvc3Ryb25nPiBTYW1teTxiciAvPjxzdHJvbmc+bGFzdF9uYW1lPC9zdHJvbmc+IERhdmlzIEpyLjxiciAvPidcbiAgICAvL1xuICAgIHRvSFRNTDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGlzcGxheSA9IFwiXCI7XG4gICAgICAkLmVhY2godGhpcywgZnVuY3Rpb24oaywgdikge1xuICAgICAgICBpZiAoIV9pc0Z1bmN0aW9uKHYpKSB7XG4gICAgICAgICAgZGlzcGxheSArPSBcIjxzdHJvbmc+XCIgKyBrICsgXCI8L3N0cm9uZz4gXCIgKyB2ICsgXCI8YnIgLz5cIjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGlzcGxheTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJucyBhbiBhcnJheSBvZiBrZXlzIGZvciB0aGlzIG9iamVjdC4gSWYgYGF0dHJpYnV0ZXNfb25seWBcbiAgICAvLyBpcyB0cnVlIHdpbGwgbm90IHJldHVybiBrZXlzIHRoYXQgbWFwIHRvIGEgYGZ1bmN0aW9uKClgXG4gICAga2V5czogZnVuY3Rpb24oYXR0cmlidXRlc19vbmx5KSB7XG4gICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykge1xuICAgICAgICBpZiAoIV9pc0Z1bmN0aW9uKHRoaXNbcHJvcGVydHldKSB8fCAhYXR0cmlidXRlc19vbmx5KSB7XG4gICAgICAgICAga2V5cy5wdXNoKHByb3BlcnR5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGtleXM7XG4gICAgfSxcblxuICAgIC8vIENoZWNrcyBpZiB0aGUgb2JqZWN0IGhhcyBhIHZhbHVlIGF0IGBrZXlgIGFuZCB0aGF0IHRoZSB2YWx1ZSBpcyBub3QgZW1wdHlcbiAgICBoYXM6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXNba2V5XSAmJiAkLnRyaW0odGhpc1trZXldLnRvU3RyaW5nKCkpICE9PSAnJztcbiAgICB9LFxuXG4gICAgLy8gY29udmVuaWVuY2UgbWV0aG9kIHRvIGpvaW4gYXMgbWFueSBhcmd1bWVudHMgYXMgeW91IHdhbnRcbiAgICAvLyBieSB0aGUgZmlyc3QgYXJndW1lbnQgLSB1c2VmdWwgZm9yIG1ha2luZyBwYXRoc1xuICAgIGpvaW46IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBfbWFrZUFycmF5KGFyZ3VtZW50cyk7XG4gICAgICB2YXIgZGVsaW1pdGVyID0gYXJncy5zaGlmdCgpO1xuICAgICAgcmV0dXJuIGFyZ3Muam9pbihkZWxpbWl0ZXIpO1xuICAgIH0sXG5cbiAgICAvLyBTaG9ydGN1dCB0byBTYW1teS5sb2dcbiAgICBsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgU2FtbXkubG9nLmFwcGx5KFNhbW15LCBhcmd1bWVudHMpO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgb2JqZWN0LlxuICAgIC8vIGlmIGBpbmNsdWRlX2Z1bmN0aW9uc2AgaXMgdHJ1ZSwgaXQgd2lsbCBhbHNvIHRvU3RyaW5nKCkgdGhlXG4gICAgLy8gbWV0aG9kcyBvZiB0aGlzIG9iamVjdC4gQnkgZGVmYXVsdCBvbmx5IHByaW50cyB0aGUgYXR0cmlidXRlcy5cbiAgICB0b1N0cmluZzogZnVuY3Rpb24oaW5jbHVkZV9mdW5jdGlvbnMpIHtcbiAgICAgIHZhciBzID0gW107XG4gICAgICAkLmVhY2godGhpcywgZnVuY3Rpb24oaywgdikge1xuICAgICAgICBpZiAoIV9pc0Z1bmN0aW9uKHYpIHx8IGluY2x1ZGVfZnVuY3Rpb25zKSB7XG4gICAgICAgICAgcy5wdXNoKCdcIicgKyBrICsgJ1wiOiAnICsgdi50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gXCJTYW1teS5PYmplY3Q6IHtcIiArIHMuam9pbignLCcpICsgXCJ9XCI7XG4gICAgfVxuICB9KTtcblxuXG4gIC8vIFJldHVybiB3aGV0aGVyIHRoZSBldmVudCB0YXJnZXRzIHRoaXMgd2luZG93LlxuICBTYW1teS50YXJnZXRJc1RoaXNXaW5kb3cgPSBmdW5jdGlvbiB0YXJnZXRJc1RoaXNXaW5kb3coZXZlbnQsIHRhZ05hbWUpIHtcbiAgICB2YXIgdGFyZ2V0RWxlbWVudCA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KHRhZ05hbWUpO1xuICAgIGlmICh0YXJnZXRFbGVtZW50Lmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gdHJ1ZTsgfVxuXG4gICAgdmFyIHRhcmdldFdpbmRvdyA9IHRhcmdldEVsZW1lbnQuYXR0cigndGFyZ2V0Jyk7XG4gICAgaWYgKCF0YXJnZXRXaW5kb3cgfHwgdGFyZ2V0V2luZG93ID09PSB3aW5kb3cubmFtZSB8fCB0YXJnZXRXaW5kb3cgPT09ICdfc2VsZicpIHsgcmV0dXJuIHRydWU7IH1cbiAgICBpZiAodGFyZ2V0V2luZG93ID09PSAnX2JsYW5rJykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZiAodGFyZ2V0V2luZG93ID09PSAndG9wJyAmJiB3aW5kb3cgPT09IHdpbmRvdy50b3ApIHsgcmV0dXJuIHRydWU7IH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cblxuICAvLyBUaGUgRGVmYXVsdExvY2F0aW9uUHJveHkgaXMgdGhlIGRlZmF1bHQgbG9jYXRpb24gcHJveHkgZm9yIGFsbCBTYW1teSBhcHBsaWNhdGlvbnMuXG4gIC8vIEEgbG9jYXRpb24gcHJveHkgaXMgYSBwcm90b3R5cGUgdGhhdCBjb25mb3JtcyB0byBhIHNpbXBsZSBpbnRlcmZhY2UuIFRoZSBwdXJwb3NlXG4gIC8vIG9mIGEgbG9jYXRpb24gcHJveHkgaXMgdG8gbm90aWZ5IHRoZSBTYW1teS5BcHBsaWNhdGlvbiBpdHMgYm91bmQgdG8gd2hlbiB0aGUgbG9jYXRpb25cbiAgLy8gb3IgJ2V4dGVybmFsIHN0YXRlJyBjaGFuZ2VzLlxuICAvL1xuICAvLyBUaGUgYERlZmF1bHRMb2NhdGlvblByb3h5YCB3YXRjaGVzIGZvciBjaGFuZ2VzIHRvIHRoZSBwYXRoIG9mIHRoZSBjdXJyZW50IHdpbmRvdyBhbmRcbiAgLy8gaXMgYWxzbyBhYmxlIHRvIHNldCB0aGUgcGF0aCBiYXNlZCBvbiBjaGFuZ2VzIGluIHRoZSBhcHBsaWNhdGlvbi4gSXQgZG9lcyB0aGlzIGJ5XG4gIC8vIHVzaW5nIGRpZmZlcmVudCBtZXRob2RzIGRlcGVuZGluZyBvbiB3aGF0IGlzIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBicm93c2VyLiBJblxuICAvLyB0aGUgbGF0ZXN0IGFuZCBncmVhdGVzdCBicm93c2VycyBpdCB1c2VkIHRoZSBIVE1MNSBIaXN0b3J5IEFQSSBhbmQgdGhlIGBwdXNoU3RhdGVgXG4gIC8vIGBwb3BTdGF0ZWAgZXZlbnRzL21ldGhvZHMuIFRoaXMgYWxsb3dzIHlvdSB0byB1c2UgU2FtbXkgdG8gc2VydmUgYSBzaXRlIGJlaGluZCBub3JtYWxcbiAgLy8gVVJJIHBhdGhzIGFzIG9wcG9zZWQgdG8gdGhlIG9sZGVyIGRlZmF1bHQgb2YgaGFzaCAoIykgYmFzZWQgcm91dGluZy4gQmVjYXVzZSB0aGUgc2VydmVyXG4gIC8vIGNhbiBpbnRlcnByZXQgdGhlIGNoYW5nZWQgcGF0aCBvbiBhIHJlZnJlc2ggb3IgcmUtZW50cnksIHRob3VnaCwgaXQgcmVxdWlyZXMgYWRkaXRpb25hbFxuICAvLyBzdXBwb3J0IG9uIHRoZSBzZXJ2ZXIgc2lkZS4gSWYgeW91J2QgbGlrZSB0byBmb3JjZSBkaXNhYmxlIEhUTUw1IGhpc3Rvcnkgc3VwcG9ydCwgcGxlYXNlXG4gIC8vIHVzZSB0aGUgYGRpc2FibGVfcHVzaF9zdGF0ZWAgc2V0dGluZyBvbiBgU2FtbXkuQXBwbGljYXRpb25gLiBJZiBwdXNoU3RhdGUgc3VwcG9ydFxuICAvLyBpcyBlbmFibGVkLCBgRGVmYXVsdExvY2F0aW9uUHJveHlgIGFsc28gYmluZHMgdG8gYWxsIGxpbmtzIG9uIHRoZSBwYWdlLiBJZiBhIGxpbmsgaXMgY2xpY2tlZFxuICAvLyB0aGF0IG1hdGNoZXMgdGhlIGN1cnJlbnQgc2V0IG9mIHJvdXRlcywgdGhlIFVSTCBpcyBjaGFuZ2VkIHVzaW5nIHB1c2hTdGF0ZSBpbnN0ZWFkIG9mXG4gIC8vIGZ1bGx5IHNldHRpbmcgdGhlIGxvY2F0aW9uIGFuZCB0aGUgYXBwIGlzIG5vdGlmaWVkIG9mIHRoZSBjaGFuZ2UuXG4gIC8vXG4gIC8vIElmIHRoZSBicm93c2VyIGRvZXMgbm90IGhhdmUgc3VwcG9ydCBmb3IgSFRNTDUgSGlzdG9yeSwgYERlZmF1bHRMb2NhdGlvblByb3h5YCBhdXRvbWF0aWNhbGx5XG4gIC8vIGZhbGxzIGJhY2sgdG8gdGhlIG9sZGVyIGhhc2ggYmFzZWQgcm91dGluZy4gVGhlIG5ld2VzdCBicm93c2VycyAoSUUsIFNhZmFyaSA+IDQsIEZGID49IDMuNilcbiAgLy8gc3VwcG9ydCBhICdvbmhhc2hjaGFuZ2UnIERPTSBldmVudCwgdGhhdHMgZmlyZWQgd2hlbmV2ZXIgdGhlIGxvY2F0aW9uLmhhc2ggY2hhbmdlcy5cbiAgLy8gSW4gdGhpcyBzaXR1YXRpb24gdGhlIERlZmF1bHRMb2NhdGlvblByb3h5IGp1c3QgYmluZHMgdG8gdGhpcyBldmVudCBhbmQgZGVsZWdhdGVzIGl0IHRvXG4gIC8vIHRoZSBhcHBsaWNhdGlvbi4gSW4gdGhlIGNhc2Ugb2Ygb2xkZXIgYnJvd3NlcnMgYSBwb2xsZXIgaXMgc2V0IHVwIHRvIHRyYWNrIGNoYW5nZXMgdG8gdGhlXG4gIC8vIGhhc2guXG4gIFNhbW15LkRlZmF1bHRMb2NhdGlvblByb3h5ID0gZnVuY3Rpb24oYXBwLCBydW5faW50ZXJ2YWxfZXZlcnkpIHtcbiAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAvLyBzZXQgaXMgbmF0aXZlIHRvIGZhbHNlIGFuZCBzdGFydCB0aGUgcG9sbGVyIGltbWVkaWF0ZWx5XG4gICAgdGhpcy5pc19uYXRpdmUgPSBmYWxzZTtcbiAgICB0aGlzLmhhc19oaXN0b3J5ID0gX2hhc19oaXN0b3J5O1xuICAgIHRoaXMuX3N0YXJ0UG9sbGluZyhydW5faW50ZXJ2YWxfZXZlcnkpO1xuICB9O1xuXG4gIFNhbW15LkRlZmF1bHRMb2NhdGlvblByb3h5LmZ1bGxQYXRoID0gZnVuY3Rpb24obG9jYXRpb25fb2JqKSB7XG4gICAvLyBCeXBhc3MgdGhlIGB3aW5kb3cubG9jYXRpb24uaGFzaGAgYXR0cmlidXRlLiAgSWYgYSBxdWVzdGlvbiBtYXJrXG4gICAgLy8gYXBwZWFycyBpbiB0aGUgaGFzaCBJRTYgd2lsbCBzdHJpcCBpdCBhbmQgYWxsIG9mIHRoZSBmb2xsb3dpbmdcbiAgICAvLyBjaGFyYWN0ZXJzIGZyb20gYHdpbmRvdy5sb2NhdGlvbi5oYXNoYC5cbiAgICB2YXIgbWF0Y2hlcyA9IGxvY2F0aW9uX29iai50b1N0cmluZygpLm1hdGNoKC9eW14jXSooIy4rKSQvKTtcbiAgICB2YXIgaGFzaCA9IG1hdGNoZXMgPyBtYXRjaGVzWzFdIDogJyc7XG4gICAgcmV0dXJuIFtsb2NhdGlvbl9vYmoucGF0aG5hbWUsIGxvY2F0aW9uX29iai5zZWFyY2gsIGhhc2hdLmpvaW4oJycpO1xuICB9O1xuJC5leHRlbmQoU2FtbXkuRGVmYXVsdExvY2F0aW9uUHJveHkucHJvdG90eXBlICwge1xuICAgIC8vIGJpbmQgdGhlIHByb3h5IGV2ZW50cyB0byB0aGUgY3VycmVudCBhcHAuXG4gICAgYmluZDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcHJveHkgPSB0aGlzLCBhcHAgPSB0aGlzLmFwcCwgbHAgPSBTYW1teS5EZWZhdWx0TG9jYXRpb25Qcm94eTtcbiAgICAgICQod2luZG93KS5iaW5kKCdoYXNoY2hhbmdlLicgKyB0aGlzLmFwcC5ldmVudE5hbWVzcGFjZSgpLCBmdW5jdGlvbihlLCBub25fbmF0aXZlKSB7XG4gICAgICAgIC8vIGlmIHdlIHJlY2VpdmUgYSBuYXRpdmUgaGFzaCBjaGFuZ2UgZXZlbnQsIHNldCB0aGUgcHJveHkgYWNjb3JkaW5nbHlcbiAgICAgICAgLy8gYW5kIHN0b3AgcG9sbGluZ1xuICAgICAgICBpZiAocHJveHkuaXNfbmF0aXZlID09PSBmYWxzZSAmJiAhbm9uX25hdGl2ZSkge1xuICAgICAgICAgIHByb3h5LmlzX25hdGl2ZSA9IHRydWU7XG4gICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwobHAuX2ludGVydmFsKTtcbiAgICAgICAgICBscC5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGFwcC50cmlnZ2VyKCdsb2NhdGlvbi1jaGFuZ2VkJyk7XG4gICAgICB9KTtcbiAgICAgIGlmIChfaGFzX2hpc3RvcnkgJiYgIWFwcC5kaXNhYmxlX3B1c2hfc3RhdGUpIHtcbiAgICAgICAgLy8gYmluZCB0byBwb3BzdGF0ZVxuICAgICAgICAkKHdpbmRvdykuYmluZCgncG9wc3RhdGUuJyArIHRoaXMuYXBwLmV2ZW50TmFtZXNwYWNlKCksIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBhcHAudHJpZ2dlcignbG9jYXRpb24tY2hhbmdlZCcpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gYmluZCB0byBsaW5rIGNsaWNrcyB0aGF0IGhhdmUgcm91dGVzXG4gICAgICAgICQoZG9jdW1lbnQpLmRlbGVnYXRlKCdhJywgJ2NsaWNrLmhpc3RvcnktJyArIHRoaXMuYXBwLmV2ZW50TmFtZXNwYWNlKCksIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgZS5tZXRhS2V5IHx8IGUuY3RybEtleSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZnVsbF9wYXRoID0gbHAuZnVsbFBhdGgodGhpcyksXG4gICAgICAgICAgICAvLyBHZXQgYW5jaG9yJ3MgaG9zdCBuYW1lIGluIGEgY3Jvc3MgYnJvd3NlciBjb21wYXRpYmxlIHdheS5cbiAgICAgICAgICAgIC8vIElFIGxvb3NlcyBob3N0bmFtZSBwcm9wZXJ0eSB3aGVuIHNldHRpbmcgaHJlZiBpbiBKU1xuICAgICAgICAgICAgLy8gd2l0aCBhIHJlbGF0aXZlIFVSTCwgZS5nLiBhLnNldEF0dHJpYnV0ZSgnaHJlZicsXCIvd2hhdGV2ZXJcIikuXG4gICAgICAgICAgICAvLyBDaXJjdW12ZW50IHRoaXMgcHJvYmxlbSBieSBjcmVhdGluZyBhIG5ldyBsaW5rIHdpdGggZ2l2ZW4gVVJMIGFuZFxuICAgICAgICAgICAgLy8gcXVlcnlpbmcgdGhhdCBmb3IgYSBob3N0bmFtZS5cbiAgICAgICAgICAgIGhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZSA/IHRoaXMuaG9zdG5hbWUgOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICB2YXIgbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICAgICAgICBsLmhyZWYgPSBhLmhyZWY7XG4gICAgICAgICAgICAgIHJldHVybiBsLmhvc3RuYW1lO1xuICAgICAgICAgICAgfSh0aGlzKTtcblxuICAgICAgICAgIGlmIChob3N0bmFtZSA9PSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgJiZcbiAgICAgICAgICAgICAgYXBwLmxvb2t1cFJvdXRlKCdnZXQnLCBmdWxsX3BhdGgpICYmXG4gICAgICAgICAgICAgIFNhbW15LnRhcmdldElzVGhpc1dpbmRvdyhlLCAnYScpKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBwcm94eS5zZXRMb2NhdGlvbihmdWxsX3BhdGgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIWxwLl9iaW5kaW5ncykge1xuICAgICAgICBscC5fYmluZGluZ3MgPSAwO1xuICAgICAgfVxuICAgICAgbHAuX2JpbmRpbmdzKys7XG4gICAgfSxcblxuICAgIC8vIHVuYmluZCB0aGUgcHJveHkgZXZlbnRzIGZyb20gdGhlIGN1cnJlbnQgYXBwXG4gICAgdW5iaW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICQod2luZG93KS51bmJpbmQoJ2hhc2hjaGFuZ2UuJyArIHRoaXMuYXBwLmV2ZW50TmFtZXNwYWNlKCkpO1xuICAgICAgJCh3aW5kb3cpLnVuYmluZCgncG9wc3RhdGUuJyArIHRoaXMuYXBwLmV2ZW50TmFtZXNwYWNlKCkpO1xuICAgICAgJChkb2N1bWVudCkudW5kZWxlZ2F0ZSgnYScsICdjbGljay5oaXN0b3J5LScgKyB0aGlzLmFwcC5ldmVudE5hbWVzcGFjZSgpKTtcbiAgICAgIFNhbW15LkRlZmF1bHRMb2NhdGlvblByb3h5Ll9iaW5kaW5ncy0tO1xuICAgICAgaWYgKFNhbW15LkRlZmF1bHRMb2NhdGlvblByb3h5Ll9iaW5kaW5ncyA8PSAwKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKFNhbW15LkRlZmF1bHRMb2NhdGlvblByb3h5Ll9pbnRlcnZhbCk7XG4gICAgICAgIFNhbW15LkRlZmF1bHRMb2NhdGlvblByb3h5Ll9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIGdldCB0aGUgY3VycmVudCBsb2NhdGlvbiBmcm9tIHRoZSBoYXNoLlxuICAgIGdldExvY2F0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBTYW1teS5EZWZhdWx0TG9jYXRpb25Qcm94eS5mdWxsUGF0aCh3aW5kb3cubG9jYXRpb24pO1xuICAgIH0sXG5cbiAgICAvLyBzZXQgdGhlIGN1cnJlbnQgbG9jYXRpb24gdG8gYG5ld19sb2NhdGlvbmBcbiAgICBzZXRMb2NhdGlvbjogZnVuY3Rpb24obmV3X2xvY2F0aW9uKSB7XG4gICAgICBpZiAoL14oW14jXFwvXXwkKS8udGVzdChuZXdfbG9jYXRpb24pKSB7IC8vIG5vbi1wcmVmaXhlZCB1cmxcbiAgICAgICAgaWYgKF9oYXNfaGlzdG9yeSAmJiAhdGhpcy5hcHAuZGlzYWJsZV9wdXNoX3N0YXRlKSB7XG4gICAgICAgICAgbmV3X2xvY2F0aW9uID0gJy8nICsgbmV3X2xvY2F0aW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld19sb2NhdGlvbiA9ICcjIS8nICsgbmV3X2xvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobmV3X2xvY2F0aW9uICE9IHRoaXMuZ2V0TG9jYXRpb24oKSkge1xuICAgICAgICAvLyBIVE1MNSBIaXN0b3J5IGV4aXN0cyBhbmQgbmV3X2xvY2F0aW9uIGlzIGEgZnVsbCBwYXRoXG4gICAgICAgIGlmIChfaGFzX2hpc3RvcnkgJiYgIXRoaXMuYXBwLmRpc2FibGVfcHVzaF9zdGF0ZSAmJiAvXlxcLy8udGVzdChuZXdfbG9jYXRpb24pKSB7XG4gICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoeyBwYXRoOiBuZXdfbG9jYXRpb24gfSwgd2luZG93LnRpdGxlLCBuZXdfbG9jYXRpb24pO1xuICAgICAgICAgIHRoaXMuYXBwLnRyaWdnZXIoJ2xvY2F0aW9uLWNoYW5nZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gKHdpbmRvdy5sb2NhdGlvbiA9IG5ld19sb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX3N0YXJ0UG9sbGluZzogZnVuY3Rpb24oZXZlcnkpIHtcbiAgICAgIC8vIHNldCB1cCBpbnRlcnZhbFxuICAgICAgdmFyIHByb3h5ID0gdGhpcztcbiAgICAgIGlmICghU2FtbXkuRGVmYXVsdExvY2F0aW9uUHJveHkuX2ludGVydmFsKSB7XG4gICAgICAgIGlmICghZXZlcnkpIHsgZXZlcnkgPSAxMDsgfVxuICAgICAgICB2YXIgaGFzaENoZWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRfbG9jYXRpb24gPSBwcm94eS5nZXRMb2NhdGlvbigpO1xuICAgICAgICAgIGlmICh0eXBlb2YgU2FtbXkuRGVmYXVsdExvY2F0aW9uUHJveHkuX2xhc3RfbG9jYXRpb24gPT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICAgIGN1cnJlbnRfbG9jYXRpb24gIT0gU2FtbXkuRGVmYXVsdExvY2F0aW9uUHJveHkuX2xhc3RfbG9jYXRpb24pIHtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAkKHdpbmRvdykudHJpZ2dlcignaGFzaGNoYW5nZScsIFt0cnVlXSk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgU2FtbXkuRGVmYXVsdExvY2F0aW9uUHJveHkuX2xhc3RfbG9jYXRpb24gPSBjdXJyZW50X2xvY2F0aW9uO1xuICAgICAgICB9O1xuICAgICAgICBoYXNoQ2hlY2soKTtcbiAgICAgICAgU2FtbXkuRGVmYXVsdExvY2F0aW9uUHJveHkuX2ludGVydmFsID0gd2luZG93LnNldEludGVydmFsKGhhc2hDaGVjaywgZXZlcnkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cblxuICAvLyBTYW1teS5BcHBsaWNhdGlvbiBpcyB0aGUgQmFzZSBwcm90b3R5cGUgZm9yIGRlZmluaW5nICdhcHBsaWNhdGlvbnMnLlxuICAvLyBBbiAnYXBwbGljYXRpb24nIGlzIGEgY29sbGVjdGlvbiBvZiAncm91dGVzJyBhbmQgYm91bmQgZXZlbnRzIHRoYXQgaXNcbiAgLy8gYXR0YWNoZWQgdG8gYW4gZWxlbWVudCB3aGVuIGBydW4oKWAgaXMgY2FsbGVkLlxuICAvLyBUaGUgb25seSBhcmd1bWVudCBhbiAnYXBwX2Z1bmN0aW9uJyBpcyBldmFsdWF0ZWQgd2l0aGluIHRoZSBjb250ZXh0IG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAgU2FtbXkuQXBwbGljYXRpb24gPSBmdW5jdGlvbihhcHBfZnVuY3Rpb24pIHtcbiAgICB2YXIgYXBwID0gdGhpcztcbiAgICB0aGlzLnJvdXRlcyAgICAgICAgICAgID0ge307XG4gICAgdGhpcy5saXN0ZW5lcnMgICAgICAgICA9IG5ldyBTYW1teS5PYmplY3Qoe30pO1xuICAgIHRoaXMuYXJvdW5kcyAgICAgICAgICAgPSBbXTtcbiAgICB0aGlzLmJlZm9yZXMgICAgICAgICAgID0gW107XG4gICAgLy8gZ2VuZXJhdGUgYSB1bmlxdWUgbmFtZXNwYWNlXG4gICAgdGhpcy5uYW1lc3BhY2UgICAgICAgICA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgKyAnLScgKyBwYXJzZUludChNYXRoLnJhbmRvbSgpICogMTAwMCwgMTApO1xuICAgIHRoaXMuY29udGV4dF9wcm90b3R5cGUgPSBmdW5jdGlvbigpIHsgU2FtbXkuRXZlbnRDb250ZXh0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgdGhpcy5jb250ZXh0X3Byb3RvdHlwZS5wcm90b3R5cGUgPSBuZXcgU2FtbXkuRXZlbnRDb250ZXh0KCk7XG5cbiAgICBpZiAoX2lzRnVuY3Rpb24oYXBwX2Z1bmN0aW9uKSkge1xuICAgICAgYXBwX2Z1bmN0aW9uLmFwcGx5KHRoaXMsIFt0aGlzXSk7XG4gICAgfVxuICAgIC8vIHNldCB0aGUgbG9jYXRpb24gcHJveHkgaWYgbm90IGRlZmluZWQgdG8gdGhlIGRlZmF1bHQgKERlZmF1bHRMb2NhdGlvblByb3h5KVxuICAgIGlmICghdGhpcy5fbG9jYXRpb25fcHJveHkpIHtcbiAgICAgIHRoaXMuc2V0TG9jYXRpb25Qcm94eShuZXcgU2FtbXkuRGVmYXVsdExvY2F0aW9uUHJveHkodGhpcywgdGhpcy5ydW5faW50ZXJ2YWxfZXZlcnkpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgIHRoaXMuYmluZFRvQWxsRXZlbnRzKGZ1bmN0aW9uKGUsIGRhdGEpIHtcbiAgICAgICAgYXBwLmxvZyhhcHAudG9TdHJpbmcoKSwgZS5jbGVhbmVkX3R5cGUsIGRhdGEgfHwge30pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIFNhbW15LkFwcGxpY2F0aW9uLnByb3RvdHlwZSA9ICQuZXh0ZW5kKHt9LCBTYW1teS5PYmplY3QucHJvdG90eXBlLCB7XG5cbiAgICAvLyB0aGUgZm91ciByb3V0ZSB2ZXJic1xuICAgIFJPVVRFX1ZFUkJTOiBbJ2dldCcsJ3Bvc3QnLCdwdXQnLCdkZWxldGUnXSxcblxuICAgIC8vIEFuIGFycmF5IG9mIHRoZSBkZWZhdWx0IGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhlXG4gICAgLy8gYXBwbGljYXRpb24gZHVyaW5nIGl0cyBsaWZlY3ljbGVcbiAgICBBUFBfRVZFTlRTOiBbJ3J1bicsICd1bmxvYWQnLCAnbG9va3VwLXJvdXRlJywgJ3J1bi1yb3V0ZScsICdyb3V0ZS1mb3VuZCcsICdldmVudC1jb250ZXh0LWJlZm9yZScsICdldmVudC1jb250ZXh0LWFmdGVyJywgJ2NoYW5nZWQnLCAnZXJyb3InLCAnY2hlY2stZm9ybS1zdWJtaXNzaW9uJywgJ3JlZGlyZWN0JywgJ2xvY2F0aW9uLWNoYW5nZWQnXSxcblxuICAgIF9sYXN0X3JvdXRlOiBudWxsLFxuICAgIF9sb2NhdGlvbl9wcm94eTogbnVsbCxcbiAgICBfcnVubmluZzogZmFsc2UsXG5cbiAgICAvLyBEZWZpbmVzIHdoYXQgZWxlbWVudCB0aGUgYXBwbGljYXRpb24gaXMgYm91bmQgdG8uIFByb3ZpZGUgYSBzZWxlY3RvclxuICAgIC8vIChwYXJzZWFibGUgYnkgYGpRdWVyeSgpYCkgYW5kIHRoaXMgd2lsbCBiZSB1c2VkIGJ5IGAkZWxlbWVudCgpYFxuICAgIGVsZW1lbnRfc2VsZWN0b3I6ICdib2R5JyxcblxuICAgIC8vIFdoZW4gc2V0IHRvIHRydWUsIGxvZ3MgYWxsIG9mIHRoZSBkZWZhdWx0IGV2ZW50cyB1c2luZyBgbG9nKClgXG4gICAgZGVidWc6IGZhbHNlLFxuXG4gICAgLy8gV2hlbiBzZXQgdG8gdHJ1ZSwgYW5kIHRoZSBlcnJvcigpIGhhbmRsZXIgaXMgbm90IG92ZXJyaWRkZW4sIHdpbGwgYWN0dWFsbHlcbiAgICAvLyByYWlzZSBKUyBlcnJvcnMgaW4gcm91dGVzICg1MDApIGFuZCB3aGVuIHJvdXRlcyBjYW4ndCBiZSBmb3VuZCAoNDA0KVxuICAgIHJhaXNlX2Vycm9yczogZmFsc2UsXG5cbiAgICAvLyBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgdGhhdCB0aGUgVVJMIGlzIHF1ZXJpZWQgZm9yIGNoYW5nZXNcbiAgICBydW5faW50ZXJ2YWxfZXZlcnk6IDUwLFxuXG4gICAgLy8gaWYgdXNpbmcgdGhlIGBEZWZhdWx0TG9jYXRpb25Qcm94eWAgc2V0dGluZyB0aGlzIHRvIHRydWUgd2lsbCBmb3JjZSB0aGUgYXBwIHRvIHVzZVxuICAgIC8vIHRyYWRpdGlvbmFsIGhhc2ggYmFzZWQgcm91dGluZyBhcyBvcHBvc2VkIHRvIHRoZSBuZXcgSFRNTDUgUHVzaFN0YXRlIHN1cHBvcnRcbiAgICBkaXNhYmxlX3B1c2hfc3RhdGU6IGZhbHNlLFxuXG4gICAgLy8gVGhlIGRlZmF1bHQgdGVtcGxhdGUgZW5naW5lIHRvIHVzZSB3aGVuIHVzaW5nIGBwYXJ0aWFsKClgIGluIGFuXG4gICAgLy8gYEV2ZW50Q29udGV4dGAuIGB0ZW1wbGF0ZV9lbmdpbmVgIGNhbiBlaXRoZXIgYmUgYSBzdHJpbmcgdGhhdFxuICAgIC8vIGNvcnJlc3BvbmRzIHRvIHRoZSBuYW1lIG9mIGEgbWV0aG9kL2hlbHBlciBvbiBFdmVudENvbnRleHQgb3IgaXQgY2FuIGJlIGEgZnVuY3Rpb25cbiAgICAvLyB0aGF0IHRha2VzIHR3byBhcmd1bWVudHMsIHRoZSBjb250ZW50IG9mIHRoZSB1bnJlbmRlcmVkIHBhcnRpYWwgYW5kIGFuIG9wdGlvbmFsXG4gICAgLy8gSlMgb2JqZWN0IHRoYXQgY29udGFpbnMgaW50ZXJwb2xhdGlvbiBkYXRhLiBUZW1wbGF0ZSBlbmdpbmUgaXMgb25seSBjYWxsZWQvcmVmZXJyZWRcbiAgICAvLyB0byBpZiB0aGUgZXh0ZW5zaW9uIG9mIHRoZSBwYXJ0aWFsIGlzIG51bGwgb3IgdW5rbm93bi4gU2VlIGBwYXJ0aWFsKClgXG4gICAgLy8gZm9yIG1vcmUgaW5mb3JtYXRpb25cbiAgICB0ZW1wbGF0ZV9lbmdpbmU6IG51bGwsXG5cbiAgICAvLyAvLz0+IFNhbW15LkFwcGxpY2F0aW9uOiBib2R5XG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdTYW1teS5BcHBsaWNhdGlvbjonICsgdGhpcy5lbGVtZW50X3NlbGVjdG9yO1xuICAgIH0sXG5cbiAgICAvLyByZXR1cm5zIGEgalF1ZXJ5IG9iamVjdCBvZiB0aGUgQXBwbGljYXRpb25zIGJvdW5kIGVsZW1lbnQuXG4gICAgJGVsZW1lbnQ6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3IgPyAkKHRoaXMuZWxlbWVudF9zZWxlY3RvcikuZmluZChzZWxlY3RvcikgOiAkKHRoaXMuZWxlbWVudF9zZWxlY3Rvcik7XG4gICAgfSxcblxuICAgIC8vIGB1c2UoKWAgaXMgdGhlIGVudHJ5IHBvaW50IGZvciBpbmNsdWRpbmcgU2FtbXkgcGx1Z2lucy5cbiAgICAvLyBUaGUgZmlyc3QgYXJndW1lbnQgdG8gdXNlIHNob3VsZCBiZSBhIGZ1bmN0aW9uKCkgdGhhdCBpcyBldmFsdWF0ZWRcbiAgICAvLyBpbiB0aGUgY29udGV4dCBvZiB0aGUgY3VycmVudCBhcHBsaWNhdGlvbiwganVzdCBsaWtlIHRoZSBgYXBwX2Z1bmN0aW9uYFxuICAgIC8vIGFyZ3VtZW50IHRvIHRoZSBgU2FtbXkuQXBwbGljYXRpb25gIGNvbnN0cnVjdG9yLlxuICAgIC8vXG4gICAgLy8gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwYXNzZWQgdG8gdGhlIGFwcCBmdW5jdGlvbiBzZXF1ZW50aWFsbHkuXG4gICAgLy9cbiAgICAvLyBGb3IgbXVjaCBtb3JlIGRldGFpbCBhYm91dCBwbHVnaW5zLCBjaGVjayBvdXQ6XG4gICAgLy8gW2h0dHA6Ly9zYW1teWpzLm9yZy9kb2NzL3BsdWdpbnNdKGh0dHA6Ly9zYW1teWpzLm9yZy9kb2NzL3BsdWdpbnMpXG4gICAgLy9cbiAgICAvLyAjIyMgRXhhbXBsZVxuICAgIC8vXG4gICAgLy8gICAgICB2YXIgTXlQbHVnaW4gPSBmdW5jdGlvbihhcHAsIHByZXBlbmQpIHtcbiAgICAvL1xuICAgIC8vICAgICAgICB0aGlzLmhlbHBlcnMoe1xuICAgIC8vICAgICAgICAgIG15aGVscGVyOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgLy8gICAgICAgICAgICBhbGVydChwcmVwZW5kICsgXCIgXCIgKyB0ZXh0KTtcbiAgICAvLyAgICAgICAgICB9XG4gICAgLy8gICAgICAgIH0pO1xuICAgIC8vXG4gICAgLy8gICAgICB9O1xuICAgIC8vXG4gICAgLy8gICAgICB2YXIgYXBwID0gJC5zYW1teShmdW5jdGlvbigpIHtcbiAgICAvL1xuICAgIC8vICAgICAgICB0aGlzLnVzZShNeVBsdWdpbiwgJ1RoaXMgaXMgbXkgcGx1Z2luJyk7XG4gICAgLy9cbiAgICAvLyAgICAgICAgdGhpcy5nZXQoJyMvJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICAgICAgdGhpcy5teWhlbHBlcignYW5kIGRvbnQgeW91IGZvcmdldCBpdCEnKTtcbiAgICAvLyAgICAgICAgICAvLz0+IEFsZXJ0czogVGhpcyBpcyBteSBwbHVnaW4gYW5kIGRvbnQgeW91IGZvcmdldCBpdCFcbiAgICAvLyAgICAgICAgfSk7XG4gICAgLy9cbiAgICAvLyAgICAgIH0pO1xuICAgIC8vXG4gICAgLy8gSWYgcGx1Z2luIGlzIHBhc3NlZCBhcyBhIHN0cmluZyBpdCBhc3N1bWVzIHlvdXIgYXJlIHRyeWluZyB0byBsb2FkXG4gICAgLy8gU2FtbXkuXCJQbHVnaW5cIi4gVGhpcyBpcyB0aGUgcHJlZmVycmVkIHdheSBvZiBsb2FkaW5nIGNvcmUgU2FtbXkgcGx1Z2luc1xuICAgIC8vIGFzIGl0IGFsbG93cyBmb3IgYmV0dGVyIGVycm9yLW1lc3NhZ2luZy5cbiAgICAvL1xuICAgIC8vICMjIyBFeGFtcGxlXG4gICAgLy9cbiAgICAvLyAgICAgICQuc2FtbXkoZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICAgIHRoaXMudXNlKCdNdXN0YWNoZScpOyAvLz0+IFNhbW15Lk11c3RhY2hlXG4gICAgLy8gICAgICAgIHRoaXMudXNlKCdTdG9yYWdlJyk7IC8vPT4gU2FtbXkuU3RvcmFnZVxuICAgIC8vICAgICAgfSk7XG4gICAgLy9cbiAgICB1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gZmxhdHRlbiB0aGUgYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IF9tYWtlQXJyYXkoYXJndW1lbnRzKSxcbiAgICAgICAgICBwbHVnaW4gPSBhcmdzLnNoaWZ0KCksXG4gICAgICAgICAgcGx1Z2luX25hbWUgPSBwbHVnaW4gfHwgJyc7XG4gICAgICB0cnkge1xuICAgICAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgICAgIGlmICh0eXBlb2YgcGx1Z2luID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcGx1Z2luX25hbWUgPSAnU2FtbXkuJyArIHBsdWdpbjtcbiAgICAgICAgICBwbHVnaW4gPSBTYW1teVtwbHVnaW5dO1xuICAgICAgICB9XG4gICAgICAgIHBsdWdpbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aGlzLmVycm9yKFwiUGx1Z2luIEVycm9yOiBjYWxsZWQgdXNlKCkgYnV0IHBsdWdpbiAoXCIgKyBwbHVnaW5fbmFtZS50b1N0cmluZygpICsgXCIpIGlzIG5vdCBkZWZpbmVkXCIsIGUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFfaXNGdW5jdGlvbihwbHVnaW4pKSB7XG4gICAgICAgICAgdGhpcy5lcnJvcihcIlBsdWdpbiBFcnJvcjogY2FsbGVkIHVzZSgpIGJ1dCAnXCIgKyBwbHVnaW5fbmFtZS50b1N0cmluZygpICsgXCInIGlzIG5vdCBhIGZ1bmN0aW9uXCIsIGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZXJyb3IoXCJQbHVnaW4gRXJyb3JcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBTZXRzIHRoZSBsb2NhdGlvbiBwcm94eSBmb3IgdGhlIGN1cnJlbnQgYXBwLiBCeSBkZWZhdWx0IHRoaXMgaXMgc2V0IHRvXG4gICAgLy8gYSBuZXcgYFNhbW15LkRlZmF1bHRMb2NhdGlvblByb3h5YCBvbiBpbml0aWFsaXphdGlvbi4gSG93ZXZlciwgeW91IGNhbiBzZXRcbiAgICAvLyB0aGUgbG9jYXRpb25fcHJveHkgaW5zaWRlIHlvdSdyZSBhcHAgZnVuY3Rpb24gdG8gZ2l2ZSB5b3VyIGFwcCBhIGN1c3RvbVxuICAgIC8vIGxvY2F0aW9uIG1lY2hhbmlzbS4gU2VlIGBTYW1teS5EZWZhdWx0TG9jYXRpb25Qcm94eWAgYW5kIGBTYW1teS5EYXRhTG9jYXRpb25Qcm94eWBcbiAgICAvLyBmb3IgZXhhbXBsZXMuXG4gICAgLy9cbiAgICAvLyBgc2V0TG9jYXRpb25Qcm94eSgpYCB0YWtlcyBhbiBpbml0aWFsaXplZCBsb2NhdGlvbiBwcm94eS5cbiAgICAvL1xuICAgIC8vICMjIyBFeGFtcGxlXG4gICAgLy9cbiAgICAvLyAgICAgICAgLy8gdG8gYmluZCB0byBkYXRhIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgaGFzaDtcbiAgICAvLyAgICAgICAgdmFyIGFwcCA9ICQuc2FtbXkoZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICAgICAgdGhpcy5zZXRMb2NhdGlvblByb3h5KG5ldyBTYW1teS5EYXRhTG9jYXRpb25Qcm94eSh0aGlzKSk7XG4gICAgLy8gICAgICAgIH0pO1xuICAgIC8vXG4gICAgc2V0TG9jYXRpb25Qcm94eTogZnVuY3Rpb24obmV3X3Byb3h5KSB7XG4gICAgICB2YXIgb3JpZ2luYWxfcHJveHkgPSB0aGlzLl9sb2NhdGlvbl9wcm94eTtcbiAgICAgIHRoaXMuX2xvY2F0aW9uX3Byb3h5ID0gbmV3X3Byb3h5O1xuICAgICAgaWYgKHRoaXMuaXNSdW5uaW5nKCkpIHtcbiAgICAgICAgaWYgKG9yaWdpbmFsX3Byb3h5KSB7XG4gICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYWxyZWFkeSBhIGxvY2F0aW9uIHByb3h5LCB1bmJpbmQgaXQuXG4gICAgICAgICAgb3JpZ2luYWxfcHJveHkudW5iaW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbG9jYXRpb25fcHJveHkuYmluZCgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBwcm92aWRlIGxvZygpIG92ZXJyaWRlIGZvciBpbnNpZGUgYW4gYXBwIHRoYXQgaW5jbHVkZXMgdGhlIHJlbGV2YW50IGFwcGxpY2F0aW9uIGVsZW1lbnRfc2VsZWN0b3JcbiAgICBsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgU2FtbXkubG9nLmFwcGx5KFNhbW15LCBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFt0aGlzLmVsZW1lbnRfc2VsZWN0b3JdLGFyZ3VtZW50cykpO1xuICAgIH0sXG5cblxuICAgIC8vIGByb3V0ZSgpYCBpcyB0aGUgbWFpbiBtZXRob2QgZm9yIGRlZmluaW5nIHJvdXRlcyB3aXRoaW4gYW4gYXBwbGljYXRpb24uXG4gICAgLy8gRm9yIGdyZWF0IGRldGFpbCBvbiByb3V0ZXMsIGNoZWNrIG91dDpcbiAgICAvLyBbaHR0cDovL3NhbW15anMub3JnL2RvY3Mvcm91dGVzXShodHRwOi8vc2FtbXlqcy5vcmcvZG9jcy9yb3V0ZXMpXG4gICAgLy9cbiAgICAvLyBUaGlzIG1ldGhvZCBhbHNvIGhhcyBhbGlhc2VzIGZvciBlYWNoIG9mIHRoZSBkaWZmZXJlbnQgdmVyYnMgKGVnLiBgZ2V0KClgLCBgcG9zdCgpYCwgZXRjLilcbiAgICAvL1xuICAgIC8vICMjIyBBcmd1bWVudHNcbiAgICAvL1xuICAgIC8vICogYHZlcmJgIEEgU3RyaW5nIGluIHRoZSBzZXQgb2YgUk9VVEVfVkVSQlMgb3IgJ2FueScuICdhbnknIHdpbGwgYWRkIHJvdXRlcyBmb3IgZWFjaFxuICAgIC8vICAgIG9mIHRoZSBST1VURV9WRVJCUy4gSWYgb25seSB0d28gYXJndW1lbnRzIGFyZSBwYXNzZWQsXG4gICAgLy8gICAgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIHRoZSBwYXRoLCB0aGUgc2Vjb25kIGlzIHRoZSBjYWxsYmFjayBhbmQgdGhlIHZlcmJcbiAgICAvLyAgICBpcyBhc3N1bWVkIHRvIGJlICdhbnknLlxuICAgIC8vICogYHBhdGhgIEEgUmVnZXhwIG9yIGEgU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcGF0aCB0byBtYXRjaCB0byBpbnZva2UgdGhpcyB2ZXJiLlxuICAgIC8vICogYGNhbGxiYWNrYCBBIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkL2V2YWx1YXRlZCB3aGVuIHRoZSByb3V0ZSBpcyBydW4gc2VlOiBgcnVuUm91dGUoKWAuXG4gICAgLy8gICAgSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBwYXNzIGEgc3RyaW5nIGFzIHRoZSBjYWxsYmFjaywgd2hpY2ggaXMgbG9va2VkIHVwIGFzIHRoZSBuYW1lXG4gICAgLy8gICAgb2YgYSBtZXRob2Qgb24gdGhlIGFwcGxpY2F0aW9uLlxuICAgIC8vXG4gICAgcm91dGU6IGZ1bmN0aW9uKHZlcmIsIHBhdGgpIHtcbiAgICAgIHZhciBhcHAgPSB0aGlzLCBwYXJhbV9uYW1lcyA9IFtdLCBhZGRfcm91dGUsIHBhdGhfbWF0Y2gsIGNhbGxiYWNrID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpO1xuXG4gICAgICAvLyBpZiB0aGUgbWV0aG9kIHNpZ25hdHVyZSBpcyBqdXN0IChwYXRoLCBjYWxsYmFjaylcbiAgICAgIC8vIGFzc3VtZSB0aGUgdmVyYiBpcyAnYW55J1xuICAgICAgaWYgKGNhbGxiYWNrLmxlbmd0aCA9PT0gMCAmJiBfaXNGdW5jdGlvbihwYXRoKSkge1xuICAgICAgICBjYWxsYmFjayA9IFtwYXRoXTtcbiAgICAgICAgcGF0aCA9IHZlcmI7XG4gICAgICAgIHZlcmIgPSAnYW55JztcbiAgICAgIH1cblxuICAgICAgdmVyYiA9IHZlcmIudG9Mb3dlckNhc2UoKTsgLy8gZW5zdXJlIHZlcmIgaXMgbG93ZXIgY2FzZVxuXG4gICAgICAvLyBpZiBwYXRoIGlzIGEgc3RyaW5nIHR1cm4gaXQgaW50byBhIHJlZ2V4XG4gICAgICBpZiAocGF0aC5jb25zdHJ1Y3RvciA9PSBTdHJpbmcpIHtcblxuICAgICAgICAvLyBOZWVkcyB0byBiZSBleHBsaWNpdGx5IHNldCBiZWNhdXNlIElFIHdpbGwgbWFpbnRhaW4gdGhlIGluZGV4IHVubGVzcyBOVUxMIGlzIHJldHVybmVkLFxuICAgICAgICAvLyB3aGljaCBtZWFucyB0aGF0IHdpdGggdHdvIGNvbnNlY3V0aXZlIHJvdXRlcyB0aGF0IGNvbnRhaW4gcGFyYW1zLCB0aGUgc2Vjb25kIHNldCBvZiBwYXJhbXMgd2lsbCBub3QgYmUgZm91bmQgYW5kIGVuZCB1cCBpbiBzcGxhdCBpbnN0ZWFkIG9mIHBhcmFtc1xuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9Db3JlX0phdmFTY3JpcHRfMS41X1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9SZWdFeHAvbGFzdEluZGV4XG4gICAgICAgIFBBVEhfTkFNRV9NQVRDSEVSLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgICAgLy8gZmluZCB0aGUgbmFtZXNcbiAgICAgICAgd2hpbGUgKChwYXRoX21hdGNoID0gUEFUSF9OQU1FX01BVENIRVIuZXhlYyhwYXRoKSkgIT09IG51bGwpIHtcbiAgICAgICAgICBwYXJhbV9uYW1lcy5wdXNoKHBhdGhfbWF0Y2hbMV0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlcGxhY2Ugd2l0aCB0aGUgcGF0aCByZXBsYWNlbWVudFxuICAgICAgICBwYXRoID0gbmV3IFJlZ0V4cChwYXRoLnJlcGxhY2UoUEFUSF9OQU1FX01BVENIRVIsIFBBVEhfUkVQTEFDRVIpICsgXCIkXCIpO1xuICAgICAgfVxuICAgICAgLy8gbG9va3VwIGNhbGxiYWNrc1xuICAgICAgJC5lYWNoKGNhbGxiYWNrLGZ1bmN0aW9uKGksY2Ipe1xuICAgICAgICBpZiAodHlwZW9mKGNiKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBjYWxsYmFja1tpXSA9IGFwcFtjYl07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBhZGRfcm91dGUgPSBmdW5jdGlvbih3aXRoX3ZlcmIpIHtcbiAgICAgICAgdmFyIHIgPSB7dmVyYjogd2l0aF92ZXJiLCBwYXRoOiBwYXRoLCBjYWxsYmFjazogY2FsbGJhY2ssIHBhcmFtX25hbWVzOiBwYXJhbV9uYW1lc307XG4gICAgICAgIC8vIGFkZCByb3V0ZSB0byByb3V0ZXMgYXJyYXlcbiAgICAgICAgYXBwLnJvdXRlc1t3aXRoX3ZlcmJdID0gYXBwLnJvdXRlc1t3aXRoX3ZlcmJdIHx8IFtdO1xuICAgICAgICAvLyBwbGFjZSByb3V0ZXMgaW4gb3JkZXIgb2YgZGVmaW5pdGlvblxuICAgICAgICBhcHAucm91dGVzW3dpdGhfdmVyYl0ucHVzaChyKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh2ZXJiID09PSAnYW55Jykge1xuICAgICAgICAkLmVhY2godGhpcy5ST1VURV9WRVJCUywgZnVuY3Rpb24oaSwgdikgeyBhZGRfcm91dGUodik7IH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkX3JvdXRlKHZlcmIpO1xuICAgICAgfVxuXG4gICAgICAvLyByZXR1cm4gdGhlIGFwcFxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIEFsaWFzIGZvciByb3V0ZSgnZ2V0JywgLi4uKVxuICAgIGdldDogX3JvdXRlV3JhcHBlcignZ2V0JyksXG5cbiAgICAvLyBBbGlhcyBmb3Igcm91dGUoJ3Bvc3QnLCAuLi4pXG4gICAgcG9zdDogX3JvdXRlV3JhcHBlcigncG9zdCcpLFxuXG4gICAgLy8gQWxpYXMgZm9yIHJvdXRlKCdwdXQnLCAuLi4pXG4gICAgcHV0OiBfcm91dGVXcmFwcGVyKCdwdXQnKSxcblxuICAgIC8vIEFsaWFzIGZvciByb3V0ZSgnZGVsZXRlJywgLi4uKVxuICAgIGRlbDogX3JvdXRlV3JhcHBlcignZGVsZXRlJyksXG5cbiAgICAvLyBBbGlhcyBmb3Igcm91dGUoJ2FueScsIC4uLilcbiAgICBhbnk6IF9yb3V0ZVdyYXBwZXIoJ2FueScpLFxuXG4gICAgLy8gYG1hcFJvdXRlc2AgdGFrZXMgYW4gYXJyYXkgb2YgYXJyYXlzLCBlYWNoIGFycmF5IGJlaW5nIHBhc3NlZCB0byByb3V0ZSgpXG4gICAgLy8gYXMgYXJndW1lbnRzLCB0aGlzIGFsbG93cyBmb3IgbWFzcyBkZWZpbml0aW9uIG9mIHJvdXRlcy4gQW5vdGhlciBiZW5lZml0IGlzXG4gICAgLy8gdGhpcyBtYWtlcyBpdCBwb3NzaWJsZS9lYXNpZXIgdG8gbG9hZCByb3V0ZXMgdmlhIHJlbW90ZSBKU09OLlxuICAgIC8vXG4gICAgLy8gIyMjIEV4YW1wbGVcbiAgICAvL1xuICAgIC8vICAgICAgdmFyIGFwcCA9ICQuc2FtbXkoZnVuY3Rpb24oKSB7XG4gICAgLy9cbiAgICAvLyAgICAgICAgdGhpcy5tYXBSb3V0ZXMoW1xuICAgIC8vICAgICAgICAgICAgWydnZXQnLCAnIy8nLCBmdW5jdGlvbigpIHsgdGhpcy5sb2coJ2luZGV4Jyk7IH1dLFxuICAgIC8vICAgICAgICAgICAgLy8gc3RyaW5ncyBpbiBjYWxsYmFja3MgYXJlIGxvb2tlZCB1cCBhcyBtZXRob2RzIG9uIHRoZSBhcHBcbiAgICAvLyAgICAgICAgICAgIFsncG9zdCcsICcjL2NyZWF0ZScsICdhZGRVc2VyJ10sXG4gICAgLy8gICAgICAgICAgICAvLyBObyB2ZXJiIGFzc3VtZXMgJ2FueScgYXMgdGhlIHZlcmJcbiAgICAvLyAgICAgICAgICAgIFsvZG93aGF0ZXZlci8sIGZ1bmN0aW9uKCkgeyB0aGlzLmxvZyh0aGlzLnZlcmIsIHRoaXMucGF0aCl9XTtcbiAgICAvLyAgICAgICAgICBdKTtcbiAgICAvLyAgICAgIH0pO1xuICAgIC8vXG4gICAgbWFwUm91dGVzOiBmdW5jdGlvbihyb3V0ZV9hcnJheSkge1xuICAgICAgdmFyIGFwcCA9IHRoaXM7XG4gICAgICAkLmVhY2gocm91dGVfYXJyYXksIGZ1bmN0aW9uKGksIHJvdXRlX2FyZ3MpIHtcbiAgICAgICAgYXBwLnJvdXRlLmFwcGx5KGFwcCwgcm91dGVfYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBBIHVuaXF1ZSBldmVudCBuYW1lc3BhY2UgZGVmaW5lZCBwZXIgYXBwbGljYXRpb24uXG4gICAgLy8gQWxsIGV2ZW50cyBib3VuZCB3aXRoIGBiaW5kKClgIGFyZSBhdXRvbWF0aWNhbGx5IGJvdW5kIHdpdGhpbiB0aGlzIHNwYWNlLlxuICAgIGV2ZW50TmFtZXNwYWNlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbJ3NhbW15LWFwcCcsIHRoaXMubmFtZXNwYWNlXS5qb2luKCctJyk7XG4gICAgfSxcblxuICAgIC8vIFdvcmtzIGp1c3QgbGlrZSBgalF1ZXJ5LmZuLmJpbmQoKWAgd2l0aCBhIGNvdXBsZSBub3RhYmxlIGRpZmZlcmVuY2VzLlxuICAgIC8vXG4gICAgLy8gKiBJdCBiaW5kcyBhbGwgZXZlbnRzIHRvIHRoZSBhcHBsaWNhdGlvbiBlbGVtZW50XG4gICAgLy8gKiBBbGwgZXZlbnRzIGFyZSBib3VuZCB3aXRoaW4gdGhlIGBldmVudE5hbWVzcGFjZSgpYFxuICAgIC8vICogRXZlbnRzIGFyZSBub3QgYWN0dWFsbHkgYm91bmQgdW50aWwgdGhlIGFwcGxpY2F0aW9uIGlzIHN0YXJ0ZWQgd2l0aCBgcnVuKClgXG4gICAgLy8gKiBjYWxsYmFja3MgYXJlIGV2YWx1YXRlZCB3aXRoaW4gdGhlIGNvbnRleHQgb2YgYSBTYW1teS5FdmVudENvbnRleHRcbiAgICAvL1xuICAgIGJpbmQ6IGZ1bmN0aW9uKG5hbWUsIGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgYXBwID0gdGhpcztcbiAgICAgIC8vIGJ1aWxkIHRoZSBjYWxsYmFja1xuICAgICAgLy8gaWYgdGhlIGFyaXR5IGlzIDIsIGNhbGxiYWNrIGlzIHRoZSBzZWNvbmQgYXJndW1lbnRcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT0gJ3VuZGVmaW5lZCcpIHsgY2FsbGJhY2sgPSBkYXRhOyB9XG4gICAgICB2YXIgbGlzdGVuZXJfY2FsbGJhY2sgPSAgZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIHB1bGwgb2ZmIHRoZSBjb250ZXh0IGZyb20gdGhlIGFyZ3VtZW50cyB0byB0aGUgY2FsbGJhY2tcbiAgICAgICAgdmFyIGUsIGNvbnRleHQsIGRhdGE7XG4gICAgICAgIGUgICAgICAgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIGRhdGEgICAgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEuY29udGV4dCkge1xuICAgICAgICAgIGNvbnRleHQgPSBkYXRhLmNvbnRleHQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGEuY29udGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0ID0gbmV3IGFwcC5jb250ZXh0X3Byb3RvdHlwZShhcHAsICdiaW5kJywgZS50eXBlLCBkYXRhLCBlLnRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgZS5jbGVhbmVkX3R5cGUgPSBlLnR5cGUucmVwbGFjZShhcHAuZXZlbnROYW1lc3BhY2UoKSwgJycpO1xuICAgICAgICBjYWxsYmFjay5hcHBseShjb250ZXh0LCBbZSwgZGF0YV0pO1xuICAgICAgfTtcblxuICAgICAgLy8gaXQgY291bGQgYmUgdGhhdCB0aGUgYXBwIGVsZW1lbnQgZG9lc250IGV4aXN0IHlldFxuICAgICAgLy8gc28gYXR0YWNoIHRvIHRoZSBsaXN0ZW5lcnMgYXJyYXkgYW5kIHRoZW4gcnVuKClcbiAgICAgIC8vIHdpbGwgYWN0dWFsbHkgYmluZCB0aGUgZXZlbnQuXG4gICAgICBpZiAoIXRoaXMubGlzdGVuZXJzW25hbWVdKSB7IHRoaXMubGlzdGVuZXJzW25hbWVdID0gW107IH1cbiAgICAgIHRoaXMubGlzdGVuZXJzW25hbWVdLnB1c2gobGlzdGVuZXJfY2FsbGJhY2spO1xuICAgICAgaWYgKHRoaXMuaXNSdW5uaW5nKCkpIHtcbiAgICAgICAgLy8gaWYgdGhlIGFwcCBpcyBydW5uaW5nXG4gICAgICAgIC8vICphY3R1YWxseSogYmluZCB0aGUgZXZlbnQgdG8gdGhlIGFwcCBlbGVtZW50XG4gICAgICAgIHRoaXMuX2xpc3RlbihuYW1lLCBsaXN0ZW5lcl9jYWxsYmFjayk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gVHJpZ2dlcnMgY3VzdG9tIGV2ZW50cyBkZWZpbmVkIHdpdGggYGJpbmQoKWBcbiAgICAvL1xuICAgIC8vICMjIyBBcmd1bWVudHNcbiAgICAvL1xuICAgIC8vICogYG5hbWVgIFRoZSBuYW1lIG9mIHRoZSBldmVudC4gQXV0b21hdGljYWxseSBwcmVmaXhlZCB3aXRoIHRoZSBgZXZlbnROYW1lc3BhY2UoKWBcbiAgICAvLyAqIGBkYXRhYCBBbiBvcHRpb25hbCBPYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHRoZSBib3VuZCBjYWxsYmFjay5cbiAgICAvLyAqIGBjb250ZXh0YCBBbiBvcHRpb25hbCBjb250ZXh0L09iamVjdCBpbiB3aGljaCB0byBleGVjdXRlIHRoZSBib3VuZCBjYWxsYmFjay5cbiAgICAvLyAgIElmIG5vIGNvbnRleHQgaXMgc3VwcGxpZWQgYSB0aGUgY29udGV4dCBpcyBhIG5ldyBgU2FtbXkuRXZlbnRDb250ZXh0YFxuICAgIC8vXG4gICAgdHJpZ2dlcjogZnVuY3Rpb24obmFtZSwgZGF0YSkge1xuICAgICAgdGhpcy4kZWxlbWVudCgpLnRyaWdnZXIoW25hbWUsIHRoaXMuZXZlbnROYW1lc3BhY2UoKV0uam9pbignLicpLCBbZGF0YV0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIFJlcnVucyB0aGUgY3VycmVudCByb3V0ZVxuICAgIHJlZnJlc2g6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5sYXN0X2xvY2F0aW9uID0gbnVsbDtcbiAgICAgIHRoaXMudHJpZ2dlcignbG9jYXRpb24tY2hhbmdlZCcpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIFRha2VzIGEgc2luZ2xlIGNhbGxiYWNrIHRoYXQgaXMgcHVzaGVkIG9uIHRvIGEgc3RhY2suXG4gICAgLy8gQmVmb3JlIGFueSByb3V0ZSBpcyBydW4sIHRoZSBjYWxsYmFja3MgYXJlIGV2YWx1YXRlZCBpbiBvcmRlciB3aXRoaW5cbiAgICAvLyB0aGUgY3VycmVudCBgU2FtbXkuRXZlbnRDb250ZXh0YFxuICAgIC8vXG4gICAgLy8gSWYgYW55IG9mIHRoZSBjYWxsYmFja3MgZXhwbGljaXRseSByZXR1cm4gZmFsc2UsIGV4ZWN1dGlvbiBvZiBhbnlcbiAgICAvLyBmdXJ0aGVyIGNhbGxiYWNrcyBhbmQgdGhlIHJvdXRlIGl0c2VsZiBpcyBoYWx0ZWQuXG4gICAgLy9cbiAgICAvLyBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNldCBvZiBvcHRpb25zIHRoYXQgd2lsbCBkZWZpbmUgd2hlbiB0byBydW4gdGhpc1xuICAgIC8vIGJlZm9yZSBiYXNlZCBvbiB0aGUgcm91dGUgaXQgcHJvY2VlZHMuXG4gICAgLy9cbiAgICAvLyAjIyMgRXhhbXBsZVxuICAgIC8vXG4gICAgLy8gICAgICB2YXIgYXBwID0gJC5zYW1teShmdW5jdGlvbigpIHtcbiAgICAvL1xuICAgIC8vICAgICAgICAvLyB3aWxsIHJ1biBhdCAjL3JvdXRlIGJ1dCBub3QgYXQgIy9cbiAgICAvLyAgICAgICAgdGhpcy5iZWZvcmUoJyMvcm91dGUnLCBmdW5jdGlvbigpIHtcbiAgICAvLyAgICAgICAgICAvLy4uLlxuICAgIC8vICAgICAgICB9KTtcbiAgICAvL1xuICAgIC8vICAgICAgICAvLyB3aWxsIHJ1biBhdCAjLyBidXQgbm90IGF0ICMvcm91dGVcbiAgICAvLyAgICAgICAgdGhpcy5iZWZvcmUoe2V4Y2VwdDoge3BhdGg6ICcjL3JvdXRlJ319LCBmdW5jdGlvbigpIHtcbiAgICAvLyAgICAgICAgICB0aGlzLmxvZygnbm90IGJlZm9yZSAjL3JvdXRlJyk7XG4gICAgLy8gICAgICAgIH0pO1xuICAgIC8vXG4gICAgLy8gICAgICAgIHRoaXMuZ2V0KCcjLycsIGZ1bmN0aW9uKCkge30pO1xuICAgIC8vXG4gICAgLy8gICAgICAgIHRoaXMuZ2V0KCcjL3JvdXRlJywgZnVuY3Rpb24oKSB7fSk7XG4gICAgLy9cbiAgICAvLyAgICAgIH0pO1xuICAgIC8vXG4gICAgLy8gU2VlIGBjb250ZXh0TWF0Y2hlc09wdGlvbnMoKWAgZm9yIGEgZnVsbCBsaXN0IG9mIHN1cHBvcnRlZCBvcHRpb25zXG4gICAgLy9cbiAgICBiZWZvcmU6IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoX2lzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG4gICAgICB0aGlzLmJlZm9yZXMucHVzaChbb3B0aW9ucywgY2FsbGJhY2tdKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBBIHNob3J0Y3V0IGZvciBiaW5kaW5nIGEgY2FsbGJhY2sgdG8gYmUgcnVuIGFmdGVyIGEgcm91dGUgaXMgZXhlY3V0ZWQuXG4gICAgLy8gQWZ0ZXIgY2FsbGJhY2tzIGhhdmUgbm8gZ3VhcnVudGVlZCBvcmRlci5cbiAgICBhZnRlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLmJpbmQoJ2V2ZW50LWNvbnRleHQtYWZ0ZXInLCBjYWxsYmFjayk7XG4gICAgfSxcblxuXG4gICAgLy8gQWRkcyBhbiBhcm91bmQgZmlsdGVyIHRvIHRoZSBhcHBsaWNhdGlvbi4gYXJvdW5kIGZpbHRlcnMgYXJlIGZ1bmN0aW9uc1xuICAgIC8vIHRoYXQgdGFrZSBhIHNpbmdsZSBhcmd1bWVudCBgY2FsbGJhY2tgIHdoaWNoIGlzIHRoZSBlbnRpcmUgcm91dGVcbiAgICAvLyBleGVjdXRpb24gcGF0aCB3cmFwcGVkIHVwIGluIGEgY2xvc3VyZS4gVGhpcyBtZWFucyB5b3UgY2FuIGRlY2lkZSB3aGV0aGVyXG4gICAgLy8gb3Igbm90IHRvIHByb2NlZWQgd2l0aCBleGVjdXRpb24gYnkgbm90IGludm9raW5nIGBjYWxsYmFja2Agb3IsXG4gICAgLy8gbW9yZSB1c2VmdWxseSB3cmFwcGluZyBjYWxsYmFjayBpbnNpZGUgdGhlIHJlc3VsdCBvZiBhbiBhc3luY2hyb25vdXMgZXhlY3V0aW9uLlxuICAgIC8vXG4gICAgLy8gIyMjIEV4YW1wbGVcbiAgICAvL1xuICAgIC8vIFRoZSBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgYXJvdW5kKCkgaXMgY2FsbGluZyBhIF9wb3NzaWJseV8gYXN5bmMgZnVuY3Rpb25cbiAgICAvLyBhbmQgZXhlY3V0aW5nIHRoZSByb3V0ZSB3aXRoaW4gdGhlIGZ1bmN0aW9ucyBjYWxsYmFjazpcbiAgICAvL1xuICAgIC8vICAgICAgdmFyIGFwcCA9ICQuc2FtbXkoZnVuY3Rpb24oKSB7XG4gICAgLy9cbiAgICAvLyAgICAgICAgdmFyIGN1cnJlbnRfdXNlciA9IGZhbHNlO1xuICAgIC8vXG4gICAgLy8gICAgICAgIGZ1bmN0aW9uIGNoZWNrTG9nZ2VkSW4oY2FsbGJhY2spIHtcbiAgICAvLyAgICAgICAgICAvLyAvc2Vzc2lvbiByZXR1cm5zIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgbG9nZ2VkIGluIHVzZXJcbiAgICAvLyAgICAgICAgICAvLyBvciBhbiBlbXB0eSBvYmplY3RcbiAgICAvLyAgICAgICAgICBpZiAoIWN1cnJlbnRfdXNlcikge1xuICAgIC8vICAgICAgICAgICAgJC5nZXRKU09OKCcvc2Vzc2lvbicsIGZ1bmN0aW9uKGpzb24pIHtcbiAgICAvLyAgICAgICAgICAgICAgaWYgKGpzb24ubG9naW4pIHtcbiAgICAvLyAgICAgICAgICAgICAgICAvLyBzaG93IHRoZSB1c2VyIGFzIGxvZ2dlZCBpblxuICAgIC8vICAgICAgICAgICAgICAgIGN1cnJlbnRfdXNlciA9IGpzb247XG4gICAgLy8gICAgICAgICAgICAgICAgLy8gZXhlY3V0ZSB0aGUgcm91dGUgcGF0aFxuICAgIC8vICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgLy8gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICAgICAgICAgLy8gc2hvdyB0aGUgdXNlciBhcyBub3QgbG9nZ2VkIGluXG4gICAgLy8gICAgICAgICAgICAgICAgY3VycmVudF91c2VyID0gZmFsc2U7XG4gICAgLy8gICAgICAgICAgICAgICAgLy8gdGhlIGNvbnRleHQgb2YgYXJvdW5kRmlsdGVycyBpcyBhbiBFdmVudENvbnRleHRcbiAgICAvLyAgICAgICAgICAgICAgICB0aGlzLnJlZGlyZWN0KCcjL2xvZ2luJyk7XG4gICAgLy8gICAgICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgICAgIH0pO1xuICAgIC8vICAgICAgICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICAgICAvLyBleGVjdXRlIHRoZSByb3V0ZSBwYXRoXG4gICAgLy8gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgIC8vICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgfTtcbiAgICAvL1xuICAgIC8vICAgICAgICB0aGlzLmFyb3VuZChjaGVja0xvZ2dlZEluKTtcbiAgICAvL1xuICAgIC8vICAgICAgfSk7XG4gICAgLy9cbiAgICBhcm91bmQ6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLmFyb3VuZHMucHVzaChjYWxsYmFjayk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gQWRkcyBhIG9uQ29tcGxldGUgZnVuY3Rpb24gdG8gdGhlIGFwcGxpY2F0aW9uLiBvbkNvbXBsZXRlIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWRcbiAgICAvLyBhdCB0aGUgZW5kIG9mIGEgY2hhaW4gb2Ygcm91dGUgY2FsbGJhY2tzLCBpZiB0aGV5IGNhbGwgbmV4dCgpLiBVbmxpa2UgYWZ0ZXIsXG4gICAgLy8gd2hpY2ggaXMgY2FsbGVkIGFzIHNvb24gYXMgdGhlIHJvdXRlIGlzIGNvbXBsZXRlLCBvbkNvbXBsZXRlIGlzIGxpa2UgYSBmaW5hbCBuZXh0KClcbiAgICAvLyBmb3IgYWxsIHJvdXRlcywgYW5kIGlzIHRodXMgcnVuIGFzeW5jaHJvbm91c2x5XG4gICAgLy9cbiAgICAvLyAjIyMgRXhhbXBsZVxuICAgIC8vXG4gICAgLy8gICAgICBhcHAuZ2V0KCcvY2hhaW4nLGZ1bmN0aW9uKGNvbnRleHQsbmV4dCkge1xuICAgIC8vICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGFpbjEnKTtcbiAgICAvLyAgICAgICAgICBuZXh0KCk7XG4gICAgLy8gICAgICB9LGZ1bmN0aW9uKGNvbnRleHQsbmV4dCkge1xuICAgIC8vICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGFpbjInKTtcbiAgICAvLyAgICAgICAgICBuZXh0KCk7XG4gICAgLy8gICAgICB9KTtcbiAgICAvL1xuICAgIC8vICAgICAgYXBwLmdldCgnL2xpbmsnLGZ1bmN0aW9uKGNvbnRleHQsbmV4dCkge1xuICAgIC8vICAgICAgICAgIGNvbnNvbGUubG9nKCdsaW5rMScpO1xuICAgIC8vICAgICAgICAgIG5leHQoKTtcbiAgICAvLyAgICAgIH0sZnVuY3Rpb24oY29udGV4dCxuZXh0KSB7XG4gICAgLy8gICAgICAgICAgY29uc29sZS5sb2coJ2xpbmsyJyk7XG4gICAgLy8gICAgICAgICAgbmV4dCgpO1xuICAgIC8vICAgICAgfSk7XG4gICAgLy9cbiAgICAvLyAgICAgIGFwcC5vbkNvbXBsZXRlKGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICAgICAgIGNvbnNvbGUubG9nKFwiUnVubmluZyBmaW5hbGx5XCIpO1xuICAgIC8vICAgICAgfSk7XG4gICAgLy9cbiAgICAvLyBJZiB5b3UgZ28gdG8gJy9jaGFpbicsIHlvdSB3aWxsIGdldCB0aGUgZm9sbG93aW5nIG1lc3NhZ2VzOlxuICAgIC8vXG4gICAgLy8gICAgICBjaGFpbjFcbiAgICAvLyAgICAgIGNoYWluMlxuICAgIC8vICAgICAgUnVubmluZyBvbkNvbXBsZXRlXG4gICAgLy9cbiAgICAvL1xuICAgIC8vIElmIHlvdSBnbyB0byAvbGluaywgeW91IHdpbGwgZ2V0IHRoZSBmb2xsb3dpbmcgbWVzc2FnZXM6XG4gICAgLy9cbiAgICAvLyAgICAgIGxpbmsxXG4gICAgLy8gICAgICBsaW5rMlxuICAgIC8vICAgICAgUnVubmluZyBvbkNvbXBsZXRlXG4gICAgLy9cbiAgICAvL1xuICAgIC8vIEl0IHJlYWxseSBjb21lcyB0byBwbGF5IHdoZW4gZG9pbmcgYXN5bmNocm9ub3VzOlxuICAgIC8vXG4gICAgLy8gICAgICBhcHAuZ2V0KCcvY2hhaW4nLGZ1bmN0aW9uKGNvbnRleHQsbmV4dCkge1xuICAgIC8vICAgICAgICAkLmdldCgnL215L3VybCcsZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICAgICAgY29uc29sZS5sb2coJ2NoYWluMScpO1xuICAgIC8vICAgICAgICAgIG5leHQoKTtcbiAgICAvLyAgICAgICAgfSk7XG4gICAgLy8gICAgICB9LGZ1bmN0aW9uKGNvbnRleHQsbmV4dCkge1xuICAgIC8vICAgICAgICBjb25zb2xlLmxvZygnY2hhaW4yJyk7XG4gICAgLy8gICAgICAgIG5leHQoKTtcbiAgICAvLyAgICAgIH0pO1xuICAgIC8vXG4gICAgb25Db21wbGV0ZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX29uQ29tcGxldGUgPSBjYWxsYmFjaztcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgY3VycmVudCBhcHBsaWNhdGlvbiBpcyBydW5uaW5nLlxuICAgIGlzUnVubmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnVubmluZztcbiAgICB9LFxuXG4gICAgLy8gSGVscGVycyBleHRlbmRzIHRoZSBFdmVudENvbnRleHQgcHJvdG90eXBlIHNwZWNpZmljIHRvIHRoaXMgYXBwLlxuICAgIC8vIFRoaXMgYWxsb3dzIHlvdSB0byBkZWZpbmUgYXBwIHNwZWNpZmljIGhlbHBlciBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZFxuICAgIC8vIHdoZW5ldmVyIHlvdSdyZSBpbnNpZGUgb2YgYW4gZXZlbnQgY29udGV4dCAodGVtcGxhdGVzLCByb3V0ZXMsIGJpbmQpLlxuICAgIC8vXG4gICAgLy8gIyMjIEV4YW1wbGVcbiAgICAvL1xuICAgIC8vICAgICB2YXIgYXBwID0gJC5zYW1teShmdW5jdGlvbigpIHtcbiAgICAvL1xuICAgIC8vICAgICAgIGhlbHBlcnMoe1xuICAgIC8vICAgICAgICAgdXBjYXNlOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgLy8gICAgICAgICAgcmV0dXJuIHRleHQudG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpO1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICAgIH0pO1xuICAgIC8vXG4gICAgLy8gICAgICAgZ2V0KCcjLycsIGZ1bmN0aW9uKCkgeyB3aXRoKHRoaXMpIHtcbiAgICAvLyAgICAgICAgIC8vIGluc2lkZSBvZiB0aGlzIGNvbnRleHQgSSBjYW4gdXNlIHRoZSBoZWxwZXJzXG4gICAgLy8gICAgICAgICAkKCcjbWFpbicpLmh0bWwodXBjYXNlKCQoJyNtYWluJykudGV4dCgpKTtcbiAgICAvLyAgICAgICB9fSk7XG4gICAgLy9cbiAgICAvLyAgICAgfSk7XG4gICAgLy9cbiAgICAvL1xuICAgIC8vICMjIyBBcmd1bWVudHNcbiAgICAvL1xuICAgIC8vICogYGV4dGVuc2lvbnNgIEFuIG9iamVjdCBjb2xsZWN0aW9uIG9mIGZ1bmN0aW9ucyB0byBleHRlbmQgdGhlIGNvbnRleHQuXG4gICAgLy9cbiAgICBoZWxwZXJzOiBmdW5jdGlvbihleHRlbnNpb25zKSB7XG4gICAgICAkLmV4dGVuZCh0aGlzLmNvbnRleHRfcHJvdG90eXBlLnByb3RvdHlwZSwgZXh0ZW5zaW9ucyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gSGVscGVyIGV4dGVuZHMgdGhlIGV2ZW50IGNvbnRleHQganVzdCBsaWtlIGBoZWxwZXJzKClgIGJ1dCBkb2VzIGl0XG4gICAgLy8gYSBzaW5nbGUgbWV0aG9kIGF0IGEgdGltZS4gVGhpcyBpcyBlc3BlY2lhbGx5IHVzZWZ1bCBmb3IgZHluYW1pY2FsbHkgbmFtZWRcbiAgICAvLyBoZWxwZXJzXG4gICAgLy9cbiAgICAvLyAjIyMgRXhhbXBsZVxuICAgIC8vXG4gICAgLy8gICAgIC8vIFRyaXZpYWwgZXhhbXBsZSB0aGF0IGFkZHMgMyBoZWxwZXIgbWV0aG9kcyB0byB0aGUgY29udGV4dCBkeW5hbWljYWxseVxuICAgIC8vICAgICB2YXIgYXBwID0gJC5zYW1teShmdW5jdGlvbihhcHApIHtcbiAgICAvL1xuICAgIC8vICAgICAgICQuZWFjaChbMSwyLDNdLCBmdW5jdGlvbihpLCBudW0pIHtcbiAgICAvLyAgICAgICAgIGFwcC5oZWxwZXIoJ2hlbHBlcicgKyBudW0sIGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICAgICAgICB0aGlzLmxvZyhcIkknbSBoZWxwZXIgbnVtYmVyIFwiICsgbnVtKTtcbiAgICAvLyAgICAgICAgIH0pO1xuICAgIC8vICAgICAgIH0pO1xuICAgIC8vXG4gICAgLy8gICAgICAgdGhpcy5nZXQoJyMvJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICAgICB0aGlzLmhlbHBlcjIoKTsgLy89PiBJJ20gaGVscGVyIG51bWJlciAyXG4gICAgLy8gICAgICAgfSk7XG4gICAgLy8gICAgIH0pO1xuICAgIC8vXG4gICAgLy8gIyMjIEFyZ3VtZW50c1xuICAgIC8vXG4gICAgLy8gKiBgbmFtZWAgVGhlIG5hbWUgb2YgdGhlIG1ldGhvZFxuICAgIC8vICogYG1ldGhvZGAgVGhlIGZ1bmN0aW9uIHRvIGJlIGFkZGVkIHRvIHRoZSBwcm90b3R5cGUgYXQgYG5hbWVgXG4gICAgLy9cbiAgICBoZWxwZXI6IGZ1bmN0aW9uKG5hbWUsIG1ldGhvZCkge1xuICAgICAgdGhpcy5jb250ZXh0X3Byb3RvdHlwZS5wcm90b3R5cGVbbmFtZV0gPSBtZXRob2Q7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gQWN0dWFsbHkgc3RhcnRzIHRoZSBhcHBsaWNhdGlvbidzIGxpZmVjeWNsZS4gYHJ1bigpYCBzaG91bGQgYmUgaW52b2tlZFxuICAgIC8vIHdpdGhpbiBhIGRvY3VtZW50LnJlYWR5IGJsb2NrIHRvIGVuc3VyZSB0aGUgRE9NIGV4aXN0cyBiZWZvcmUgYmluZGluZyBldmVudHMsIGV0Yy5cbiAgICAvL1xuICAgIC8vICMjIyBFeGFtcGxlXG4gICAgLy9cbiAgICAvLyAgICAgdmFyIGFwcCA9ICQuc2FtbXkoZnVuY3Rpb24oKSB7IC4uLiB9KTsgLy8geW91ciBhcHBsaWNhdGlvblxuICAgIC8vICAgICAkKGZ1bmN0aW9uKCkgeyAvLyBkb2N1bWVudC5yZWFkeVxuICAgIC8vICAgICAgICBhcHAucnVuKCk7XG4gICAgLy8gICAgIH0pO1xuICAgIC8vXG4gICAgLy8gIyMjIEFyZ3VtZW50c1xuICAgIC8vXG4gICAgLy8gKiBgc3RhcnRfdXJsYCBPcHRpb25hbGx5LCBhIFN0cmluZyBjYW4gYmUgcGFzc2VkIHdoaWNoIHRoZSBBcHAgd2lsbCByZWRpcmVjdCB0b1xuICAgIC8vICAgYWZ0ZXIgdGhlIGV2ZW50cy9yb3V0ZXMgaGF2ZSBiZWVuIGJvdW5kLlxuICAgIHJ1bjogZnVuY3Rpb24oc3RhcnRfdXJsKSB7XG4gICAgICBpZiAodGhpcy5pc1J1bm5pbmcoKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIHZhciBhcHAgPSB0aGlzO1xuXG4gICAgICAvLyBhY3R1YWxseSBiaW5kIGFsbCB0aGUgbGlzdGVuZXJzXG4gICAgICAkLmVhY2godGhpcy5saXN0ZW5lcnMudG9IYXNoKCksIGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrcykge1xuICAgICAgICAkLmVhY2goY2FsbGJhY2tzLCBmdW5jdGlvbihpLCBsaXN0ZW5lcl9jYWxsYmFjaykge1xuICAgICAgICAgIGFwcC5fbGlzdGVuKG5hbWUsIGxpc3RlbmVyX2NhbGxiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy50cmlnZ2VyKCdydW4nLCB7c3RhcnRfdXJsOiBzdGFydF91cmx9KTtcbiAgICAgIHRoaXMuX3J1bm5pbmcgPSB0cnVlO1xuICAgICAgLy8gc2V0IGxhc3QgbG9jYXRpb25cbiAgICAgIHRoaXMubGFzdF9sb2NhdGlvbiA9IG51bGw7XG4gICAgICBpZiAoISgvXFwjKC4rKS8udGVzdCh0aGlzLmdldExvY2F0aW9uKCkpKSAmJiB0eXBlb2Ygc3RhcnRfdXJsICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuc2V0TG9jYXRpb24oc3RhcnRfdXJsKTtcbiAgICAgIH1cbiAgICAgIC8vIGNoZWNrIHVybFxuICAgICAgdGhpcy5fY2hlY2tMb2NhdGlvbigpO1xuICAgICAgdGhpcy5fbG9jYXRpb25fcHJveHkuYmluZCgpO1xuICAgICAgdGhpcy5iaW5kKCdsb2NhdGlvbi1jaGFuZ2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGFwcC5fY2hlY2tMb2NhdGlvbigpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGJpbmQgdG8gc3VibWl0IHRvIGNhcHR1cmUgcG9zdC9wdXQvZGVsZXRlIHJvdXRlc1xuICAgICAgdGhpcy5iaW5kKCdzdWJtaXQnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICggIVNhbW15LnRhcmdldElzVGhpc1dpbmRvdyhlLCAnZm9ybScpICkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICB2YXIgcmV0dXJuZWQgPSBhcHAuX2NoZWNrRm9ybVN1Ym1pc3Npb24oJChlLnRhcmdldCkuY2xvc2VzdCgnZm9ybScpKTtcbiAgICAgICAgcmV0dXJuIChyZXR1cm5lZCA9PT0gZmFsc2UpID8gZS5wcmV2ZW50RGVmYXVsdCgpIDogZmFsc2U7XG4gICAgICB9KTtcblxuICAgICAgLy8gYmluZCB1bmxvYWQgdG8gYm9keSB1bmxvYWRcbiAgICAgICQod2luZG93KS5iaW5kKCd1bmxvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgYXBwLnVubG9hZCgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHRyaWdnZXIgaHRtbCBjaGFuZ2VkXG4gICAgICByZXR1cm4gdGhpcy50cmlnZ2VyKCdjaGFuZ2VkJyk7XG4gICAgfSxcblxuICAgIC8vIFRoZSBvcHBvc2l0ZSBvZiBgcnVuKClgLCB1bi1iaW5kcyBhbGwgZXZlbnQgbGlzdGVuZXJzIGFuZCBpbnRlcnZhbHNcbiAgICAvLyBgcnVuKClgIEF1dG9tYXRpY2FsbHkgYmluZHMgYSBgb251bmxvYWRgIGV2ZW50IHRvIHJ1biB0aGlzIHdoZW5cbiAgICAvLyB0aGUgZG9jdW1lbnQgaXMgY2xvc2VkLlxuICAgIHVubG9hZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKCkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICB2YXIgYXBwID0gdGhpcztcbiAgICAgIHRoaXMudHJpZ2dlcigndW5sb2FkJyk7XG4gICAgICAvLyBjbGVhciBpbnRlcnZhbFxuICAgICAgdGhpcy5fbG9jYXRpb25fcHJveHkudW5iaW5kKCk7XG4gICAgICAvLyB1bmJpbmQgZm9ybSBzdWJtaXRzXG4gICAgICB0aGlzLiRlbGVtZW50KCkudW5iaW5kKCdzdWJtaXQnKS5yZW1vdmVDbGFzcyhhcHAuZXZlbnROYW1lc3BhY2UoKSk7XG4gICAgICAvLyB1bmJpbmQgYWxsIGV2ZW50c1xuICAgICAgJC5lYWNoKHRoaXMubGlzdGVuZXJzLnRvSGFzaCgpICwgZnVuY3Rpb24obmFtZSwgbGlzdGVuZXJzKSB7XG4gICAgICAgICQuZWFjaChsaXN0ZW5lcnMsIGZ1bmN0aW9uKGksIGxpc3RlbmVyX2NhbGxiYWNrKSB7XG4gICAgICAgICAgYXBwLl91bmxpc3RlbihuYW1lLCBsaXN0ZW5lcl9jYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gTm90IG9ubHkgcnVucyBgdW5iaW5kYCBidXQgYWxzbyBkZXN0cm95cyB0aGUgYXBwIHJlZmVyZW5jZS5cbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMudW5sb2FkKCk7XG4gICAgICBkZWxldGUgU2FtbXkuYXBwc1t0aGlzLmVsZW1lbnRfc2VsZWN0b3JdO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIFdpbGwgYmluZCBhIHNpbmdsZSBjYWxsYmFjayBmdW5jdGlvbiB0byBldmVyeSBldmVudCB0aGF0IGlzIGFscmVhZHlcbiAgICAvLyBiZWluZyBsaXN0ZW5lZCB0byBpbiB0aGUgYXBwLiBUaGlzIGluY2x1ZGVzIGFsbCB0aGUgYEFQUF9FVkVOVFNgXG4gICAgLy8gYXMgd2VsbCBhcyBhbnkgY3VzdG9tIGV2ZW50cyBkZWZpbmVkIHdpdGggYGJpbmQoKWAuXG4gICAgLy9cbiAgICAvLyBVc2VkIGludGVybmFsbHkgZm9yIGRlYnVnIGxvZ2dpbmcuXG4gICAgYmluZFRvQWxsRXZlbnRzOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgdmFyIGFwcCA9IHRoaXM7XG4gICAgICAvLyBiaW5kIHRvIHRoZSBBUFBfRVZFTlRTIGZpcnN0XG4gICAgICAkLmVhY2godGhpcy5BUFBfRVZFTlRTLCBmdW5jdGlvbihpLCBlKSB7XG4gICAgICAgIGFwcC5iaW5kKGUsIGNhbGxiYWNrKTtcbiAgICAgIH0pO1xuICAgICAgLy8gbmV4dCwgYmluZCB0byBsaXN0ZW5lciBuYW1lcyAob25seSBpZiB0aGV5IGRvbnQgZXhpc3QgaW4gQVBQX0VWRU5UUylcbiAgICAgICQuZWFjaCh0aGlzLmxpc3RlbmVycy5rZXlzKHRydWUpLCBmdW5jdGlvbihpLCBuYW1lKSB7XG4gICAgICAgIGlmICgkLmluQXJyYXkobmFtZSwgYXBwLkFQUF9FVkVOVFMpID09IC0xKSB7XG4gICAgICAgICAgYXBwLmJpbmQobmFtZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgZ2l2ZW4gcGF0aCB3aXRoIGFueSBxdWVyeSBzdHJpbmcgYWZ0ZXIgdGhlIGhhc2hcbiAgICAvLyByZW1vdmVkLlxuICAgIHJvdXRhYmxlUGF0aDogZnVuY3Rpb24ocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgucmVwbGFjZShRVUVSWV9TVFJJTkdfTUFUQ0hFUiwgJycpO1xuICAgIH0sXG5cbiAgICAvLyBHaXZlbiBhIHZlcmIgYW5kIGEgU3RyaW5nIHBhdGgsIHdpbGwgcmV0dXJuIGVpdGhlciBhIHJvdXRlIG9iamVjdCBvciBmYWxzZVxuICAgIC8vIGlmIGEgbWF0Y2hpbmcgcm91dGUgY2FuIGJlIGZvdW5kIHdpdGhpbiB0aGUgY3VycmVudCBkZWZpbmVkIHNldC5cbiAgICBsb29rdXBSb3V0ZTogZnVuY3Rpb24odmVyYiwgcGF0aCkge1xuICAgICAgdmFyIGFwcCA9IHRoaXMsIHJvdXRlZCA9IGZhbHNlLCBpID0gMCwgbCwgcm91dGU7XG4gICAgICBpZiAodHlwZW9mIHRoaXMucm91dGVzW3ZlcmJdICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGwgPSB0aGlzLnJvdXRlc1t2ZXJiXS5sZW5ndGg7XG4gICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgcm91dGUgPSB0aGlzLnJvdXRlc1t2ZXJiXVtpXTtcbiAgICAgICAgICBpZiAoYXBwLnJvdXRhYmxlUGF0aChwYXRoKS5tYXRjaChyb3V0ZS5wYXRoKSkge1xuICAgICAgICAgICAgcm91dGVkID0gcm91dGU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByb3V0ZWQ7XG4gICAgfSxcblxuICAgIC8vIEZpcnN0LCBpbnZva2VzIGBsb29rdXBSb3V0ZSgpYCBhbmQgaWYgYSByb3V0ZSBpcyBmb3VuZCwgcGFyc2VzIHRoZVxuICAgIC8vIHBvc3NpYmxlIFVSTCBwYXJhbXMgYW5kIHRoZW4gaW52b2tlcyB0aGUgcm91dGUncyBjYWxsYmFjayB3aXRoaW4gYSBuZXdcbiAgICAvLyBgU2FtbXkuRXZlbnRDb250ZXh0YC4gSWYgdGhlIHJvdXRlIGNhbiBub3QgYmUgZm91bmQsIGl0IGNhbGxzXG4gICAgLy8gYG5vdEZvdW5kKClgLiBJZiBgcmFpc2VfZXJyb3JzYCBpcyBzZXQgdG8gYHRydWVgIGFuZFxuICAgIC8vIHRoZSBgZXJyb3IoKWAgaGFzIG5vdCBiZWVuIG92ZXJyaWRkZW4sIGl0IHdpbGwgdGhyb3cgYW4gYWN0dWFsIEpTXG4gICAgLy8gZXJyb3IuXG4gICAgLy9cbiAgICAvLyBZb3UgcHJvYmFibHkgd2lsbCBuZXZlciBoYXZlIHRvIGNhbGwgdGhpcyBkaXJlY3RseS5cbiAgICAvL1xuICAgIC8vICMjIyBBcmd1bWVudHNcbiAgICAvL1xuICAgIC8vICogYHZlcmJgIEEgU3RyaW5nIGZvciB0aGUgdmVyYi5cbiAgICAvLyAqIGBwYXRoYCBBIFN0cmluZyBwYXRoIHRvIGxvb2t1cC5cbiAgICAvLyAqIGBwYXJhbXNgIEFuIE9iamVjdCBvZiBQYXJhbXMgcHVsbGVkIGZyb20gdGhlIFVSSSBvciBwYXNzZWQgZGlyZWN0bHkuXG4gICAgLy9cbiAgICAvLyAjIyMgUmV0dXJuc1xuICAgIC8vXG4gICAgLy8gRWl0aGVyIHJldHVybnMgdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZSByb3V0ZSBjYWxsYmFjayBvciByYWlzZXMgYSA0MDQgTm90IEZvdW5kIGVycm9yLlxuICAgIC8vXG4gICAgcnVuUm91dGU6IGZ1bmN0aW9uKHZlcmIsIHBhdGgsIHBhcmFtcywgdGFyZ2V0KSB7XG4gICAgICB2YXIgYXBwID0gdGhpcyxcbiAgICAgICAgICByb3V0ZSA9IHRoaXMubG9va3VwUm91dGUodmVyYiwgcGF0aCksXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICB3cmFwcGVkX3JvdXRlLFxuICAgICAgICAgIGFyb3VuZHMsXG4gICAgICAgICAgYXJvdW5kLFxuICAgICAgICAgIGJlZm9yZXMsXG4gICAgICAgICAgYmVmb3JlLFxuICAgICAgICAgIGNhbGxiYWNrX2FyZ3MsXG4gICAgICAgICAgcGF0aF9wYXJhbXMsXG4gICAgICAgICAgZmluYWxfcmV0dXJuZWQ7XG5cbiAgICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgIHRoaXMubG9nKCdydW5Sb3V0ZScsIFt2ZXJiLCBwYXRoXS5qb2luKCcgJykpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRyaWdnZXIoJ3J1bi1yb3V0ZScsIHt2ZXJiOiB2ZXJiLCBwYXRoOiBwYXRoLCBwYXJhbXM6IHBhcmFtc30pO1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT0gJ3VuZGVmaW5lZCcpIHsgcGFyYW1zID0ge307IH1cblxuICAgICAgJC5leHRlbmQocGFyYW1zLCB0aGlzLl9wYXJzZVF1ZXJ5U3RyaW5nKHBhdGgpKTtcblxuICAgICAgaWYgKHJvdXRlKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncm91dGUtZm91bmQnLCB7cm91dGU6IHJvdXRlfSk7XG4gICAgICAgIC8vIHB1bGwgb3V0IHRoZSBwYXJhbXMgZnJvbSB0aGUgcGF0aFxuICAgICAgICBpZiAoKHBhdGhfcGFyYW1zID0gcm91dGUucGF0aC5leGVjKHRoaXMucm91dGFibGVQYXRoKHBhdGgpKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBmaXJzdCBtYXRjaCBpcyB0aGUgZnVsbCBwYXRoXG4gICAgICAgICAgcGF0aF9wYXJhbXMuc2hpZnQoKTtcbiAgICAgICAgICAvLyBmb3IgZWFjaCBvZiB0aGUgbWF0Y2hlc1xuICAgICAgICAgICQuZWFjaChwYXRoX3BhcmFtcywgZnVuY3Rpb24oaSwgcGFyYW0pIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlcyBhIG1hdGNoaW5nIHBhcmFtIG5hbWVcbiAgICAgICAgICAgIGlmIChyb3V0ZS5wYXJhbV9uYW1lc1tpXSkge1xuICAgICAgICAgICAgICAvLyBzZXQgdGhlIG5hbWUgdG8gdGhlIG1hdGNoXG4gICAgICAgICAgICAgIHBhcmFtc1tyb3V0ZS5wYXJhbV9uYW1lc1tpXV0gPSBfZGVjb2RlKHBhcmFtKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGluaXRpYWxpemUgJ3NwbGF0J1xuICAgICAgICAgICAgICBpZiAoIXBhcmFtcy5zcGxhdCkgeyBwYXJhbXMuc3BsYXQgPSBbXTsgfVxuICAgICAgICAgICAgICBwYXJhbXMuc3BsYXQucHVzaChfZGVjb2RlKHBhcmFtKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgZXZlbnQgY29udGV4dFxuICAgICAgICBjb250ZXh0ICA9IG5ldyB0aGlzLmNvbnRleHRfcHJvdG90eXBlKHRoaXMsIHZlcmIsIHBhdGgsIHBhcmFtcywgdGFyZ2V0KTtcbiAgICAgICAgLy8gZW5zdXJlIGFycmF5c1xuICAgICAgICBhcm91bmRzID0gdGhpcy5hcm91bmRzLnNsaWNlKDApO1xuICAgICAgICBiZWZvcmVzID0gdGhpcy5iZWZvcmVzLnNsaWNlKDApO1xuICAgICAgICAvLyBzZXQgdGhlIGNhbGxiYWNrIGFyZ3MgdG8gdGhlIGNvbnRleHQgKyBjb250ZW50cyBvZiB0aGUgc3BsYXRcbiAgICAgICAgY2FsbGJhY2tfYXJncyA9IFtjb250ZXh0XTtcbiAgICAgICAgaWYgKHBhcmFtcy5zcGxhdCkge1xuICAgICAgICAgIGNhbGxiYWNrX2FyZ3MgPSBjYWxsYmFja19hcmdzLmNvbmNhdChwYXJhbXMuc3BsYXQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdyYXAgdGhlIHJvdXRlIHVwIHdpdGggdGhlIGJlZm9yZSBmaWx0ZXJzXG4gICAgICAgIHdyYXBwZWRfcm91dGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcmV0dXJuZWQsIGksIG5leHRSb3V0ZTtcbiAgICAgICAgICB3aGlsZSAoYmVmb3Jlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBiZWZvcmUgPSBiZWZvcmVzLnNoaWZ0KCk7XG4gICAgICAgICAgICAvLyBjaGVjayB0aGUgb3B0aW9uc1xuICAgICAgICAgICAgaWYgKGFwcC5jb250ZXh0TWF0Y2hlc09wdGlvbnMoY29udGV4dCwgYmVmb3JlWzBdKSkge1xuICAgICAgICAgICAgICByZXR1cm5lZCA9IGJlZm9yZVsxXS5hcHBseShjb250ZXh0LCBbY29udGV4dF0pO1xuICAgICAgICAgICAgICBpZiAocmV0dXJuZWQgPT09IGZhbHNlKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBhcHAubGFzdF9yb3V0ZSA9IHJvdXRlO1xuICAgICAgICAgIGNvbnRleHQudHJpZ2dlcignZXZlbnQtY29udGV4dC1iZWZvcmUnLCB7Y29udGV4dDogY29udGV4dH0pO1xuICAgICAgICAgIC8vIHJ1biBtdWx0aXBsZSBjYWxsYmFja3NcbiAgICAgICAgICBpZiAodHlwZW9mKHJvdXRlLmNhbGxiYWNrKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByb3V0ZS5jYWxsYmFjayA9IFtyb3V0ZS5jYWxsYmFja107XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyb3V0ZS5jYWxsYmFjayAmJiByb3V0ZS5jYWxsYmFjay5sZW5ndGgpIHtcbiAgICAgICAgICAgIGkgPSAtMTtcbiAgICAgICAgICAgIG5leHRSb3V0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgIGlmIChyb3V0ZS5jYWxsYmFja1tpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybmVkID0gcm91dGUuY2FsbGJhY2tbaV0uYXBwbHkoY29udGV4dCxjYWxsYmFja19hcmdzKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcHAuX29uQ29tcGxldGUgJiYgdHlwZW9mKGFwcC5fb25Db21wbGV0ZSA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgICAgICAgICAgICAgIGFwcC5fb25Db21wbGV0ZShjb250ZXh0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhbGxiYWNrX2FyZ3MucHVzaChuZXh0Um91dGUpO1xuICAgICAgICAgICAgbmV4dFJvdXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRleHQudHJpZ2dlcignZXZlbnQtY29udGV4dC1hZnRlcicsIHtjb250ZXh0OiBjb250ZXh0fSk7XG4gICAgICAgICAgcmV0dXJuIHJldHVybmVkO1xuICAgICAgICB9O1xuICAgICAgICAkLmVhY2goYXJvdW5kcy5yZXZlcnNlKCksIGZ1bmN0aW9uKGksIGFyb3VuZCkge1xuICAgICAgICAgIHZhciBsYXN0X3dyYXBwZWRfcm91dGUgPSB3cmFwcGVkX3JvdXRlO1xuICAgICAgICAgIHdyYXBwZWRfcm91dGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGFyb3VuZC5hcHBseShjb250ZXh0LCBbbGFzdF93cmFwcGVkX3JvdXRlXSk7IH07XG4gICAgICAgIH0pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZpbmFsX3JldHVybmVkID0gd3JhcHBlZF9yb3V0ZSgpO1xuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICB0aGlzLmVycm9yKFsnNTAwIEVycm9yJywgdmVyYiwgcGF0aF0uam9pbignICcpLCBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmluYWxfcmV0dXJuZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3RGb3VuZCh2ZXJiLCBwYXRoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gTWF0Y2hlcyBhbiBvYmplY3Qgb2Ygb3B0aW9ucyBhZ2FpbnN0IGFuIGBFdmVudENvbnRleHRgIGxpa2Ugb2JqZWN0IHRoYXRcbiAgICAvLyBjb250YWlucyBgcGF0aGAgYW5kIGB2ZXJiYCBhdHRyaWJ1dGVzLiBJbnRlcm5hbGx5IFNhbW15IHVzZXMgdGhpc1xuICAgIC8vIGZvciBtYXRjaGluZyBgYmVmb3JlKClgIGZpbHRlcnMgYWdhaW5zdCBzcGVjaWZpYyBvcHRpb25zLiBZb3UgY2FuIHNldCB0aGVcbiAgICAvLyBvYmplY3QgdG8gX29ubHlfIG1hdGNoIGNlcnRhaW4gcGF0aHMgb3IgdmVyYnMsIG9yIG1hdGNoIGFsbCBwYXRocyBvciB2ZXJicyBfZXhjZXB0X1xuICAgIC8vIHRob3NlIHRoYXQgbWF0Y2ggdGhlIG9wdGlvbnMuXG4gICAgLy9cbiAgICAvLyAjIyMgRXhhbXBsZVxuICAgIC8vXG4gICAgLy8gICAgIHZhciBhcHAgPSAkLnNhbW15KCksXG4gICAgLy8gICAgICAgICBjb250ZXh0ID0ge3ZlcmI6ICdnZXQnLCBwYXRoOiAnIy9teXBhdGgnfTtcbiAgICAvL1xuICAgIC8vICAgICAvLyBtYXRjaCBhZ2FpbnN0IGEgcGF0aCBzdHJpbmdcbiAgICAvLyAgICAgYXBwLmNvbnRleHRNYXRjaGVzT3B0aW9ucyhjb250ZXh0LCAnIy9teXBhdGgnKTsgLy89PiB0cnVlXG4gICAgLy8gICAgIGFwcC5jb250ZXh0TWF0Y2hlc09wdGlvbnMoY29udGV4dCwgJyMvb3RoZXJwYXRoJyk7IC8vPT4gZmFsc2VcbiAgICAvLyAgICAgLy8gZXF1aXZhbGVudCB0b1xuICAgIC8vICAgICBhcHAuY29udGV4dE1hdGNoZXNPcHRpb25zKGNvbnRleHQsIHtvbmx5OiB7cGF0aDonIy9teXBhdGgnfX0pOyAvLz0+IHRydWVcbiAgICAvLyAgICAgYXBwLmNvbnRleHRNYXRjaGVzT3B0aW9ucyhjb250ZXh0LCB7b25seToge3BhdGg6JyMvb3RoZXJwYXRoJ319KTsgLy89PiBmYWxzZVxuICAgIC8vICAgICAvLyBtYXRjaCBhZ2FpbnN0IGEgcGF0aCByZWdleHBcbiAgICAvLyAgICAgYXBwLmNvbnRleHRNYXRjaGVzT3B0aW9ucyhjb250ZXh0LCAvcGF0aC8pOyAvLz0+IHRydWVcbiAgICAvLyAgICAgYXBwLmNvbnRleHRNYXRjaGVzT3B0aW9ucyhjb250ZXh0LCAvXnBhdGgvKTsgLy89PiBmYWxzZVxuICAgIC8vICAgICAvLyBtYXRjaCBvbmx5IGEgdmVyYlxuICAgIC8vICAgICBhcHAuY29udGV4dE1hdGNoZXNPcHRpb25zKGNvbnRleHQsIHtvbmx5OiB7dmVyYjonZ2V0J319KTsgLy89PiB0cnVlXG4gICAgLy8gICAgIGFwcC5jb250ZXh0TWF0Y2hlc09wdGlvbnMoY29udGV4dCwge29ubHk6IHt2ZXJiOidwb3N0J319KTsgLy89PiBmYWxzZVxuICAgIC8vICAgICAvLyBtYXRjaCBhbGwgZXhjZXB0IGEgdmVyYlxuICAgIC8vICAgICBhcHAuY29udGV4dE1hdGNoZXNPcHRpb25zKGNvbnRleHQsIHtleGNlcHQ6IHt2ZXJiOidwb3N0J319KTsgLy89PiB0cnVlXG4gICAgLy8gICAgIGFwcC5jb250ZXh0TWF0Y2hlc09wdGlvbnMoY29udGV4dCwge2V4Y2VwdDoge3ZlcmI6J2dldCd9fSk7IC8vPT4gZmFsc2VcbiAgICAvLyAgICAgLy8gbWF0Y2ggYWxsIGV4Y2VwdCBhIHBhdGhcbiAgICAvLyAgICAgYXBwLmNvbnRleHRNYXRjaGVzT3B0aW9ucyhjb250ZXh0LCB7ZXhjZXB0OiB7cGF0aDonIy9vdGhlcnBhdGgnfX0pOyAvLz0+IHRydWVcbiAgICAvLyAgICAgYXBwLmNvbnRleHRNYXRjaGVzT3B0aW9ucyhjb250ZXh0LCB7ZXhjZXB0OiB7cGF0aDonIy9teXBhdGgnfX0pOyAvLz0+IGZhbHNlXG4gICAgLy8gICAgIC8vIG1hdGNoIGFsbCBleGNlcHQgYSB2ZXJiIGFuZCBhIHBhdGhcbiAgICAvLyAgICAgYXBwLmNvbnRleHRNYXRjaGVzT3B0aW9ucyhjb250ZXh0LCB7ZXhjZXB0OiB7cGF0aDonIy9vdGhlcnBhdGgnLCB2ZXJiOidwb3N0J319KTsgLy89PiB0cnVlXG4gICAgLy8gICAgIGFwcC5jb250ZXh0TWF0Y2hlc09wdGlvbnMoY29udGV4dCwge2V4Y2VwdDoge3BhdGg6JyMvbXlwYXRoJywgdmVyYjoncG9zdCd9fSk7IC8vPT4gdHJ1ZVxuICAgIC8vICAgICBhcHAuY29udGV4dE1hdGNoZXNPcHRpb25zKGNvbnRleHQsIHtleGNlcHQ6IHtwYXRoOicjL215cGF0aCcsIHZlcmI6J2dldCd9fSk7IC8vPT4gZmFsc2VcbiAgICAvLyAgICAgLy8gbWF0Y2ggbXVsdGlwbGUgcGF0aHNcbiAgICAvLyAgICAgYXBwLmNvbnRleHRNYXRjaGVzT3B0aW9ucyhjb250ZXh0LCB7cGF0aDogWycjL215cGF0aCcsICcjL290aGVycGF0aCddfSk7IC8vPT4gdHJ1ZVxuICAgIC8vICAgICBhcHAuY29udGV4dE1hdGNoZXNPcHRpb25zKGNvbnRleHQsIHtwYXRoOiBbJyMvb3RoZXJwYXRoJywgJyMvdGhpcmRwYXRoJ119KTsgLy89PiBmYWxzZVxuICAgIC8vICAgICAvLyBlcXVpdmFsZW50IHRvXG4gICAgLy8gICAgIGFwcC5jb250ZXh0TWF0Y2hlc09wdGlvbnMoY29udGV4dCwge29ubHk6IHtwYXRoOiBbJyMvbXlwYXRoJywgJyMvb3RoZXJwYXRoJ119fSk7IC8vPT4gdHJ1ZVxuICAgIC8vICAgICBhcHAuY29udGV4dE1hdGNoZXNPcHRpb25zKGNvbnRleHQsIHtvbmx5OiB7cGF0aDogWycjL290aGVycGF0aCcsICcjL3RoaXJkcGF0aCddfX0pOyAvLz0+IGZhbHNlXG4gICAgLy8gICAgIC8vIG1hdGNoIGFsbCBleGNlcHQgbXVsdGlwbGUgcGF0aHNcbiAgICAvLyAgICAgYXBwLmNvbnRleHRNYXRjaGVzT3B0aW9ucyhjb250ZXh0LCB7ZXhjZXB0OiB7cGF0aDogWycjL215cGF0aCcsICcjL290aGVycGF0aCddfX0pOyAvLz0+IGZhbHNlXG4gICAgLy8gICAgIGFwcC5jb250ZXh0TWF0Y2hlc09wdGlvbnMoY29udGV4dCwge2V4Y2VwdDoge3BhdGg6IFsnIy9vdGhlcnBhdGgnLCAnIy90aGlyZHBhdGgnXX19KTsgLy89PiB0cnVlXG4gICAgLy8gICAgIC8vIG1hdGNoIGFsbCBleGNlcHQgbXVsdGlwbGUgcGF0aHMgYW5kIHZlcmJzXG4gICAgLy8gICAgIGFwcC5jb250ZXh0TWF0Y2hlc09wdGlvbnMoY29udGV4dCwge2V4Y2VwdDoge3BhdGg6IFsnIy9teXBhdGgnLCAnIy9vdGhlcnBhdGgnXSwgdmVyYjogWydnZXQnLCAncG9zdCddfX0pOyAvLz0+IGZhbHNlXG4gICAgLy8gICAgIGFwcC5jb250ZXh0TWF0Y2hlc09wdGlvbnMoY29udGV4dCwge2V4Y2VwdDoge3BhdGg6IFsnIy9vdGhlcnBhdGgnLCAnIy90aGlyZHBhdGgnXSwgdmVyYjogWydnZXQnLCAncG9zdCddfX0pOyAvLz0+IHRydWVcbiAgICAvL1xuICAgIGNvbnRleHRNYXRjaGVzT3B0aW9uczogZnVuY3Rpb24oY29udGV4dCwgbWF0Y2hfb3B0aW9ucywgcG9zaXRpdmUpIHtcbiAgICAgIHZhciBvcHRpb25zID0gbWF0Y2hfb3B0aW9ucztcbiAgICAgIC8vIG5vcm1hbGl6ZSBvcHRpb25zXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnIHx8IF9pc1JlZ0V4cChvcHRpb25zKSkge1xuICAgICAgICBvcHRpb25zID0ge3BhdGg6IG9wdGlvbnN9O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwb3NpdGl2ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcG9zaXRpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gZW1wdHkgb3B0aW9ucyBhbHdheXMgbWF0Y2hcbiAgICAgIGlmICgkLmlzRW1wdHlPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICAvLyBEbyB3ZSBoYXZlIHRvIG1hdGNoIGFnYWluc3QgbXVsdGlwbGUgcGF0aHM/XG4gICAgICBpZiAoX2lzQXJyYXkob3B0aW9ucy5wYXRoKSl7XG4gICAgICAgIHZhciByZXN1bHRzLCBudW1vcHQsIG9wdHMsIGxlbjtcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKG51bW9wdCA9IDAsIGxlbiA9IG9wdGlvbnMucGF0aC5sZW5ndGg7IG51bW9wdCA8IGxlbjsgbnVtb3B0ICs9IDEpIHtcbiAgICAgICAgICBvcHRzID0gJC5leHRlbmQoe30sIG9wdGlvbnMsIHtwYXRoOiBvcHRpb25zLnBhdGhbbnVtb3B0XX0pO1xuICAgICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLmNvbnRleHRNYXRjaGVzT3B0aW9ucyhjb250ZXh0LCBvcHRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1hdGNoZWQgPSAkLmluQXJyYXkodHJ1ZSwgcmVzdWx0cykgPiAtMSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHBvc2l0aXZlID8gbWF0Y2hlZCA6ICFtYXRjaGVkO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMub25seSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0TWF0Y2hlc09wdGlvbnMoY29udGV4dCwgb3B0aW9ucy5vbmx5LCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5leGNlcHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dE1hdGNoZXNPcHRpb25zKGNvbnRleHQsIG9wdGlvbnMuZXhjZXB0LCBmYWxzZSk7XG4gICAgICB9XG4gICAgICB2YXIgcGF0aF9tYXRjaGVkID0gdHJ1ZSwgdmVyYl9tYXRjaGVkID0gdHJ1ZTtcbiAgICAgIGlmIChvcHRpb25zLnBhdGgpIHtcbiAgICAgICAgaWYgKCFfaXNSZWdFeHAob3B0aW9ucy5wYXRoKSkge1xuICAgICAgICAgIG9wdGlvbnMucGF0aCA9IG5ldyBSZWdFeHAob3B0aW9ucy5wYXRoLnRvU3RyaW5nKCkgKyAnJCcpO1xuICAgICAgICB9XG4gICAgICAgIHBhdGhfbWF0Y2hlZCA9IG9wdGlvbnMucGF0aC50ZXN0KGNvbnRleHQucGF0aCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy52ZXJiKSB7XG4gICAgICAgIGlmKHR5cGVvZiBvcHRpb25zLnZlcmIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdmVyYl9tYXRjaGVkID0gb3B0aW9ucy52ZXJiID09PSBjb250ZXh0LnZlcmI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmVyYl9tYXRjaGVkID0gb3B0aW9ucy52ZXJiLmluZGV4T2YoY29udGV4dC52ZXJiKSA+IC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcG9zaXRpdmUgPyAodmVyYl9tYXRjaGVkICYmIHBhdGhfbWF0Y2hlZCkgOiAhKHZlcmJfbWF0Y2hlZCAmJiBwYXRoX21hdGNoZWQpO1xuICAgIH0sXG5cblxuICAgIC8vIERlbGVnYXRlcyB0byB0aGUgYGxvY2F0aW9uX3Byb3h5YCB0byBnZXQgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgLy8gU2VlIGBTYW1teS5EZWZhdWx0TG9jYXRpb25Qcm94eWAgZm9yIG1vcmUgaW5mbyBvbiBsb2NhdGlvbiBwcm94aWVzLlxuICAgIGdldExvY2F0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sb2NhdGlvbl9wcm94eS5nZXRMb2NhdGlvbigpO1xuICAgIH0sXG5cbiAgICAvLyBEZWxlZ2F0ZXMgdG8gdGhlIGBsb2NhdGlvbl9wcm94eWAgdG8gc2V0IHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICAgIC8vIFNlZSBgU2FtbXkuRGVmYXVsdExvY2F0aW9uUHJveHlgIGZvciBtb3JlIGluZm8gb24gbG9jYXRpb24gcHJveGllcy5cbiAgICAvL1xuICAgIC8vICMjIyBBcmd1bWVudHNcbiAgICAvL1xuICAgIC8vICogYG5ld19sb2NhdGlvbmAgQSBuZXcgbG9jYXRpb24gc3RyaW5nIChlLmcuICcjLycpXG4gICAgLy9cbiAgICBzZXRMb2NhdGlvbjogZnVuY3Rpb24obmV3X2xvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbG9jYXRpb25fcHJveHkuc2V0TG9jYXRpb24obmV3X2xvY2F0aW9uKTtcbiAgICB9LFxuXG4gICAgLy8gU3dhcHMgdGhlIGNvbnRlbnQgb2YgYCRlbGVtZW50KClgIHdpdGggYGNvbnRlbnRgXG4gICAgLy8gWW91IGNhbiBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlIGFuIGFsdGVybmF0ZSBzd2FwIGJlaGF2aW9yXG4gICAgLy8gZm9yIGBFdmVudENvbnRleHQucGFydGlhbCgpYC5cbiAgICAvL1xuICAgIC8vICMjIyBFeGFtcGxlXG4gICAgLy9cbiAgICAvLyAgICAgIHZhciBhcHAgPSAkLnNhbW15KGZ1bmN0aW9uKCkge1xuICAgIC8vXG4gICAgLy8gICAgICAgIC8vIGltcGxlbWVudHMgYSAnZmFkZSBvdXQnLydmYWRlIGluJ1xuICAgIC8vICAgICAgICB0aGlzLnN3YXAgPSBmdW5jdGlvbihjb250ZW50LCBjYWxsYmFjaykge1xuICAgIC8vICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAvLyAgICAgICAgICBjb250ZXh0LiRlbGVtZW50KCkuZmFkZU91dCgnc2xvdycsIGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICAgICAgICAgY29udGV4dC4kZWxlbWVudCgpLmh0bWwoY29udGVudCk7XG4gICAgLy8gICAgICAgICAgICBjb250ZXh0LiRlbGVtZW50KCkuZmFkZUluKCdzbG93JywgZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgIC8vICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KCk7XG4gICAgLy8gICAgICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgICAgIH0pO1xuICAgIC8vICAgICAgICAgIH0pO1xuICAgIC8vICAgICAgICB9O1xuICAgIC8vXG4gICAgLy8gICAgICB9KTtcbiAgICAvL1xuICAgIHN3YXA6IGZ1bmN0aW9uKGNvbnRlbnQsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgJGVsID0gdGhpcy4kZWxlbWVudCgpLmh0bWwoY29udGVudCk7XG4gICAgICBpZiAoX2lzRnVuY3Rpb24oY2FsbGJhY2spKSB7IGNhbGxiYWNrKGNvbnRlbnQpOyB9XG4gICAgICByZXR1cm4gJGVsO1xuICAgIH0sXG5cbiAgICAvLyBhIHNpbXBsZSBnbG9iYWwgY2FjaGUgZm9yIHRlbXBsYXRlcy4gVXNlcyB0aGUgc2FtZSBzZW1hbnRpY3MgYXNcbiAgICAvLyBgU2FtbXkuQ2FjaGVgIGFuZCBgU2FtbXkuU3RvcmFnZWAgc28gY2FuIGVhc2lseSBiZSByZXBsYWNlZCB3aXRoXG4gICAgLy8gYSBwZXJzaXN0ZW50IHN0b3JhZ2UgdGhhdCBsYXN0cyBiZXlvbmQgdGhlIGN1cnJlbnQgcmVxdWVzdC5cbiAgICB0ZW1wbGF0ZUNhY2hlOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBfdGVtcGxhdGVfY2FjaGVba2V5XSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF90ZW1wbGF0ZV9jYWNoZVtrZXldO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBjbGVhciB0aGUgdGVtcGxhdGVDYWNoZVxuICAgIGNsZWFyVGVtcGxhdGVDYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKF90ZW1wbGF0ZV9jYWNoZSA9IHt9KTtcbiAgICB9LFxuXG4gICAgLy8gVGhpcyB0aHJvd3MgYSAnNDA0IE5vdCBGb3VuZCcgZXJyb3IgYnkgaW52b2tpbmcgYGVycm9yKClgLlxuICAgIC8vIE92ZXJyaWRlIHRoaXMgbWV0aG9kIG9yIGBlcnJvcigpYCB0byBwcm92aWRlIGN1c3RvbVxuICAgIC8vIDQwNCBiZWhhdmlvciAoaS5lIHJlZGlyZWN0aW5nIHRvIC8gb3Igc2hvd2luZyBhIHdhcm5pbmcpXG4gICAgbm90Rm91bmQ6IGZ1bmN0aW9uKHZlcmIsIHBhdGgpIHtcbiAgICAgIHZhciByZXQgPSB0aGlzLmVycm9yKFsnNDA0IE5vdCBGb3VuZCcsIHZlcmIsIHBhdGhdLmpvaW4oJyAnKSk7XG4gICAgICByZXR1cm4gKHZlcmIgPT09ICdnZXQnKSA/IHJldCA6IHRydWU7XG4gICAgfSxcblxuICAgIC8vIFRoZSBiYXNlIGVycm9yIGhhbmRsZXIgdGFrZXMgYSBzdHJpbmcgYG1lc3NhZ2VgIGFuZCBhbiBgRXJyb3JgXG4gICAgLy8gb2JqZWN0LiBJZiBgcmFpc2VfZXJyb3JzYCBpcyBzZXQgdG8gYHRydWVgIG9uIHRoZSBhcHAgbGV2ZWwsXG4gICAgLy8gdGhpcyB3aWxsIHJlLXRocm93IHRoZSBlcnJvciB0byB0aGUgYnJvd3Nlci4gT3RoZXJ3aXNlIGl0IHdpbGwgc2VuZCB0aGUgZXJyb3JcbiAgICAvLyB0byBgbG9nKClgLiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwcm92aWRlIGN1c3RvbSBlcnJvciBoYW5kbGluZ1xuICAgIC8vIGUuZyBsb2dnaW5nIHRvIGEgc2VydmVyIHNpZGUgY29tcG9uZW50IG9yIGRpc3BsYXlpbmcgc29tZSBmZWVkYmFjayB0byB0aGVcbiAgICAvLyB1c2VyLlxuICAgIGVycm9yOiBmdW5jdGlvbihtZXNzYWdlLCBvcmlnaW5hbF9lcnJvcikge1xuICAgICAgaWYgKCFvcmlnaW5hbF9lcnJvcikgeyBvcmlnaW5hbF9lcnJvciA9IG5ldyBFcnJvcigpOyB9XG4gICAgICBvcmlnaW5hbF9lcnJvci5tZXNzYWdlID0gW21lc3NhZ2UsIG9yaWdpbmFsX2Vycm9yLm1lc3NhZ2VdLmpvaW4oJyAnKTtcbiAgICAgIHRoaXMudHJpZ2dlcignZXJyb3InLCB7bWVzc2FnZTogb3JpZ2luYWxfZXJyb3IubWVzc2FnZSwgZXJyb3I6IG9yaWdpbmFsX2Vycm9yfSk7XG4gICAgICBpZiAodGhpcy5yYWlzZV9lcnJvcnMpIHtcbiAgICAgICAgdGhyb3cob3JpZ2luYWxfZXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2cob3JpZ2luYWxfZXJyb3IubWVzc2FnZSwgb3JpZ2luYWxfZXJyb3IpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfY2hlY2tMb2NhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbG9jYXRpb24sIHJldHVybmVkO1xuICAgICAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgICAgIGxvY2F0aW9uID0gdGhpcy5nZXRMb2NhdGlvbigpO1xuICAgICAgLy8gY29tcGFyZSB0byBzZWUgaWYgaGFzaCBoYXMgY2hhbmdlZFxuICAgICAgaWYgKCF0aGlzLmxhc3RfbG9jYXRpb24gfHwgdGhpcy5sYXN0X2xvY2F0aW9uWzBdICE9ICdnZXQnIHx8IHRoaXMubGFzdF9sb2NhdGlvblsxXSAhPSBsb2NhdGlvbikge1xuICAgICAgICAvLyByZXNldCBsYXN0IGxvY2F0aW9uXG4gICAgICAgIHRoaXMubGFzdF9sb2NhdGlvbiA9IFsnZ2V0JywgbG9jYXRpb25dO1xuICAgICAgICAvLyBsb29rdXAgcm91dGUgZm9yIGN1cnJlbnQgaGFzaFxuICAgICAgICByZXR1cm5lZCA9IHRoaXMucnVuUm91dGUoJ2dldCcsIGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXR1cm5lZDtcbiAgICB9LFxuXG4gICAgX2dldEZvcm1WZXJiOiBmdW5jdGlvbihmb3JtKSB7XG4gICAgICB2YXIgJGZvcm0gPSAkKGZvcm0pLCB2ZXJiLCAkX21ldGhvZDtcbiAgICAgICRfbWV0aG9kID0gJGZvcm0uZmluZCgnaW5wdXRbbmFtZT1cIl9tZXRob2RcIl0nKTtcbiAgICAgIGlmICgkX21ldGhvZC5sZW5ndGggPiAwKSB7IHZlcmIgPSAkX21ldGhvZC52YWwoKTsgfVxuICAgICAgaWYgKCF2ZXJiKSB7IHZlcmIgPSAkZm9ybVswXS5nZXRBdHRyaWJ1dGUoJ21ldGhvZCcpOyB9XG4gICAgICBpZiAoIXZlcmIgfHwgdmVyYiA9PT0gJycpIHsgdmVyYiA9ICdnZXQnOyB9XG4gICAgICByZXR1cm4gJC50cmltKHZlcmIudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9LFxuXG4gICAgX2NoZWNrRm9ybVN1Ym1pc3Npb246IGZ1bmN0aW9uKGZvcm0pIHtcbiAgICAgIHZhciAkZm9ybSwgcGF0aCwgdmVyYiwgcGFyYW1zLCByZXR1cm5lZDtcbiAgICAgIHRoaXMudHJpZ2dlcignY2hlY2stZm9ybS1zdWJtaXNzaW9uJywge2Zvcm06IGZvcm19KTtcbiAgICAgICRmb3JtID0gJChmb3JtKTtcbiAgICAgIHBhdGggID0gJGZvcm0uYXR0cignYWN0aW9uJykgfHwgJyc7XG4gICAgICB2ZXJiICA9IHRoaXMuX2dldEZvcm1WZXJiKCRmb3JtKTtcblxuICAgICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgICAgdGhpcy5sb2coJ19jaGVja0Zvcm1TdWJtaXNzaW9uJywgJGZvcm0sIHBhdGgsIHZlcmIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodmVyYiA9PT0gJ2dldCcpIHtcbiAgICAgICAgcGFyYW1zID0gdGhpcy5fc2VyaWFsaXplRm9ybVBhcmFtcygkZm9ybSk7XG4gICAgICAgIGlmIChwYXJhbXMgIT09ICcnKSB7IHBhdGggKz0gJz8nICsgcGFyYW1zOyB9XG4gICAgICAgIHRoaXMuc2V0TG9jYXRpb24ocGF0aCk7XG4gICAgICAgIHJldHVybmVkID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fcGFyc2VGb3JtUGFyYW1zKCRmb3JtKSk7XG4gICAgICAgIHJldHVybmVkID0gdGhpcy5ydW5Sb3V0ZSh2ZXJiLCBwYXRoLCBwYXJhbXMsIGZvcm0uZ2V0KDApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAodHlwZW9mIHJldHVybmVkID09ICd1bmRlZmluZWQnKSA/IGZhbHNlIDogcmV0dXJuZWQ7XG4gICAgfSxcblxuICAgIF9zZXJpYWxpemVGb3JtUGFyYW1zOiBmdW5jdGlvbigkZm9ybSkge1xuICAgICAgIHZhciBxdWVyeVN0cmluZyA9IFwiXCIsXG4gICAgICAgICBmaWVsZHMgPSAkZm9ybS5zZXJpYWxpemVBcnJheSgpLFxuICAgICAgICAgaTtcbiAgICAgICBpZiAoZmllbGRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgIHF1ZXJ5U3RyaW5nID0gdGhpcy5fZW5jb2RlRm9ybVBhaXIoZmllbGRzWzBdLm5hbWUsIGZpZWxkc1swXS52YWx1ZSk7XG4gICAgICAgICBmb3IgKGkgPSAxOyBpIDwgZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgIHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmcgKyBcIiZcIiArIHRoaXMuX2VuY29kZUZvcm1QYWlyKGZpZWxkc1tpXS5uYW1lLCBmaWVsZHNbaV0udmFsdWUpO1xuICAgICAgICAgfVxuICAgICAgIH1cbiAgICAgICByZXR1cm4gcXVlcnlTdHJpbmc7XG4gICAgfSxcblxuICAgIF9lbmNvZGVGb3JtUGFpcjogZnVuY3Rpb24obmFtZSwgdmFsdWUpe1xuICAgICAgcmV0dXJuIF9lbmNvZGUobmFtZSkgKyBcIj1cIiArIF9lbmNvZGUodmFsdWUpO1xuICAgIH0sXG5cbiAgICBfcGFyc2VGb3JtUGFyYW1zOiBmdW5jdGlvbigkZm9ybSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHt9LFxuICAgICAgICAgIGZvcm1fZmllbGRzID0gJGZvcm0uc2VyaWFsaXplQXJyYXkoKSxcbiAgICAgICAgICBpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGZvcm1fZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHBhcmFtcyA9IHRoaXMuX3BhcnNlUGFyYW1QYWlyKHBhcmFtcywgZm9ybV9maWVsZHNbaV0ubmFtZSwgZm9ybV9maWVsZHNbaV0udmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9LFxuXG4gICAgX3BhcnNlUXVlcnlTdHJpbmc6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7fSwgcGFydHMsIHBhaXJzLCBwYWlyLCBpO1xuXG4gICAgICBwYXJ0cyA9IHBhdGgubWF0Y2goUVVFUllfU1RSSU5HX01BVENIRVIpO1xuICAgICAgaWYgKHBhcnRzICYmIHBhcnRzWzFdKSB7XG4gICAgICAgIHBhaXJzID0gcGFydHNbMV0uc3BsaXQoJyYnKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgcGFyYW1zID0gdGhpcy5fcGFyc2VQYXJhbVBhaXIocGFyYW1zLCBfZGVjb2RlKHBhaXJbMF0pLCBfZGVjb2RlKHBhaXJbMV0gfHwgXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH0sXG5cbiAgICBfcGFyc2VQYXJhbVBhaXI6IGZ1bmN0aW9uKHBhcmFtcywga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbXNba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKF9pc0FycmF5KHBhcmFtc1trZXldKSkge1xuICAgICAgICAgIHBhcmFtc1trZXldLnB1c2godmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmFtc1trZXldID0gW3BhcmFtc1trZXldLCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH0sXG5cbiAgICBfbGlzdGVuOiBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQoKS5iaW5kKFtuYW1lLCB0aGlzLmV2ZW50TmFtZXNwYWNlKCldLmpvaW4oJy4nKSwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICBfdW5saXN0ZW46IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy4kZWxlbWVudCgpLnVuYmluZChbbmFtZSwgdGhpcy5ldmVudE5hbWVzcGFjZSgpXS5qb2luKCcuJyksIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgLy8gYFNhbW15LlJlbmRlckNvbnRleHRgIGlzIGFuIG9iamVjdCB0aGF0IG1ha2VzIHNlcXVlbnRpYWwgdGVtcGxhdGUgbG9hZGluZyxcbiAgLy8gcmVuZGVyaW5nIGFuZCBpbnRlcnBvbGF0aW9uIHNlYW1sZXNzIGV2ZW4gd2hlbiBkZWFsaW5nIHdpdGggYXN5bmNocm9ub3VzXG4gIC8vIG9wZXJhdGlvbnMuXG4gIC8vXG4gIC8vIGBSZW5kZXJDb250ZXh0YCBvYmplY3RzIGFyZSBub3QgdXN1YWxseSBjcmVhdGVkIGRpcmVjdGx5LCByYXRoZXIgdGhleSBhcmVcbiAgLy8gaW5zdGFudGlhdGVkIGZyb20gYW4gYFNhbW15LkV2ZW50Q29udGV4dGAgYnkgdXNpbmcgYHJlbmRlcigpYCwgYGxvYWQoKWAgb3JcbiAgLy8gYHBhcnRpYWwoKWAgd2hpY2ggYWxsIHJldHVybiBgUmVuZGVyQ29udGV4dGAgb2JqZWN0cy5cbiAgLy9cbiAgLy8gYFJlbmRlckNvbnRleHRgIG1ldGhvZHMgYWx3YXlzIHJldHVybnMgYSBtb2RpZmllZCBgUmVuZGVyQ29udGV4dGBcbiAgLy8gZm9yIGNoYWluaW5nIChsaWtlIGpRdWVyeSBpdHNlbGYpLlxuICAvL1xuICAvLyBUaGUgY29yZSBtYWdpYyBpcyBpbiB0aGUgYHRoZW4oKWAgbWV0aG9kIHdoaWNoIHB1dHMgdGhlIGNhbGxiYWNrIHBhc3NlZCBhc1xuICAvLyBhbiBhcmd1bWVudCBpbnRvIGEgcXVldWUgdG8gYmUgZXhlY3V0ZWQgb25jZSB0aGUgcHJldmlvdXMgY2FsbGJhY2sgaXMgY29tcGxldGUuXG4gIC8vIEFsbCB0aGUgbWV0aG9kcyBvZiBgUmVuZGVyQ29udGV4dGAgYXJlIHdyYXBwZWQgaW4gYHRoZW4oKWAgd2hpY2ggYWxsb3dzIHlvdVxuICAvLyB0byBxdWV1ZSB1cCBtZXRob2RzIGJ5IGNoYWluaW5nLCBidXQgbWFpbnRhaW5pbmcgYSBndWFyYW50ZWVkIGV4ZWN1dGlvbiBvcmRlclxuICAvLyBldmVuIHdpdGggcmVtb3RlIGNhbGxzIHRvIGZldGNoIHRlbXBsYXRlcy5cbiAgLy9cbiAgU2FtbXkuUmVuZGVyQ29udGV4dCA9IGZ1bmN0aW9uKGV2ZW50X2NvbnRleHQpIHtcbiAgICB0aGlzLmV2ZW50X2NvbnRleHQgICAgPSBldmVudF9jb250ZXh0O1xuICAgIHRoaXMuY2FsbGJhY2tzICAgICAgICA9IFtdO1xuICAgIHRoaXMucHJldmlvdXNfY29udGVudCA9IG51bGw7XG4gICAgdGhpcy5jb250ZW50ICAgICAgICAgID0gbnVsbDtcbiAgICB0aGlzLm5leHRfZW5naW5lICAgICAgPSBmYWxzZTtcbiAgICB0aGlzLndhaXRpbmcgICAgICAgICAgPSBmYWxzZTtcbiAgfTtcblxuICBTYW1teS5SZW5kZXJDb250ZXh0LnByb3RvdHlwZSA9ICQuZXh0ZW5kKHt9LCBTYW1teS5PYmplY3QucHJvdG90eXBlLCB7XG5cbiAgICAvLyBUaGUgXCJjb3JlXCIgb2YgdGhlIGBSZW5kZXJDb250ZXh0YCBvYmplY3QsIGFkZHMgdGhlIGBjYWxsYmFja2AgdG8gdGhlXG4gICAgLy8gcXVldWUuIElmIHRoZSBjb250ZXh0IGlzIGB3YWl0aW5nYCAobWVhbmluZyBhbiBhc3luYyBvcGVyYXRpb24gaXMgaGFwcGVuaW5nKVxuICAgIC8vIHRoZW4gdGhlIGNhbGxiYWNrIHdpbGwgYmUgZXhlY3V0ZWQgaW4gb3JkZXIsIG9uY2UgdGhlIG90aGVyIG9wZXJhdGlvbnMgYXJlXG4gICAgLy8gY29tcGxldGUuIElmIHRoZXJlIGlzIG5vIGN1cnJlbnRseSBleGVjdXRpbmcgb3BlcmF0aW9uLCB0aGUgYGNhbGxiYWNrYFxuICAgIC8vIGlzIGV4ZWN1dGVkIGltbWVkaWF0ZWx5LlxuICAgIC8vXG4gICAgLy8gVGhlIHZhbHVlIHJldHVybmVkIGZyb20gdGhlIGNhbGxiYWNrIGlzIHN0b3JlZCBpbiBgY29udGVudGAgZm9yIHRoZVxuICAgIC8vIHN1YnNlcXVlbnQgb3BlcmF0aW9uLiBJZiB5b3UgcmV0dXJuIGBmYWxzZWAsIHRoZSBxdWV1ZSB3aWxsIHBhdXNlLCBhbmRcbiAgICAvLyB0aGUgbmV4dCBjYWxsYmFjayBpbiB0aGUgcXVldWUgd2lsbCBub3QgYmUgZXhlY3V0ZWQgdW50aWwgYG5leHQoKWAgaXNcbiAgICAvLyBjYWxsZWQuIFRoaXMgYWxsb3dzIGZvciB0aGUgZ3VhcmFudGVlZCBvcmRlciBvZiBleGVjdXRpb24gd2hpbGUgd29ya2luZ1xuICAgIC8vIHdpdGggYXN5bmMgb3BlcmF0aW9ucy5cbiAgICAvL1xuICAgIC8vIElmIHRoZW4oKSBpcyBwYXNzZWQgYSBzdHJpbmcgaW5zdGVhZCBvZiBhIGZ1bmN0aW9uLCB0aGUgc3RyaW5nIGlzIGxvb2tlZFxuICAgIC8vIHVwIGFzIGEgaGVscGVyIG1ldGhvZCBvbiB0aGUgZXZlbnQgY29udGV4dC5cbiAgICAvL1xuICAgIC8vICMjIyBFeGFtcGxlXG4gICAgLy9cbiAgICAvLyAgICAgIHRoaXMuZ2V0KCcjLycsIGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICAgICAvLyBpbml0aWFsaXplIHRoZSBSZW5kZXJDb250ZXh0XG4gICAgLy8gICAgICAgIC8vIEV2ZW4gdGhvdWdoIGBsb2FkKClgIGV4ZWN1dGVzIGFzeW5jLCB0aGUgbmV4dCBgdGhlbigpYFxuICAgIC8vICAgICAgICAvLyB3b250IGV4ZWN1dGUgdW50aWwgdGhlIGxvYWQgZmluaXNoZXNcbiAgICAvLyAgICAgICAgdGhpcy5sb2FkKCdteWZpbGUudHh0JylcbiAgICAvLyAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAvLyAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZW4gaXMgdGhlIGNvbnRlbnQgb2YgdGhlXG4gICAgLy8gICAgICAgICAgICAgIC8vIHByZXYgb3BlcmF0aW9uXG4gICAgLy8gICAgICAgICAgICAgICQoJyNtYWluJykuaHRtbChjb250ZW50KTtcbiAgICAvLyAgICAgICAgICAgIH0pO1xuICAgIC8vICAgICAgfSk7XG4gICAgLy9cbiAgICB0aGVuOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgaWYgKCFfaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgICAgLy8gaWYgYSBzdHJpbmcgaXMgcGFzc2VkIHRvIHRoZW4sIGFzc3VtZSB3ZSB3YW50IHRvIGNhbGxcbiAgICAgICAgLy8gYSBoZWxwZXIgb24gdGhlIGV2ZW50IGNvbnRleHQgaW4gaXRzIGNvbnRleHRcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycgJiYgY2FsbGJhY2sgaW4gdGhpcy5ldmVudF9jb250ZXh0KSB7XG4gICAgICAgICAgdmFyIGhlbHBlciA9IHRoaXMuZXZlbnRfY29udGV4dFtjYWxsYmFja107XG4gICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gaGVscGVyLmFwcGx5KHRoaXMuZXZlbnRfY29udGV4dCwgW2NvbnRlbnRdKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBpZiAodGhpcy53YWl0aW5nKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53YWl0KCk7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciByZXR1cm5lZCA9IGNhbGxiYWNrLmFwcGx5KGNvbnRleHQsIFtjb250ZXh0LmNvbnRlbnQsIGNvbnRleHQucHJldmlvdXNfY29udGVudF0pO1xuICAgICAgICAgIGlmIChyZXR1cm5lZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnRleHQubmV4dChyZXR1cm5lZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBQYXVzZSB0aGUgYFJlbmRlckNvbnRleHRgIHF1ZXVlLiBDb21iaW5lZCB3aXRoIGBuZXh0KClgIGFsbG93cyBmb3IgYXN5bmNcbiAgICAvLyBvcGVyYXRpb25zLlxuICAgIC8vXG4gICAgLy8gIyMjIEV4YW1wbGVcbiAgICAvL1xuICAgIC8vICAgICAgICB0aGlzLmdldCgnIy8nLCBmdW5jdGlvbigpIHtcbiAgICAvLyAgICAgICAgICB0aGlzLmxvYWQoJ215dGV4dC5qc29uJylcbiAgICAvLyAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oY29udGVudCkge1xuICAgIC8vICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcyxcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgZGF0YSAgICA9IEpTT04ucGFyc2UoY29udGVudCk7XG4gICAgLy8gICAgICAgICAgICAgICAgLy8gcGF1c2UgZXhlY3V0aW9uXG4gICAgLy8gICAgICAgICAgICAgICAgY29udGV4dC53YWl0KCk7XG4gICAgLy8gICAgICAgICAgICAgICAgLy8gcG9zdCB0byBhIHVybFxuICAgIC8vICAgICAgICAgICAgICAgICQucG9zdChkYXRhLnVybCwge30sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgLy8gICAgICAgICAgICAgICAgICBjb250ZXh0Lm5leHQoSlNPTi5wYXJzZShyZXNwb25zZSkpO1xuICAgIC8vICAgICAgICAgICAgICAgIH0pO1xuICAgIC8vICAgICAgICAgICAgICB9KVxuICAgIC8vICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgLy8gICAgICAgICAgICAgICAgLy8gZGF0YSBpcyBqc29uIGZyb20gdGhlIHByZXZpb3VzIHBvc3RcbiAgICAvLyAgICAgICAgICAgICAgICAkKCcjbWVzc2FnZScpLnRleHQoZGF0YS5zdGF0dXMpO1xuICAgIC8vICAgICAgICAgICAgICB9KTtcbiAgICAvLyAgICAgICAgfSk7XG4gICAgd2FpdDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLndhaXRpbmcgPSB0cnVlO1xuICAgIH0sXG5cbiAgICAvLyBSZXN1bWUgdGhlIHF1ZXVlLCBzZXR0aW5nIGBjb250ZW50YCB0byBiZSB1c2VkIGluIHRoZSBuZXh0IG9wZXJhdGlvbi5cbiAgICAvLyBTZWUgYHdhaXQoKWAgZm9yIGFuIGV4YW1wbGUuXG4gICAgbmV4dDogZnVuY3Rpb24oY29udGVudCkge1xuICAgICAgdGhpcy53YWl0aW5nID0gZmFsc2U7XG4gICAgICBpZiAodHlwZW9mIGNvbnRlbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMucHJldmlvdXNfY29udGVudCA9IHRoaXMuY29udGVudDtcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNhbGxiYWNrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMudGhlbih0aGlzLmNhbGxiYWNrcy5zaGlmdCgpKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gTG9hZCBhIHRlbXBsYXRlIGludG8gdGhlIGNvbnRleHQuXG4gICAgLy8gVGhlIGBsb2NhdGlvbmAgY2FuIGVpdGhlciBiZSBhIHN0cmluZyBzcGVjaWZ5aW5nIHRoZSByZW1vdGUgcGF0aCB0byB0aGVcbiAgICAvLyBmaWxlLCBhIGpRdWVyeSBvYmplY3QsIG9yIGEgRE9NIGVsZW1lbnQuXG4gICAgLy9cbiAgICAvLyBObyBpbnRlcnBvbGF0aW9uIGhhcHBlbnMgYnkgZGVmYXVsdCwgdGhlIGNvbnRlbnQgaXMgc3RvcmVkIGluXG4gICAgLy8gYGNvbnRlbnRgLlxuICAgIC8vXG4gICAgLy8gSW4gdGhlIGNhc2Ugb2YgYSBwYXRoLCB1bmxlc3MgdGhlIG9wdGlvbiBge2NhY2hlOiBmYWxzZX1gIGlzIHBhc3NlZCB0aGVcbiAgICAvLyBkYXRhIGlzIHN0b3JlZCBpbiB0aGUgYXBwJ3MgYHRlbXBsYXRlQ2FjaGUoKWAuXG4gICAgLy9cbiAgICAvLyBJZiBhIGpRdWVyeSBvciBET00gb2JqZWN0IGlzIHBhc3NlZCB0aGUgYGlubmVySFRNTGAgb2YgdGhlIG5vZGUgaXMgcHVsbGVkIGluLlxuICAgIC8vIFRoaXMgaXMgdXNlZnVsIGZvciBuZXN0aW5nIHRlbXBsYXRlcyBhcyBwYXJ0IG9mIHRoZSBpbml0aWFsIHBhZ2UgbG9hZCB3cmFwcGVkXG4gICAgLy8gaW4gaW52aXNpYmxlIGVsZW1lbnRzIG9yIGA8c2NyaXB0PmAgdGFncy4gV2l0aCB0ZW1wbGF0ZSBwYXRocywgdGhlIHRlbXBsYXRlXG4gICAgLy8gZW5naW5lIGlzIGxvb2tlZCB1cCBieSB0aGUgZXh0ZW5zaW9uLiBGb3IgRE9NL2pRdWVyeSBlbWJlZGRlZCB0ZW1wbGF0ZXMsXG4gICAgLy8gdGhpcyBpc250IHBvc3NpYmxlLCBzbyB0aGVyZSBhcmUgYSBjb3VwbGUgb2Ygb3B0aW9uczpcbiAgICAvL1xuICAgIC8vICAqIHBhc3MgYW4gYHtlbmdpbmU6fWAgb3B0aW9uLlxuICAgIC8vICAqIGRlZmluZSB0aGUgZW5naW5lIGluIHRoZSBgZGF0YS1lbmdpbmVgIGF0dHJpYnV0ZSBvZiB0aGUgcGFzc2VkIG5vZGUuXG4gICAgLy8gICoganVzdCBzdG9yZSB0aGUgcmF3IHRlbXBsYXRlIGRhdGEgYW5kIHVzZSBgaW50ZXJwb2xhdGUoKWAgbWFudWFsbHlcbiAgICAvL1xuICAgIC8vIElmIGEgYGNhbGxiYWNrYCBpcyBwYXNzZWQgaXQgaXMgZXhlY3V0ZWQgYWZ0ZXIgdGhlIHRlbXBsYXRlIGxvYWQuXG4gICAgbG9hZDogZnVuY3Rpb24obG9jYXRpb24sIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2hvdWxkX2NhY2hlLCBjYWNoZWQsIGlzX2pzb24sIGxvY2F0aW9uX2FycmF5O1xuICAgICAgICBpZiAoX2lzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7IHRoaXMudGhlbihjYWxsYmFjayk7IH1cbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAvLyBpdCdzIGEgcGF0aFxuICAgICAgICAgIGlzX2pzb24gICAgICA9IChsb2NhdGlvbi5tYXRjaCgvXFwuanNvbihcXD98JCkvKSB8fCBvcHRpb25zLmpzb24pO1xuICAgICAgICAgIHNob3VsZF9jYWNoZSA9IGlzX2pzb24gPyBvcHRpb25zLmNhY2hlID09PSB0cnVlIDogb3B0aW9ucy5jYWNoZSAhPT0gZmFsc2U7XG4gICAgICAgICAgY29udGV4dC5uZXh0X2VuZ2luZSA9IGNvbnRleHQuZXZlbnRfY29udGV4dC5lbmdpbmVGb3IobG9jYXRpb24pO1xuICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmNhY2hlO1xuICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmpzb247XG4gICAgICAgICAgaWYgKG9wdGlvbnMuZW5naW5lKSB7XG4gICAgICAgICAgICBjb250ZXh0Lm5leHRfZW5naW5lID0gb3B0aW9ucy5lbmdpbmU7XG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5lbmdpbmU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaG91bGRfY2FjaGUgJiYgKGNhY2hlZCA9IHRoaXMuZXZlbnRfY29udGV4dC5hcHAudGVtcGxhdGVDYWNoZShsb2NhdGlvbikpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLndhaXQoKTtcbiAgICAgICAgICAkLmFqYXgoJC5leHRlbmQoe1xuICAgICAgICAgICAgdXJsOiBsb2NhdGlvbixcbiAgICAgICAgICAgIGRhdGE6IHt9LFxuICAgICAgICAgICAgZGF0YVR5cGU6IGlzX2pzb24gPyAnanNvbicgOiAndGV4dCcsXG4gICAgICAgICAgICB0eXBlOiAnZ2V0JyxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgaWYgKHNob3VsZF9jYWNoZSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZXZlbnRfY29udGV4dC5hcHAudGVtcGxhdGVDYWNoZShsb2NhdGlvbiwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udGV4dC5uZXh0KGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaXQncyBhIGRvbS9qUXVlcnlcbiAgICAgICAgICBpZiAobG9jYXRpb24ubm9kZVR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbi5pbm5lckhUTUw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsb2NhdGlvbi5zZWxlY3Rvcikge1xuICAgICAgICAgICAgLy8gaXQncyBhIGpRdWVyeVxuICAgICAgICAgICAgY29udGV4dC5uZXh0X2VuZ2luZSA9IGxvY2F0aW9uLmF0dHIoJ2RhdGEtZW5naW5lJyk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jbG9uZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uLnJlbW92ZSgpWzBdLmlubmVySFRNTC50b1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uWzBdLmlubmVySFRNTC50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIExvYWQgcGFydGlhbHNcbiAgICAvL1xuICAgIC8vICMjIyBFeGFtcGxlXG4gICAgLy9cbiAgICAvLyAgICAgIHRoaXMubG9hZFBhcnRpYWxzKHtteXBhcnRpYWw6ICcvcGF0aC90by9wYXJ0aWFsJ30pO1xuICAgIC8vXG4gICAgbG9hZFBhcnRpYWxzOiBmdW5jdGlvbihwYXJ0aWFscykge1xuICAgICAgdmFyIG5hbWU7XG4gICAgICBpZihwYXJ0aWFscykge1xuICAgICAgICB0aGlzLnBhcnRpYWxzID0gdGhpcy5wYXJ0aWFscyB8fCB7fTtcbiAgICAgICAgZm9yKG5hbWUgaW4gcGFydGlhbHMpIHtcbiAgICAgICAgICAoZnVuY3Rpb24oY29udGV4dCwgbmFtZSkge1xuICAgICAgICAgICAgY29udGV4dC5sb2FkKHBhcnRpYWxzW25hbWVdKVxuICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnRpYWxzW25hbWVdID0gdGVtcGxhdGU7XG4gICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkodGhpcywgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBgbG9hZCgpYCBhIHRlbXBsYXRlIGFuZCB0aGVuIGBpbnRlcnBvbGF0ZSgpYCBpdCB3aXRoIGRhdGEuXG4gICAgLy9cbiAgICAvLyBjYW4gYmUgY2FsbGVkIHdpdGggbXVsdGlwbGUgZGlmZmVyZW50IHNpZ25hdHVyZXM6XG4gICAgLy9cbiAgICAvLyAgICAgIHRoaXMucmVuZGVyKGNhbGxiYWNrKTtcbiAgICAvLyAgICAgIHRoaXMucmVuZGVyKCcvbG9jYXRpb24nKTtcbiAgICAvLyAgICAgIHRoaXMucmVuZGVyKCcvbG9jYXRpb24nLCB7c29tZTogZGF0YX0pO1xuICAgIC8vICAgICAgdGhpcy5yZW5kZXIoJy9sb2NhdGlvbicsIGNhbGxiYWNrKTtcbiAgICAvLyAgICAgIHRoaXMucmVuZGVyKCcvbG9jYXRpb24nLCB7c29tZTogZGF0YX0sIGNhbGxiYWNrKTtcbiAgICAvLyAgICAgIHRoaXMucmVuZGVyKCcvbG9jYXRpb24nLCB7c29tZTogZGF0YX0sIHtteTogcGFydGlhbHN9KTtcbiAgICAvLyAgICAgIHRoaXMucmVuZGVyKCcvbG9jYXRpb24nLCBjYWxsYmFjaywge215OiBwYXJ0aWFsc30pO1xuICAgIC8vICAgICAgdGhpcy5yZW5kZXIoJy9sb2NhdGlvbicsIHtzb21lOiBkYXRhfSwgY2FsbGJhY2ssIHtteTogcGFydGlhbHN9KTtcbiAgICAvL1xuICAgIC8vICMjIyBFeGFtcGxlXG4gICAgLy9cbiAgICAvLyAgICAgIHRoaXMuZ2V0KCcjLycsIGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICAgICB0aGlzLnJlbmRlcignbXl0ZW1wbGF0ZS50ZW1wbGF0ZScsIHtuYW1lOiAndGVzdCd9KTtcbiAgICAvLyAgICAgIH0pO1xuICAgIC8vXG4gICAgcmVuZGVyOiBmdW5jdGlvbihsb2NhdGlvbiwgZGF0YSwgY2FsbGJhY2ssIHBhcnRpYWxzKSB7XG4gICAgICBpZiAoX2lzRnVuY3Rpb24obG9jYXRpb24pICYmICFkYXRhKSB7XG4gICAgICAgIC8vIGludm9rZWQgYXMgcmVuZGVyKGNhbGxiYWNrKVxuICAgICAgICByZXR1cm4gdGhpcy50aGVuKGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKF9pc0Z1bmN0aW9uKGRhdGEpKSB7XG4gICAgICAgICAgLy8gaW52b2tlZCBhcyByZW5kZXIobG9jYXRpb24sIGNhbGxiYWNrLCBbcGFydGlhbHNdKVxuICAgICAgICAgIHBhcnRpYWxzID0gY2FsbGJhY2s7XG4gICAgICAgICAgY2FsbGJhY2sgPSBkYXRhO1xuICAgICAgICAgIGRhdGEgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYoY2FsbGJhY2sgJiYgIV9pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgICAgICAgIC8vIGludm9rZWQgYXMgcmVuZGVyKGxvY2F0aW9uLCBkYXRhLCBwYXJ0aWFscylcbiAgICAgICAgICBwYXJ0aWFscyA9IGNhbGxiYWNrO1xuICAgICAgICAgIGNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRQYXJ0aWFscyhwYXJ0aWFscylcbiAgICAgICAgICAgICAgICAgICAubG9hZChsb2NhdGlvbilcbiAgICAgICAgICAgICAgICAgICAuaW50ZXJwb2xhdGUoZGF0YSwgbG9jYXRpb24pXG4gICAgICAgICAgICAgICAgICAgLnRoZW4oY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBgcmVuZGVyKClgIHRoZSBgbG9jYXRpb25gIHdpdGggYGRhdGFgIGFuZCB0aGVuIGBzd2FwKClgIHRoZVxuICAgIC8vIGFwcCdzIGAkZWxlbWVudGAgd2l0aCB0aGUgcmVuZGVyZWQgY29udGVudC5cbiAgICBwYXJ0aWFsOiBmdW5jdGlvbihsb2NhdGlvbiwgZGF0YSwgY2FsbGJhY2ssIHBhcnRpYWxzKSB7XG4gICAgICBpZiAoX2lzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgIC8vIGludm9rZWQgYXMgcGFydGlhbChsb2NhdGlvbiwgZGF0YSwgY2FsbGJhY2ssIFtwYXJ0aWFsc10pXG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlcihsb2NhdGlvbiwgZGF0YSwgcGFydGlhbHMpLnN3YXAoY2FsbGJhY2spO1xuICAgICAgfSBlbHNlIGlmIChfaXNGdW5jdGlvbihkYXRhKSkge1xuICAgICAgICAvLyBpbnZva2VkIGFzIHBhcnRpYWwobG9jYXRpb24sIGNhbGxiYWNrLCBbcGFydGlhbHNdKVxuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIobG9jYXRpb24sIHt9LCBjYWxsYmFjaykuc3dhcChkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGludm9rZWQgYXMgcGFydGlhbChsb2NhdGlvbiwgZGF0YSwgW3BhcnRpYWxzXSlcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKGxvY2F0aW9uLCBkYXRhLCBjYWxsYmFjaykuc3dhcCgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBkZWZlcnMgdGhlIGNhbGwgb2YgZnVuY3Rpb24gdG8gb2NjdXIgaW4gb3JkZXIgb2YgdGhlIHJlbmRlciBxdWV1ZS5cbiAgICAvLyBUaGUgZnVuY3Rpb24gY2FuIGFjY2VwdCBhbnkgbnVtYmVyIG9mIGFyZ3VtZW50cyBhcyBsb25nIGFzIHRoZSBsYXN0XG4gICAgLy8gYXJndW1lbnQgaXMgYSBjYWxsYmFjayBmdW5jdGlvbi4gVGhpcyBpcyB1c2VmdWwgZm9yIHB1dHRpbmcgYXJiaXRyYXJ5XG4gICAgLy8gYXN5bmNocm9ub3VzIGZ1bmN0aW9ucyBpbnRvIHRoZSBxdWV1ZS4gVGhlIGNvbnRlbnQgcGFzc2VkIHRvIHRoZVxuICAgIC8vIGNhbGxiYWNrIGlzIHBhc3NlZCBhcyBgY29udGVudGAgdG8gdGhlIG5leHQgaXRlbSBpbiB0aGUgcXVldWUuXG4gICAgLy9cbiAgICAvLyAjIyMgRXhhbXBsZVxuICAgIC8vXG4gICAgLy8gICAgIHRoaXMuc2VuZCgkLmdldEpTT04sICcvYXBwLmpzb24nKVxuICAgIC8vICAgICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgIC8vICAgICAgICAgICAkKCcjbWVzc2FnZSkudGV4dChqc29uWydtZXNzYWdlJ10pO1xuICAgIC8vICAgICAgICAgIH0pO1xuICAgIC8vXG4gICAgLy9cbiAgICBzZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcyxcbiAgICAgICAgICBhcmdzID0gX21ha2VBcnJheShhcmd1bWVudHMpLFxuICAgICAgICAgIGZ1biAgPSBhcmdzLnNoaWZ0KCk7XG5cbiAgICAgIGlmIChfaXNBcnJheShhcmdzWzBdKSkgeyBhcmdzID0gYXJnc1swXTsgfVxuXG4gICAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgICAgYXJncy5wdXNoKGZ1bmN0aW9uKHJlc3BvbnNlKSB7IGNvbnRleHQubmV4dChyZXNwb25zZSk7IH0pO1xuICAgICAgICBjb250ZXh0LndhaXQoKTtcbiAgICAgICAgZnVuLmFwcGx5KGZ1biwgYXJncyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBpdGVyYXRlcyBvdmVyIGFuIGFycmF5LCBhcHBseWluZyB0aGUgY2FsbGJhY2sgZm9yIGVhY2ggaXRlbSBpdGVtLiB0aGVcbiAgICAvLyBjYWxsYmFjayB0YWtlcyB0aGUgc2FtZSBzdHlsZSBvZiBhcmd1bWVudHMgYXMgYGpRdWVyeS5lYWNoKClgIChpbmRleCwgaXRlbSkuXG4gICAgLy8gVGhlIHJldHVybiB2YWx1ZSBvZiBlYWNoIGNhbGxiYWNrIGlzIGNvbGxlY3RlZCBhcyBhIHNpbmdsZSBzdHJpbmcgYW5kIHN0b3JlZFxuICAgIC8vIGFzIGBjb250ZW50YCB0byBiZSB1c2VkIGluIHRoZSBuZXh0IGl0ZXJhdGlvbiBvZiB0aGUgYFJlbmRlckNvbnRleHRgLlxuICAgIGNvbGxlY3Q6IGZ1bmN0aW9uKGFycmF5LCBjYWxsYmFjaywgbm93KSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICB2YXIgY29sbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoX2lzRnVuY3Rpb24oYXJyYXkpKSB7XG4gICAgICAgICAgY2FsbGJhY2sgPSBhcnJheTtcbiAgICAgICAgICBhcnJheSA9IHRoaXMuY29udGVudDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGVudHMgPSBbXSwgZG9tcyA9IGZhbHNlO1xuICAgICAgICAkLmVhY2goYXJyYXksIGZ1bmN0aW9uKGksIGl0ZW0pIHtcbiAgICAgICAgICB2YXIgcmV0dXJuZWQgPSBjYWxsYmFjay5hcHBseShjb250ZXh0LCBbaSwgaXRlbV0pO1xuICAgICAgICAgIGlmIChyZXR1cm5lZC5qcXVlcnkgJiYgcmV0dXJuZWQubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHJldHVybmVkID0gcmV0dXJuZWRbMF07XG4gICAgICAgICAgICBkb21zID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGVudHMucHVzaChyZXR1cm5lZCk7XG4gICAgICAgICAgcmV0dXJuIHJldHVybmVkO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRvbXMgPyBjb250ZW50cyA6IGNvbnRlbnRzLmpvaW4oJycpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBub3cgPyBjb2xsKCkgOiB0aGlzLnRoZW4oY29sbCk7XG4gICAgfSxcblxuICAgIC8vIGxvYWRzIGEgdGVtcGxhdGUsIGFuZCB0aGVuIGludGVycG9sYXRlcyBpdCBmb3IgZWFjaCBpdGVtIGluIHRoZSBgZGF0YWBcbiAgICAvLyBhcnJheS4gSWYgYSBjYWxsYmFjayBpcyBwYXNzZWQsIGl0IHdpbGwgY2FsbCB0aGUgY2FsbGJhY2sgd2l0aCBlYWNoXG4gICAgLy8gaXRlbSBpbiB0aGUgYXJyYXkgX2FmdGVyXyBpbnRlcnBvbGF0aW9uXG4gICAgcmVuZGVyRWFjaDogZnVuY3Rpb24obG9jYXRpb24sIG5hbWUsIGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoX2lzQXJyYXkobmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBkYXRhO1xuICAgICAgICBkYXRhID0gbmFtZTtcbiAgICAgICAgbmFtZSA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5sb2FkKGxvY2F0aW9uKS50aGVuKGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgICAgICB2YXIgcmN0eCA9IHRoaXM7XG4gICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICBkYXRhID0gX2lzQXJyYXkodGhpcy5wcmV2aW91c19jb250ZW50KSA/IHRoaXMucHJldmlvdXNfY29udGVudCA6IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICQuZWFjaChkYXRhLCBmdW5jdGlvbihpLCB2YWx1ZSkge1xuICAgICAgICAgICAgICB2YXIgaWRhdGEgPSB7fSwgZW5naW5lID0gdGhpcy5uZXh0X2VuZ2luZSB8fCBsb2NhdGlvbjtcbiAgICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZGF0YVtuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlkYXRhID0gdmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FsbGJhY2sodmFsdWUsIHJjdHguZXZlbnRfY29udGV4dC5pbnRlcnBvbGF0ZShjb250ZW50LCBpZGF0YSwgZW5naW5lKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sbGVjdChkYXRhLCBmdW5jdGlvbihpLCB2YWx1ZSkge1xuICAgICAgICAgICAgICB2YXIgaWRhdGEgPSB7fSwgZW5naW5lID0gdGhpcy5uZXh0X2VuZ2luZSB8fCBsb2NhdGlvbjtcbiAgICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZGF0YVtuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlkYXRhID0gdmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRfY29udGV4dC5pbnRlcnBvbGF0ZShjb250ZW50LCBpZGF0YSwgZW5naW5lKTtcbiAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyB1c2VzIHRoZSBwcmV2aW91cyBsb2FkZWQgYGNvbnRlbnRgIGFuZCB0aGUgYGRhdGFgIG9iamVjdCB0byBpbnRlcnBvbGF0ZVxuICAgIC8vIGEgdGVtcGxhdGUuIGBlbmdpbmVgIGRlZmluZXMgdGhlIHRlbXBsYXRpbmcvaW50ZXJwb2xhdGlvbiBtZXRob2QvZW5naW5lXG4gICAgLy8gdGhhdCBzaG91bGQgYmUgdXNlZC4gSWYgYGVuZ2luZWAgaXMgbm90IHBhc3NlZCwgdGhlIGBuZXh0X2VuZ2luZWAgaXNcbiAgICAvLyB1c2VkLiBJZiBgcmV0YWluYCBpcyBgdHJ1ZWAsIHRoZSBmaW5hbCBpbnRlcnBvbGF0ZWQgZGF0YSBpcyBhcHBlbmRlZCB0b1xuICAgIC8vIHRoZSBgcHJldmlvdXNfY29udGVudGAgaW5zdGVhZCBvZiBqdXN0IHJlcGxhY2luZyBpdC5cbiAgICBpbnRlcnBvbGF0ZTogZnVuY3Rpb24oZGF0YSwgZW5naW5lLCByZXRhaW4pIHtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oY29udGVudCwgcHJldikge1xuICAgICAgICBpZiAoIWRhdGEgJiYgcHJldikgeyBkYXRhID0gcHJldjsgfVxuICAgICAgICBpZiAodGhpcy5uZXh0X2VuZ2luZSkge1xuICAgICAgICAgIGVuZ2luZSA9IHRoaXMubmV4dF9lbmdpbmU7XG4gICAgICAgICAgdGhpcy5uZXh0X2VuZ2luZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZW5kZXJlZCA9IGNvbnRleHQuZXZlbnRfY29udGV4dC5pbnRlcnBvbGF0ZShjb250ZW50LCBkYXRhLCBlbmdpbmUsIHRoaXMucGFydGlhbHMpO1xuICAgICAgICByZXR1cm4gcmV0YWluID8gcHJldiArIHJlbmRlcmVkIDogcmVuZGVyZWQ7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gU3dhcCB0aGUgcmV0dXJuIGNvbnRlbnRzIGVuc3VyaW5nIG9yZGVyLiBTZWUgYEFwcGxpY2F0aW9uI3N3YXBgXG4gICAgc3dhcDogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oY29udGVudCkge1xuICAgICAgICB0aGlzLmV2ZW50X2NvbnRleHQuc3dhcChjb250ZW50LCBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfSkudHJpZ2dlcignY2hhbmdlZCcsIHt9KTtcbiAgICB9LFxuXG4gICAgLy8gU2FtZSB1c2FnZSBhcyBgalF1ZXJ5LmZuLmFwcGVuZFRvKClgIGJ1dCB1c2VzIGB0aGVuKClgIHRvIGVuc3VyZSBvcmRlclxuICAgIGFwcGVuZFRvOiBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICAgICQoc2VsZWN0b3IpLmFwcGVuZChjb250ZW50KTtcbiAgICAgIH0pLnRyaWdnZXIoJ2NoYW5nZWQnLCB7fSk7XG4gICAgfSxcblxuICAgIC8vIFNhbWUgdXNhZ2UgYXMgYGpRdWVyeS5mbi5wcmVwZW5kVG8oKWAgYnV0IHVzZXMgYHRoZW4oKWAgdG8gZW5zdXJlIG9yZGVyXG4gICAgcHJlcGVuZFRvOiBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICAgICQoc2VsZWN0b3IpLnByZXBlbmQoY29udGVudCk7XG4gICAgICB9KS50cmlnZ2VyKCdjaGFuZ2VkJywge30pO1xuICAgIH0sXG5cbiAgICAvLyBSZXBsYWNlcyB0aGUgYCQoc2VsZWN0b3IpYCB1c2luZyBgaHRtbCgpYCB3aXRoIHRoZSBwcmV2aW91c2x5IGxvYWRlZFxuICAgIC8vIGBjb250ZW50YFxuICAgIHJlcGxhY2U6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgICAgJChzZWxlY3RvcikuaHRtbChjb250ZW50KTtcbiAgICAgIH0pLnRyaWdnZXIoJ2NoYW5nZWQnLCB7fSk7XG4gICAgfSxcblxuICAgIC8vIHRyaWdnZXIgdGhlIGV2ZW50IGluIHRoZSBvcmRlciBvZiB0aGUgZXZlbnQgY29udGV4dC4gU2FtZSBzZW1hbnRpY3NcbiAgICAvLyBhcyBgU2FtbXkuRXZlbnRDb250ZXh0I3RyaWdnZXIoKWAuIElmIGRhdGEgaXMgb21pdHRlZCwgYGNvbnRlbnRgXG4gICAgLy8gaXMgc2VudCBhcyBge2NvbnRlbnQ6IGNvbnRlbnR9YFxuICAgIHRyaWdnZXI6IGZ1bmN0aW9uKG5hbWUsIGRhdGEpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oY29udGVudCkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT0gJ3VuZGVmaW5lZCcpIHsgZGF0YSA9IHtjb250ZW50OiBjb250ZW50fTsgfVxuICAgICAgICB0aGlzLmV2ZW50X2NvbnRleHQudHJpZ2dlcihuYW1lLCBkYXRhKTtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfSk7XG5cbiAgLy8gYFNhbW15LkV2ZW50Q29udGV4dGAgb2JqZWN0cyBhcmUgY3JlYXRlZCBldmVyeSB0aW1lIGEgcm91dGUgaXMgcnVuIG9yIGFcbiAgLy8gYm91bmQgZXZlbnQgaXMgdHJpZ2dlcmVkLiBUaGUgY2FsbGJhY2tzIGZvciB0aGVzZSBldmVudHMgYXJlIGV2YWx1YXRlZCB3aXRoaW4gYSBgU2FtbXkuRXZlbnRDb250ZXh0YFxuICAvLyBUaGlzIHdpdGhpbiB0aGVzZSBjYWxsYmFja3MgdGhlIHNwZWNpYWwgbWV0aG9kcyBvZiBgRXZlbnRDb250ZXh0YCBhcmUgYXZhaWxhYmxlLlxuICAvL1xuICAvLyAjIyMgRXhhbXBsZVxuICAvL1xuICAvLyAgICAgICAkLnNhbW15KGZ1bmN0aW9uKCkge1xuICAvLyAgICAgICAgIC8vIFRoZSBjb250ZXh0IGhlcmUgaXMgdGhpcyBTYW1teS5BcHBsaWNhdGlvblxuICAvLyAgICAgICAgIHRoaXMuZ2V0KCcjLzpuYW1lJywgZnVuY3Rpb24oKSB7XG4gIC8vICAgICAgICAgICAvLyBUaGUgY29udGV4dCBoZXJlIGlzIGEgbmV3IFNhbW15LkV2ZW50Q29udGV4dFxuICAvLyAgICAgICAgICAgaWYgKHRoaXMucGFyYW1zWyduYW1lJ10gPT0gJ3NhbW15Jykge1xuICAvLyAgICAgICAgICAgICB0aGlzLnBhcnRpYWwoJ25hbWUuaHRtbC5lcmInLCB7bmFtZTogJ1NhbW15J30pO1xuICAvLyAgICAgICAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgICAgICAgdGhpcy5yZWRpcmVjdCgnIy9zb21ld2hlcmUtZWxzZScpXG4gIC8vICAgICAgICAgICB9XG4gIC8vICAgICAgICAgfSk7XG4gIC8vICAgICAgIH0pO1xuICAvL1xuICAvLyBJbml0aWFsaXplIGEgbmV3IEV2ZW50Q29udGV4dFxuICAvL1xuICAvLyAjIyMgQXJndW1lbnRzXG4gIC8vXG4gIC8vICogYGFwcGAgVGhlIGBTYW1teS5BcHBsaWNhdGlvbmAgdGhpcyBldmVudCBpcyBjYWxsZWQgd2l0aGluLlxuICAvLyAqIGB2ZXJiYCBUaGUgdmVyYiBpbnZva2VkIHRvIHJ1biB0aGlzIGNvbnRleHQvcm91dGUuXG4gIC8vICogYHBhdGhgIFRoZSBzdHJpbmcgcGF0aCBpbnZva2VkIHRvIHJ1biB0aGlzIGNvbnRleHQvcm91dGUuXG4gIC8vICogYHBhcmFtc2AgQW4gT2JqZWN0IG9mIG9wdGlvbmFsIHBhcmFtcyB0byBwYXNzIHRvIHRoZSBjb250ZXh0LiBJcyBjb252ZXJ0ZWRcbiAgLy8gICB0byBhIGBTYW1teS5PYmplY3RgLlxuICAvLyAqIGB0YXJnZXRgIGEgRE9NIGVsZW1lbnQgdGhhdCB0aGUgZXZlbnQgdGhhdCBob2xkcyB0aGlzIGNvbnRleHQgb3JpZ2luYXRlc1xuICAvLyAgIGZyb20uIEZvciBwb3N0LCBwdXQgYW5kIGRlbCByb3V0ZXMsIHRoaXMgaXMgdGhlIGZvcm0gZWxlbWVudCB0aGF0IHRyaWdnZXJlZFxuICAvLyAgIHRoZSByb3V0ZS5cbiAgLy9cbiAgU2FtbXkuRXZlbnRDb250ZXh0ID0gZnVuY3Rpb24oYXBwLCB2ZXJiLCBwYXRoLCBwYXJhbXMsIHRhcmdldCkge1xuICAgIHRoaXMuYXBwICAgID0gYXBwO1xuICAgIHRoaXMudmVyYiAgID0gdmVyYjtcbiAgICB0aGlzLnBhdGggICA9IHBhdGg7XG4gICAgdGhpcy5wYXJhbXMgPSBuZXcgU2FtbXkuT2JqZWN0KHBhcmFtcyk7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIH07XG5cbiAgU2FtbXkuRXZlbnRDb250ZXh0LnByb3RvdHlwZSA9ICQuZXh0ZW5kKHt9LCBTYW1teS5PYmplY3QucHJvdG90eXBlLCB7XG5cbiAgICAvLyBBIHNob3J0Y3V0IHRvIHRoZSBhcHAncyBgJGVsZW1lbnQoKWBcbiAgICAkZWxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcHAuJGVsZW1lbnQoX21ha2VBcnJheShhcmd1bWVudHMpLnNoaWZ0KCkpO1xuICAgIH0sXG5cbiAgICAvLyBMb29rIHVwIGEgdGVtcGxhdGluZyBlbmdpbmUgd2l0aGluIHRoZSBjdXJyZW50IGFwcCBhbmQgY29udGV4dC5cbiAgICAvLyBgZW5naW5lYCBjYW4gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XG4gICAgLy9cbiAgICAvLyAqIGEgZnVuY3Rpb246IHNob3VsZCBjb25mb3JtIHRvIGBmdW5jdGlvbihjb250ZW50LCBkYXRhKSB7IHJldHVybiBpbnRlcnBvbGF0ZWQ7IH1gXG4gICAgLy8gKiBhIHRlbXBsYXRlIHBhdGg6ICd0ZW1wbGF0ZS5lanMnLCBsb29rcyB1cCB0aGUgZXh0ZW5zaW9uIHRvIG1hdGNoIHRvXG4gICAgLy8gICB0aGUgYGVqcygpYCBoZWxwZXJcbiAgICAvLyAqIGEgc3RyaW5nIHJlZmVycmluZyB0byB0aGUgaGVscGVyOiBcIm11c3RhY2hlXCIgPT4gYG11c3RhY2hlKClgXG4gICAgLy9cbiAgICAvLyBJZiBubyBlbmdpbmUgaXMgZm91bmQsIHVzZSB0aGUgYXBwJ3MgZGVmYXVsdCBgdGVtcGxhdGVfZW5naW5lYFxuICAgIC8vXG4gICAgZW5naW5lRm9yOiBmdW5jdGlvbihlbmdpbmUpIHtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgZW5naW5lX21hdGNoO1xuICAgICAgLy8gaWYgcGF0aCBpcyBhY3R1YWxseSBhbiBlbmdpbmUgZnVuY3Rpb24ganVzdCByZXR1cm4gaXRcbiAgICAgIGlmIChfaXNGdW5jdGlvbihlbmdpbmUpKSB7IHJldHVybiBlbmdpbmU7IH1cbiAgICAgIC8vIGxvb2t1cCBlbmdpbmUgbmFtZSBieSBwYXRoIGV4dGVuc2lvblxuICAgICAgZW5naW5lID0gKGVuZ2luZSB8fCBjb250ZXh0LmFwcC50ZW1wbGF0ZV9lbmdpbmUpLnRvU3RyaW5nKCk7XG4gICAgICBpZiAoKGVuZ2luZV9tYXRjaCA9IGVuZ2luZS5tYXRjaCgvXFwuKFteXFwuXFw/XFwjXSspKFxcP3wkKS8pKSkge1xuICAgICAgICBlbmdpbmUgPSBlbmdpbmVfbWF0Y2hbMV07XG4gICAgICB9XG4gICAgICAvLyBzZXQgdGhlIGVuZ2luZSB0byB0aGUgZGVmYXVsdCB0ZW1wbGF0ZSBlbmdpbmUgaWYgbm8gbWF0Y2ggaXMgZm91bmRcbiAgICAgIGlmIChlbmdpbmUgJiYgX2lzRnVuY3Rpb24oY29udGV4dFtlbmdpbmVdKSkge1xuICAgICAgICByZXR1cm4gY29udGV4dFtlbmdpbmVdO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29udGV4dC5hcHAudGVtcGxhdGVfZW5naW5lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuZ2luZUZvcihjb250ZXh0LmFwcC50ZW1wbGF0ZV9lbmdpbmUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbnRlbnQsIGRhdGEpIHsgcmV0dXJuIGNvbnRlbnQ7IH07XG4gICAgfSxcblxuICAgIC8vIHVzaW5nIHRoZSB0ZW1wbGF0ZSBgZW5naW5lYCBmb3VuZCB3aXRoIGBlbmdpbmVGb3IoKWAsIGludGVycG9sYXRlIHRoZVxuICAgIC8vIGBkYXRhYCBpbnRvIGBjb250ZW50YFxuICAgIGludGVycG9sYXRlOiBmdW5jdGlvbihjb250ZW50LCBkYXRhLCBlbmdpbmUsIHBhcnRpYWxzKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbmdpbmVGb3IoZW5naW5lKS5hcHBseSh0aGlzLCBbY29udGVudCwgZGF0YSwgcGFydGlhbHNdKTtcbiAgICB9LFxuXG4gICAgLy8gQ3JlYXRlIGFuZCByZXR1cm4gYSBgU2FtbXkuUmVuZGVyQ29udGV4dGAgY2FsbGluZyBgcmVuZGVyKClgIG9uIGl0LlxuICAgIC8vIExvYWRzIHRoZSB0ZW1wbGF0ZSBhbmQgaW50ZXJwb2xhdGUgdGhlIGRhdGEsIGhvd2V2ZXIgZG9lcyBub3QgYWN0dWFsXG4gICAgLy8gcGxhY2UgaXQgaW4gdGhlIERPTS5cbiAgICAvL1xuICAgIC8vICMjIyBFeGFtcGxlXG4gICAgLy9cbiAgICAvLyAgICAgIC8vIG15dGVtcGxhdGUubXVzdGFjaGUgPGRpdiBjbGFzcz1cIm5hbWVcIj57e25hbWV9fTwvZGl2PlxuICAgIC8vICAgICAgcmVuZGVyKCdteXRlbXBsYXRlLm11c3RhY2hlJywge25hbWU6ICdxdWlya2V5J30pO1xuICAgIC8vICAgICAgLy8gc2V0cyB0aGUgYGNvbnRlbnRgIHRvIDxkaXYgY2xhc3M9XCJuYW1lXCI+cXVpcmtleTwvZGl2PlxuICAgIC8vICAgICAgcmVuZGVyKCdteXRlbXBsYXRlLm11c3RhY2hlJywge25hbWU6ICdxdWlya2V5J30pXG4gICAgLy8gICAgICAgIC5hcHBlbmRUbygndWwnKTtcbiAgICAvLyAgICAgIC8vIGFwcGVuZHMgdGhlIHJlbmRlcmVkIGNvbnRlbnQgdG8gJCgndWwnKVxuICAgIC8vXG4gICAgcmVuZGVyOiBmdW5jdGlvbihsb2NhdGlvbiwgZGF0YSwgY2FsbGJhY2ssIHBhcnRpYWxzKSB7XG4gICAgICByZXR1cm4gbmV3IFNhbW15LlJlbmRlckNvbnRleHQodGhpcykucmVuZGVyKGxvY2F0aW9uLCBkYXRhLCBjYWxsYmFjaywgcGFydGlhbHMpO1xuICAgIH0sXG5cbiAgICAvLyBDcmVhdGUgYW5kIHJldHVybiBhIGBTYW1teS5SZW5kZXJDb250ZXh0YCBjYWxsaW5nIGByZW5kZXJFYWNoKClgIG9uIGl0LlxuICAgIC8vIExvYWRzIHRoZSB0ZW1wbGF0ZSBhbmQgaW50ZXJwb2xhdGVzIHRoZSBkYXRhIGZvciBlYWNoIGl0ZW0sXG4gICAgLy8gaG93ZXZlciBkb2VzIG5vdCBhY3R1YWxseSBwbGFjZSBpdCBpbiB0aGUgRE9NLlxuICAgIC8vXG4gICAgLy8gYG5hbWVgIGlzIGFuIG9wdGlvbmFsIHBhcmFtZXRlciAoaWYgaXQgaXMgYW4gYXJyYXksIGl0IGlzIHVzZWQgYXMgYGRhdGFgLFxuICAgIC8vIGFuZCB0aGUgdGhpcmQgcGFyYW1ldGVyIHVzZWQgYXMgYGNhbGxiYWNrYCwgaWYgc2V0KS5cbiAgICAvL1xuICAgIC8vIElmIGBkYXRhYCBpcyBub3QgcHJvdmlkZWQsIGNvbnRlbnQgZnJvbSB0aGUgcHJldmlvdXMgc3RlcCBpbiB0aGUgY2hhaW5cbiAgICAvLyAoaWYgaXQgaXMgYW4gYXJyYXkpIGlzIHVzZWQsIGFuZCBgbmFtZWAgaXMgdXNlZCBhcyB0aGUga2V5IGZvciBlYWNoXG4gICAgLy8gZWxlbWVudCBvZiB0aGUgYXJyYXkgKHVzZWZ1bCBmb3IgcmVmZXJlbmNpbmcgaW4gdGVtcGxhdGUpLlxuICAgIC8vXG4gICAgLy8gIyMjIEV4YW1wbGVcbiAgICAvL1xuICAgIC8vICAgICAgLy8gbXl0ZW1wbGF0ZS5tdXN0YWNoZSA8ZGl2IGNsYXNzPVwibmFtZVwiPnt7bmFtZX19PC9kaXY+XG4gICAgLy8gICAgICByZW5kZXJFYWNoKCdteXRlbXBsYXRlLm11c3RhY2hlJywgW3tuYW1lOiAncXVpcmtleSd9LCB7bmFtZTogJ2VuZG9yJ31dKVxuICAgIC8vICAgICAgLy8gc2V0cyB0aGUgYGNvbnRlbnRgIHRvIDxkaXYgY2xhc3M9XCJuYW1lXCI+cXVpcmtleTwvZGl2PjxkaXYgY2xhc3M9XCJuYW1lXCI+ZW5kb3I8L2Rpdj5cbiAgICAvLyAgICAgIHJlbmRlckVhY2goJ215dGVtcGxhdGUubXVzdGFjaGUnLCBbe25hbWU6ICdxdWlya2V5J30sIHtuYW1lOiAnZW5kb3InfV0pLmFwcGVuZFRvKCd1bCcpO1xuICAgIC8vICAgICAgLy8gYXBwZW5kcyB0aGUgcmVuZGVyZWQgY29udGVudCB0byAkKCd1bCcpXG4gICAgLy9cbiAgICAvLyAgICAgIC8vIG5hbWVzLmpzb246IFtcInF1aXJrZXlcIiwgXCJlbmRvclwiXVxuICAgIC8vICAgICAgdGhpcy5sb2FkKCduYW1lcy5qc29uJykucmVuZGVyRWFjaCgnbXl0ZW1wbGF0ZS5tdXN0YWNoZScsICduYW1lJykuYXBwZW5kVG8oJ3VsJyk7XG4gICAgLy8gICAgICAvLyB1c2VzIHRoZSB0ZW1wbGF0ZSB0byByZW5kZXIgZWFjaCBpdGVtIGluIHRoZSBKU09OIGFycmF5XG4gICAgLy9cbiAgICByZW5kZXJFYWNoOiBmdW5jdGlvbihsb2NhdGlvbiwgbmFtZSwgZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBuZXcgU2FtbXkuUmVuZGVyQ29udGV4dCh0aGlzKS5yZW5kZXJFYWNoKGxvY2F0aW9uLCBuYW1lLCBkYXRhLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIC8vIGNyZWF0ZSBhIG5ldyBgU2FtbXkuUmVuZGVyQ29udGV4dGAgY2FsbGluZyBgbG9hZCgpYCB3aXRoIGBsb2NhdGlvbmAgYW5kXG4gICAgLy8gYG9wdGlvbnNgLiBDYWxsZWQgd2l0aG91dCBpbnRlcnBvbGF0aW9uIG9yIHBsYWNlbWVudCwgdGhpcyBhbGxvd3MgZm9yXG4gICAgLy8gcHJlbG9hZGluZy9jYWNoaW5nIHRoZSB0ZW1wbGF0ZXMuXG4gICAgbG9hZDogZnVuY3Rpb24obG9jYXRpb24sIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gbmV3IFNhbW15LlJlbmRlckNvbnRleHQodGhpcykubG9hZChsb2NhdGlvbiwgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAvLyBjcmVhdGUgYSBuZXcgYFNhbW15LlJlbmRlckNvbnRleHRgIGNhbGxpbmcgYGxvYWRQYXJ0aWFscygpYCB3aXRoIGBwYXJ0aWFsc2AuXG4gICAgbG9hZFBhcnRpYWxzOiBmdW5jdGlvbihwYXJ0aWFscykge1xuICAgICAgcmV0dXJuIG5ldyBTYW1teS5SZW5kZXJDb250ZXh0KHRoaXMpLmxvYWRQYXJ0aWFscyhwYXJ0aWFscyk7XG4gICAgfSxcblxuICAgIC8vIGByZW5kZXIoKWAgdGhlIGBsb2NhdGlvbmAgd2l0aCBgZGF0YWAgYW5kIHRoZW4gYHN3YXAoKWAgdGhlXG4gICAgLy8gYXBwJ3MgYCRlbGVtZW50YCB3aXRoIHRoZSByZW5kZXJlZCBjb250ZW50LlxuICAgIHBhcnRpYWw6IGZ1bmN0aW9uKGxvY2F0aW9uLCBkYXRhLCBjYWxsYmFjaywgcGFydGlhbHMpIHtcbiAgICAgIHJldHVybiBuZXcgU2FtbXkuUmVuZGVyQ29udGV4dCh0aGlzKS5wYXJ0aWFsKGxvY2F0aW9uLCBkYXRhLCBjYWxsYmFjaywgcGFydGlhbHMpO1xuICAgIH0sXG5cbiAgICAvLyBjcmVhdGUgYSBuZXcgYFNhbW15LlJlbmRlckNvbnRleHRgIGNhbGxpbmcgYHNlbmQoKWAgd2l0aCBhbiBhcmJpdHJhcnlcbiAgICAvLyBmdW5jdGlvblxuICAgIHNlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJjdHggPSBuZXcgU2FtbXkuUmVuZGVyQ29udGV4dCh0aGlzKTtcbiAgICAgIHJldHVybiByY3R4LnNlbmQuYXBwbHkocmN0eCwgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgLy8gQ2hhbmdlcyB0aGUgbG9jYXRpb24gb2YgdGhlIGN1cnJlbnQgd2luZG93LiBJZiBgdG9gIGJlZ2lucyB3aXRoXG4gICAgLy8gJyMnIGl0IG9ubHkgY2hhbmdlcyB0aGUgZG9jdW1lbnQncyBoYXNoLiBJZiBwYXNzZWQgbW9yZSB0aGFuIDEgYXJndW1lbnRcbiAgICAvLyByZWRpcmVjdCB3aWxsIGpvaW4gdGhlbSB0b2dldGhlciB3aXRoIGZvcndhcmQgc2xhc2hlcy5cbiAgICAvL1xuICAgIC8vICMjIyBFeGFtcGxlXG4gICAgLy9cbiAgICAvLyAgICAgIHJlZGlyZWN0KCcjL290aGVyL3JvdXRlJyk7XG4gICAgLy8gICAgICAvLyBlcXVpdmFsZW50IHRvXG4gICAgLy8gICAgICByZWRpcmVjdCgnIycsICdvdGhlcicsICdyb3V0ZScpO1xuICAgIC8vXG4gICAgcmVkaXJlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRvLCBhcmdzID0gX21ha2VBcnJheShhcmd1bWVudHMpLFxuICAgICAgICAgIGN1cnJlbnRfbG9jYXRpb24gPSB0aGlzLmFwcC5nZXRMb2NhdGlvbigpLFxuICAgICAgICAgIGwgPSBhcmdzLmxlbmd0aDtcbiAgICAgIGlmIChsID4gMSkge1xuICAgICAgICB2YXIgaSA9IDAsIHBhdGhzID0gW10sIHBhaXJzID0gW10sIHBhcmFtcyA9IHt9LCBoYXNfcGFyYW1zID0gZmFsc2U7XG4gICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2ldID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBwYXRocy5wdXNoKGFyZ3NbaV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkLmV4dGVuZChwYXJhbXMsIGFyZ3NbaV0pO1xuICAgICAgICAgICAgaGFzX3BhcmFtcyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRvID0gcGF0aHMuam9pbignLycpO1xuICAgICAgICBpZiAoaGFzX3BhcmFtcykge1xuICAgICAgICAgIGZvciAodmFyIGsgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBwYWlycy5wdXNoKHRoaXMuYXBwLl9lbmNvZGVGb3JtUGFpcihrLCBwYXJhbXNba10pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG8gKz0gJz8nICsgcGFpcnMuam9pbignJicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0byA9IGFyZ3NbMF07XG4gICAgICB9XG4gICAgICB0aGlzLnRyaWdnZXIoJ3JlZGlyZWN0Jywge3RvOiB0b30pO1xuICAgICAgdGhpcy5hcHAubGFzdF9sb2NhdGlvbiA9IFt0aGlzLnZlcmIsIHRoaXMucGF0aF07XG4gICAgICB0aGlzLmFwcC5zZXRMb2NhdGlvbih0byk7XG4gICAgICBpZiAobmV3IFJlZ0V4cCh0bykudGVzdChjdXJyZW50X2xvY2F0aW9uKSkge1xuICAgICAgICB0aGlzLmFwcC50cmlnZ2VyKCdsb2NhdGlvbi1jaGFuZ2VkJyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIFRyaWdnZXJzIGV2ZW50cyBvbiBgYXBwYCB3aXRoaW4gdGhlIGN1cnJlbnQgY29udGV4dC5cbiAgICB0cmlnZ2VyOiBmdW5jdGlvbihuYW1lLCBkYXRhKSB7XG4gICAgICBpZiAodHlwZW9mIGRhdGEgPT0gJ3VuZGVmaW5lZCcpIHsgZGF0YSA9IHt9OyB9XG4gICAgICBpZiAoIWRhdGEuY29udGV4dCkgeyBkYXRhLmNvbnRleHQgPSB0aGlzOyB9XG4gICAgICByZXR1cm4gdGhpcy5hcHAudHJpZ2dlcihuYW1lLCBkYXRhKTtcbiAgICB9LFxuXG4gICAgLy8gQSBzaG9ydGN1dCB0byBhcHAncyBgZXZlbnROYW1lc3BhY2UoKWBcbiAgICBldmVudE5hbWVzcGFjZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcHAuZXZlbnROYW1lc3BhY2UoKTtcbiAgICB9LFxuXG4gICAgLy8gQSBzaG9ydGN1dCB0byBhcHAncyBgc3dhcCgpYFxuICAgIHN3YXA6IGZ1bmN0aW9uKGNvbnRlbnRzLCBjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMuYXBwLnN3YXAoY29udGVudHMsIGNhbGxiYWNrKTtcbiAgICB9LFxuXG4gICAgLy8gUmFpc2VzIGEgcG9zc2libGUgYG5vdEZvdW5kKClgIGVycm9yIGZvciB0aGUgY3VycmVudCBwYXRoLlxuICAgIG5vdEZvdW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmFwcC5ub3RGb3VuZCh0aGlzLnZlcmIsIHRoaXMucGF0aCk7XG4gICAgfSxcblxuICAgIC8vIERlZmF1bHQgSlNPTiBwYXJzaW5nIHVzZXMgalF1ZXJ5J3MgYHBhcnNlSlNPTigpYC4gSW5jbHVkZSBgU2FtbXkuSlNPTmBcbiAgICAvLyBwbHVnaW4gZm9yIHRoZSBtb3JlIGNvbmZvcm1hbnQgXCJjcm9ja2ZvcmQgc3BlY2lhbFwiLlxuICAgIGpzb246IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgcmV0dXJuICQucGFyc2VKU09OKHN0cmluZyk7XG4gICAgfSxcblxuICAgIC8vIC8vPT4gU2FtbXkuRXZlbnRDb250ZXh0OiBnZXQgIy8ge31cbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXCJTYW1teS5FdmVudENvbnRleHQ6IFwiICsgW3RoaXMudmVyYiwgdGhpcy5wYXRoLCB0aGlzLnBhcmFtc10uam9pbignICcpO1xuICAgIH1cblxuICB9KTtcblxuICByZXR1cm4gU2FtbXk7XG59KTtcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My41LjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIwLTA1LTA0VDIyOjQ5WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjUuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXZlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICggaSArIDEgKSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0b2RkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gaSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIHByb3ZpZGVkIGNvbnRleHQ7IGZhbGxzIGJhY2sgdG8gdGhlIGdsb2JhbCBvbmVcblx0Ly8gaWYgbm90IHNwZWNpZmllZC5cblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMsIGRvYyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSwgZG9jICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGZsYXQoIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNVxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAyMC0wMy0xNFxuICovXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoIHt9ICkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoTmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0WyBpIF0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxcIiArXG5cdFx0XCJpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XVxuXHRcdC8vIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0cmV0dXJuIG5vbkhleCA/XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0bm9uSGV4IDpcblxuXHRcdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHRcdC8vIEZvciB2YWx1ZXMgb3V0c2lkZSB0aGUgQmFzaWMgTXVsdGlsaW5ndWFsIFBsYW5lIChCTVApLCBtYW51YWxseSBjb25zdHJ1Y3QgYVxuXHRcdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgK1xuXHRcdFx0XHRjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICggdGFyZ2V0WyBqKysgXSA9IGVsc1sgaSsrIF0gKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAoIG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAoIG0gPSBtYXRjaFsgMSBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMiBdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIG0gPSBtYXRjaFsgMyBdICkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdCggbm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCByY29tYmluYXRvcnMudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPT0gY29udGV4dCB8fCAhc3VwcG9ydC5zY29wZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRcdGlmICggKCBuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkgKSApIHtcblx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsICggbmlkID0gZXhwYW5kbyApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbIGkgXSA9ICggbmlkID8gXCIjXCIgKyBuaWQgOiBcIjpzY29wZVwiICkgKyBcIiBcIiArXG5cdFx0XHRcdFx0XHRcdHRvU2VsZWN0b3IoIGdyb3Vwc1sgaSBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICk7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoIFwifFwiICksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbIGkgXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5uZXh0U2libGluZyApICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuICggbmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIgKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbICggaiA9IG1hdGNoSW5kZXhlc1sgaSBdICkgXSApIHtcblx0XHRcdFx0XHRzZWVkWyBqIF0gPSAhKCBtYXRjaGVzWyBqIF0gPSBzZWVkWyBqIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSApO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5hbWVzcGFjZSA9IGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggZG9jID09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggcHJlZmVycmVkRG9jICE9IGRvY3VtZW50ICYmXG5cdFx0KCBzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyApICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSAxMSssIEVkZ2UgMTIgLSAxOCssIENocm9tZSA8PTE2IC0gMjUgb25seSwgRmlyZWZveCA8PTMuNiAtIDMxIG9ubHksXG5cdC8vIFNhZmFyaSA0IC0gNSBvbmx5LCBPcGVyYSA8PTExLjYgLSAxMi54IG9ubHlcblx0Ly8gSUUvRWRnZSAmIG9sZGVyIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIDpzY29wZSBwc2V1ZG8tY2xhc3MuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjAgb25seVxuXHQvLyBTYWZhcmkgNi4wIHN1cHBvcnRzIDpzY29wZSBidXQgaXQncyBhbiBhbGlhcyBvZiA6cm9vdCB0aGVyZS5cblx0c3VwcG9ydC5zY29wZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXHRcdHJldHVybiB0eXBlb2YgZWwucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0IWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOnNjb3BlIGZpZWxkc2V0IGRpdlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKCBcImNsYXNzTmFtZVwiICk7XG5cdH0gKTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudCggXCJcIiApICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCIqXCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFsgXCJUQUdcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbIFwiQ0xBU1NcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoICggc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSApICkge1xuXG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHR2YXIgaW5wdXQ7XG5cblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlttc2FsbG93Y2FwdHVyZV49JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbc2VsZWN0ZWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwifj1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHRcdC8vIElFIDExL0VkZ2UgZG9uJ3QgZmluZCBlbGVtZW50cyBvbiBhIGBbbmFtZT0nJ11gIHF1ZXJ5IGluIHNvbWUgY2FzZXMuXG5cdFx0XHQvLyBBZGRpbmcgYSB0ZW1wb3JhcnkgYXR0cmlidXRlIHRvIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIHNlbGVjdGlvbiB3b3Jrc1xuXHRcdFx0Ly8gYXJvdW5kIHRoZSBpc3N1ZS5cblx0XHRcdC8vIEludGVyZXN0aW5nbHksIElFIDEwICYgb2xkZXIgZG9uJ3Qgc2VlbSB0byBoYXZlIHRoZSBpc3N1ZS5cblx0XHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIlwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqbmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKj1cIiArXG5cdFx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmNoZWNrZWRcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmNoZWNrZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLiMuK1srfl1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9My42IC0gNSBvbmx5XG5cdFx0XHQvLyBPbGQgRmlyZWZveCBkb2Vzbid0IHRocm93IG9uIGEgYmFkbHktZXNjYXBlZCBpZGVudGlmaWVyLlxuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCJcXFxcXFxmXCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIltcXFxcclxcXFxuXFxcXGZdXCIgKTtcblx0XHR9ICk7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmVuYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpkaXNhYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IE9wZXJhIDEwIC0gMTEgb25seVxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiKiw6eFwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIsLio6XCIgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoICggbWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yICkgKSApICkge1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oIFwifFwiICkgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbiggXCJ8XCIgKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSApO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoICggYiA9IGIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCggIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSApICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGEgPT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBhICkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYiA9PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGIgKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdHJldHVybiBhID09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbIGkgXSA9PT0gYnBbIGkgXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFsgaSBdLCBicFsgaSBdICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdGFwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHRzZXREb2N1bWVudCggZWxlbSApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXG5cdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuICggc2VsICsgXCJcIiApLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKCBub2RlID0gZWxlbVsgaSsrIF0gKSApIHtcblxuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWyAzIF0gPSAoIG1hdGNoWyAzIF0gfHwgbWF0Y2hbIDQgXSB8fFxuXHRcdFx0XHRtYXRjaFsgNSBdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAyIF0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbIDMgXSA9IFwiIFwiICsgbWF0Y2hbIDMgXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAxIF0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblxuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbIDQgXSA9ICsoIG1hdGNoWyA0IF0gP1xuXHRcdFx0XHRcdG1hdGNoWyA1IF0gKyAoIG1hdGNoWyA2IF0gfHwgMSApIDpcblx0XHRcdFx0XHQyICogKCBtYXRjaFsgMyBdID09PSBcImV2ZW5cIiB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbIDUgXSA9ICsoICggbWF0Y2hbIDcgXSArIG1hdGNoWyA4IF0gKSB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFsgNiBdICYmIG1hdGNoWyAyIF07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByWyBcIkNISUxEXCIgXS50ZXN0KCBtYXRjaFsgMCBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoIGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApICkgJiZcblxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KCBleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGggKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQoIHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcdFx0XCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkgKSAmJiBjbGFzc0NhY2hlKFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdChcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHxcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fFxuXHRcdFx0XHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIF9hcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBub2RlWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaSBdID0gISggbWF0Y2hlc1sgaSBdID0gZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdCggbGFuZyB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcInhtbDpsYW5nXCIgKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSggXCJsYW5nXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKCBlbGVtID0gZWxlbS5wYXJlbnROb2RlICkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmXG5cdFx0XHRcdCggIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkgKSAmJlxuXHRcdFx0XHQhISggZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCApO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkICkgfHxcblx0XHRcdFx0KCBub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQgKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1sgXCJlbXB0eVwiIF0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSApID09IG51bGwgfHxcblx0XHRcdFx0XHRhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0gKSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSApLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgP1xuXHRcdFx0XHRhcmd1bWVudCArIGxlbmd0aCA6XG5cdFx0XHRcdGFyZ3VtZW50ID4gbGVuZ3RoID9cblx0XHRcdFx0XHRsZW5ndGggOlxuXHRcdFx0XHRcdGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1sgXCJudGhcIiBdID0gRXhwci5wc2V1ZG9zWyBcImVxXCIgXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKCBtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWyAwIF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKCB0b2tlbnMgPSBbXSApICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoICggbWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbIDAgXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSApO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKCBtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkgKSAmJiAoICFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KCBtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSApICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1sgaSBdLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKCBvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSApICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggbmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAoIG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzWyBpIF0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbIDAgXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1sgaSBdLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyhcblx0XHRcdFx0c2VsZWN0b3IgfHwgXCIqXCIsXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsXG5cdFx0XHRcdFtdXG5cdFx0XHQpLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICggZWxlbSA9IHRlbXBbIGkgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbIGkgXSBdID0gISggbWF0Y2hlckluWyBwb3N0TWFwWyBpIF0gXSA9IGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblxuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKCBtYXRjaGVySW5bIGkgXSA9IGVsZW0gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAoIG1hdGNoZXJPdXQgPSBbXSApLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSAmJlxuXHRcdFx0XHRcdFx0KCB0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFsgaSBdICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFsgdGVtcCBdID0gISggcmVzdWx0c1sgdGVtcCBdID0gZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMCBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbIFwiIFwiIF0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdCggY2hlY2tDb250ZXh0ID0gY29udGV4dCApLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBpIF0udHlwZSBdICkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvciggZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIgKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1sgaSBdLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zWyBpIF0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBqIF0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdHRva2Vuc1xuXHRcdFx0XHRcdFx0LnNsaWNlKCAwLCBpIC0gMSApXG5cdFx0XHRcdFx0XHQuY29uY2F0KCB7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSApXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAoIHRva2VucyA9IHRva2Vucy5zbGljZSggaiApICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kWyBcIlRBR1wiIF0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKCBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSApLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSApICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gc2V0TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblxuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKCB1bm1hdGNoZWRbIGkgXSB8fCBzZXRNYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkWyBpIF0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblxuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFsgaSBdICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKFxuXHRcdFx0c2VsZWN0b3IsXG5cdFx0XHRtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKVxuXHRcdCk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoICggc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvciApICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICggdG9rZW4gPSB0b2tlbnNbIDAgXSApLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDEgXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFsgXCJJRFwiIF0oIHRva2VuLm1hdGNoZXNbIDAgXVxuXHRcdFx0XHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSwgY29udGV4dCApIHx8IFtdIClbIDAgXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbIFwibmVlZHNDb250ZXh0XCIgXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1sgaSBdO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICggdHlwZSA9IHRva2VuLnR5cGUgKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKCBmaW5kID0gRXhwci5maW5kWyB0eXBlIF0gKSApIHtcblxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoIHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1sgMCBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHRcblx0XHRcdFx0KSApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KCBcIlwiICkuc29ydCggc29ydE9yZGVyICkuam9pbiggXCJcIiApID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApICkgJiAxO1xufSApO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcImhyZWZcIiApID09PSBcIiNcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgX25hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT0gbnVsbDtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0gKTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSApKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIF9rZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggX2FsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9LCBkb2MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjayApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmNhbGwoIGVsZW0gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHhcIjtcblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQgKSA+IDM7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggX2VsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmIGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zLCBkb2MgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBwcm9wcy50b3AgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHByb3BzLnRvcCArPSBcInB4XCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHR5cGVvZiBwcm9wcy5sZWZ0ID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRwcm9wcy5sZWZ0ICs9IFwicHhcIjtcblx0XHRcdH1cblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBfaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXHR9ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG52YXIgcnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiaW1wb3J0IHsgSGFuZGxlYmFycyB9IGZyb20gXCJzYW1teVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhvbWUoaGJzOiBIYW5kbGViYXJzKXtcclxuICAgIGNvbnN0IHRlbXBsYXRlID0gaGJzLnN3YXAoXCI8aDE+SE9NRSBQQUdFPC9oMT5cIiwoKSA9Pnt9KTtcclxufSIsImltcG9ydCBTYW1teSBmcm9tIFwic2FtbXlcIjtcclxuaW1wb3J0IHsgaG9tZSB9IGZyb20gXCIuL2NvbnRyb2xsZXJzL2hvbWVcIjtcclxuY29uc3QgYXBwID0gU2FtbXkoJyNtYWluJyk7XHJcbmFwcC5nZXQoJyMvJyxob21lKTtcclxuYXBwLmdldCgnIy9ob21lJyxob21lKTtcclxuYXBwLmdldCgnLycsaG9tZSk7XHJcbmFwcC5ydW4oJyMvJyk7Il0sInNvdXJjZVJvb3QiOiIifQ==